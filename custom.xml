<?xml version='1.0' encoding='utf-8'?>
<unload unload_date="2025-03-31 04:08:31">
<sys_remote_update_set action="INSERT_OR_UPDATE">
<application display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</application>
<application_name>PagerDuty Incident Resolution Platform</application_name>
<application_scope>x_pd_integration</application_scope>
<application_version>8.1.0</application_version>
<collisions />
<commit_date />
<deleted />
<description>All customizations refit for PagerDuty plugin v8.1.0.</description>
<inserted />
<name>pd-fo-cnb-pd_upgrade_810-705395 - Batch Parent</name>
<origin_sys_id />
<parent display_value="" />
<release_date />
<remote_base_update_set display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Parent">61d0afe2c3ac221040d0becdd40131d1</remote_base_update_set>
<remote_parent_id />
<remote_sys_id>98c8aaa6c368221040d0becdd4013162</remote_sys_id>
<state>loaded</state>
<summary />
<sys_class_name>sys_remote_update_set</sys_class_name>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-03-31 04:08:31</sys_created_on>
<sys_id>61d0afe2c3ac221040d0becdd40131d1</sys_id>
<sys_mod_count>1</sys_mod_count>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-03-31 04:08:31</sys_updated_on>
<update_set display_value="" />
<update_source display_value="" />
<updated />
</sys_remote_update_set>
<sys_remote_update_set action="INSERT_OR_UPDATE">
<application display_value="Global">global</application>
<application_name>Global</application_name>
<application_scope>global</application_scope>
<application_version />
<collisions />
<commit_date />
<deleted />
<description>All customizations refit for PagerDuty plugin v8.1.0.</description>
<inserted />
<name>pd-fo-cnb-pd_upgrade_810-705395 - Batch Child</name>
<origin_sys_id />
<parent display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Parent">61d0afe2c3ac221040d0becdd40131d1</parent>
<release_date />
<remote_base_update_set display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Parent">61d0afe2c3ac221040d0becdd40131d1</remote_base_update_set>
<remote_parent_id />
<remote_sys_id>1cc8aaa6c368221040d0becdd4013164</remote_sys_id>
<state>in_hierarchy</state>
<summary />
<sys_class_name>sys_remote_update_set</sys_class_name>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-03-31 04:08:31</sys_created_on>
<sys_id>25d0afe2c3ac221040d0becdd40131d8</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-03-31 04:08:31</sys_updated_on>
<update_set display_value="" />
<update_source display_value="" />
<updated />
</sys_remote_update_set>
<sys_remote_update_set action="INSERT_OR_UPDATE">
<application display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</application>
<application_name>PagerDuty Incident Resolution Platform</application_name>
<application_scope>x_pd_integration</application_scope>
<application_version>8.1.0</application_version>
<collisions />
<commit_date />
<deleted />
<description>All customizations refit for PagerDuty plugin v8.1.0.</description>
<inserted />
<name>pd-fo-cnb-pd_upgrade_810-705395 - Batch Child</name>
<origin_sys_id />
<parent display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Parent">61d0afe2c3ac221040d0becdd40131d1</parent>
<release_date />
<remote_base_update_set display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Parent">61d0afe2c3ac221040d0becdd40131d1</remote_base_update_set>
<remote_parent_id />
<remote_sys_id>12b6dae9c337121040d0becdd4013142</remote_sys_id>
<state>in_hierarchy</state>
<summary />
<sys_class_name>sys_remote_update_set</sys_class_name>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-03-31 04:08:31</sys_created_on>
<sys_id>2dd0afe2c3ac221040d0becdd40131d1</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-03-31 04:08:31</sys_updated_on>
<update_set display_value="" />
<update_source display_value="" />
<updated />
</sys_remote_update_set>
<sys_remote_update_set action="INSERT_OR_UPDATE">
<application display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</application>
<application_name>PagerDuty Incident Resolution Platform</application_name>
<application_scope>x_pd_integration</application_scope>
<application_version>8.1.0</application_version>
<collisions />
<commit_date />
<deleted />
<description>All customizations refit for PagerDuty plugin v8.1.0.</description>
<inserted />
<name>pd-fo-cnb-pd_upgrade_810-705395 - Batch Parent</name>
<origin_sys_id />
<parent display_value="" />
<release_date />
<remote_base_update_set display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Parent">61d0afe2c3ac221040d0becdd40131d1</remote_base_update_set>
<remote_parent_id />
<remote_sys_id>98c8aaa6c368221040d0becdd4013162</remote_sys_id>
<state>loaded</state>
<summary />
<sys_class_name>sys_remote_update_set</sys_class_name>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-03-31 04:08:31</sys_created_on>
<sys_id>61d0afe2c3ac221040d0becdd40131d1</sys_id>
<sys_mod_count>1</sys_mod_count>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-03-31 04:08:31</sys_updated_on>
<update_set display_value="" />
<update_source display_value="" />
<updated />
</sys_remote_update_set>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Global">global</application>
<category>customer</category>
<comments />
<name>x_pd_integration_pagerduty_inbound_field_rule_63aa5b6ac36c221040d0becdd4013101</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="x_pd_integration_pagerduty_inbound_field_rule"&gt;&lt;x_pd_integration_pagerduty_inbound_field_rule action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;data_type&gt;string&lt;/data_type&gt;&lt;default_value/&gt;&lt;description&gt;Set On Behalf Of&lt;/description&gt;&lt;event&gt;trigger&lt;/event&gt;&lt;incident_table_name&gt;incident&lt;/incident_table_name&gt;&lt;number&gt;IFR901002&lt;/number&gt;&lt;order&gt;100&lt;/order&gt;&lt;payload_field&gt;data.assignments[0].assignee&lt;/payload_field&gt;&lt;run_lookup_script&gt;true&lt;/run_lookup_script&gt;&lt;script&gt;&lt;![CDATA[var me = "IFR901002";
gs.debug(me + ": Populating On Behalf Of");

var assigneePDID = value;
if (assigneePDID) {
	var assigneeSN = new GlideRecord('sys_user');
	assigneeSN.get('x_pd_integration_pagerduty_id', assigneePDID.id);
	result = assigneeSN.getUniqueValue();
}]]&gt;&lt;/script&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2025-03-31 03:41:36&lt;/sys_created_on&gt;&lt;sys_id&gt;63aa5b6ac36c221040d0becdd4013101&lt;/sys_id&gt;&lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-03-31 03:42:01&lt;/sys_updated_on&gt;&lt;target_field&gt;u_on_behalf_of&lt;/target_field&gt;&lt;type&gt;set_from_payload&lt;/type&gt;&lt;/x_pd_integration_pagerduty_inbound_field_rule&gt;&lt;sys_es_latest_script action="INSERT_OR_UPDATE"&gt;&lt;id&gt;63aa5b6ac36c221040d0becdd4013101&lt;/id&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2025-03-31 03:42:01&lt;/sys_created_on&gt;&lt;sys_id&gt;91ca9feac36c221040d0becdd4013136&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-03-31 03:42:01&lt;/sys_updated_on&gt;&lt;table&gt;x_pd_integration_pagerduty_inbound_field_rule&lt;/table&gt;&lt;use_es_latest&gt;false&lt;/use_es_latest&gt;&lt;/sys_es_latest_script&gt;&lt;/record_update&gt;</payload>
<payload_hash>379798978</payload_hash>
<remote_update_set display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Child">25d0afe2c3ac221040d0becdd40131d8</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-03-31 04:08:31</sys_created_on>
<sys_id>29d0afe2c3ac221040d0becdd40131d8</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>195ea6232f50000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-03-31 04:08:31</sys_updated_on>
<table />
<target_name>Set On Behalf Of</target_name>
<type>PagerDuty Inbound Field Rule</type>
<update_domain>global</update_domain>
<update_guid>78a0e3e231ac2210210ea5a914ac8d5b</update_guid>
<update_guid_history>78a0e3e231ac2210210ea5a914ac8d5b:379798978</update_guid_history>
<update_set display_value="" />
<view />
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Global">global</application>
<category>customer</category>
<comments />
<name>x_pd_integration_pagerduty_inbound_field_rule_ed35eae2c368221040d0becdd40131aa</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="x_pd_integration_pagerduty_inbound_field_rule"&gt;&lt;x_pd_integration_pagerduty_inbound_field_rule action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;data_type&gt;string&lt;/data_type&gt;&lt;default_value/&gt;&lt;description&gt;Set On Behalf Of&lt;/description&gt;&lt;event&gt;trigger&lt;/event&gt;&lt;incident_table_name&gt;incident&lt;/incident_table_name&gt;&lt;number&gt;IFR901001&lt;/number&gt;&lt;order&gt;100&lt;/order&gt;&lt;payload_field&gt;data.assignees[0]&lt;/payload_field&gt;&lt;run_lookup_script&gt;true&lt;/run_lookup_script&gt;&lt;script&gt;&lt;![CDATA[var me = "IFR901001";
gs.debug(me + ": Populating On Behalf Of");

var assigneePDID = value;
if (assigneePDID) {
	var assigneeSN = new GlideRecord('sys_user');
	assigneeSN.get('x_pd_integration_pagerduty_id', assigneePDID.id);
	result = assigneeSN.getUniqueValue();
}]]&gt;&lt;/script&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2025-03-30 23:57:22&lt;/sys_created_on&gt;&lt;sys_id&gt;ed35eae2c368221040d0becdd40131aa&lt;/sys_id&gt;&lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-03-31 00:00:58&lt;/sys_updated_on&gt;&lt;target_field&gt;u_on_behalf_of&lt;/target_field&gt;&lt;type&gt;set_from_payload&lt;/type&gt;&lt;/x_pd_integration_pagerduty_inbound_field_rule&gt;&lt;sys_es_latest_script action="INSERT_OR_UPDATE"&gt;&lt;id&gt;ed35eae2c368221040d0becdd40131aa&lt;/id&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2025-03-30 23:57:22&lt;/sys_created_on&gt;&lt;sys_id&gt;f257ea66c328221040d0becdd40131bc&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-03-30 23:57:22&lt;/sys_updated_on&gt;&lt;table&gt;x_pd_integration_pagerduty_inbound_field_rule&lt;/table&gt;&lt;use_es_latest&gt;true&lt;/use_es_latest&gt;&lt;/sys_es_latest_script&gt;&lt;/record_update&gt;</payload>
<payload_hash>215774095</payload_hash>
<remote_update_set display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Child">25d0afe2c3ac221040d0becdd40131d8</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-03-31 04:08:31</sys_created_on>
<sys_id>e9d0afe2c3ac221040d0becdd40131d8</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>195e982ac520000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-03-31 04:08:31</sys_updated_on>
<table />
<target_name>Set On Behalf Of</target_name>
<type>PagerDuty Inbound Field Rule</type>
<update_domain>global</update_domain>
<update_guid>50c82a2aa36822102b45398df172d409</update_guid>
<update_guid_history>50c82a2aa36822102b45398df172d409:215774095</update_guid_history>
<update_set display_value="" />
<view />
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</application>
<category>customer</category>
<comments />
<name>sysevent_register_1fb37d1247101210f3ad4d05516d4329</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sysevent_register"&gt;&lt;sysevent_register action="INSERT_OR_UPDATE"&gt;&lt;caller_access/&gt;&lt;derived_priority&gt;100&lt;/derived_priority&gt;&lt;description&gt;Update Priority (Only) on PagerDuty incident - Not Urgency&lt;/description&gt;&lt;event_name&gt;x_pd_integration.update_priority_only&lt;/event_name&gt;&lt;fired_by&gt;PagerDuty business rules&lt;/fired_by&gt;&lt;priority&gt;100&lt;/priority&gt;&lt;queue/&gt;&lt;suffix&gt;update_priority_only&lt;/suffix&gt;&lt;sys_class_name&gt;sysevent_register&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2024-08-30 19:06:32&lt;/sys_created_on&gt;&lt;sys_id&gt;1fb37d1247101210f3ad4d05516d4329&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_name&gt;x_pd_integration.update_priority_only&lt;/sys_name&gt;&lt;sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="PagerDuty Incident Resolution Platform"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sysevent_register_1fb37d1247101210f3ad4d05516d4329&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2024-08-30 19:06:32&lt;/sys_updated_on&gt;&lt;table/&gt;&lt;/sysevent_register&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1598127337</payload_hash>
<remote_update_set display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Child">2dd0afe2c3ac221040d0becdd40131d1</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-03-31 04:08:31</sys_created_on>
<sys_id>21d0afe2c3ac221040d0becdd40131d2</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>195d41d331a0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-03-31 04:08:31</sys_updated_on>
<table />
<target_name>x_pd_integration.update_priority_only</target_name>
<type>Event Registration</type>
<update_domain>global</update_domain>
<update_guid>746f895dbb60a21061cfd5620b4b9e9d</update_guid>
<update_guid_history>746f895dbb60a21061cfd5620b4b9e9d:-1598127337,084f095df960a2102920d198ea76d7db:890106153</update_guid_history>
<update_set display_value="" />
<view />
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</application>
<category>customer</category>
<comments />
<name>sys_script_1da34485db8300109ec19fd2ca96199f</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;&lt;sys_script action="INSERT_OR_UPDATE"&gt;&lt;abort_action&gt;false&lt;/abort_action&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;action_delete&gt;false&lt;/action_delete&gt;&lt;action_insert&gt;false&lt;/action_insert&gt;&lt;action_query&gt;false&lt;/action_query&gt;&lt;action_update&gt;true&lt;/action_update&gt;&lt;active&gt;true&lt;/active&gt;&lt;add_message&gt;false&lt;/add_message&gt;&lt;advanced&gt;true&lt;/advanced&gt;&lt;change_fields&gt;false&lt;/change_fields&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;collection&gt;incident&lt;/collection&gt;&lt;condition&gt;gs.isLoggedIn()&lt;/condition&gt;&lt;description/&gt;&lt;execute_function&gt;false&lt;/execute_function&gt;&lt;filter_condition table="incident"&gt;x_pd_integration_incidentISNOTEMPTY^x_pd_integration_incidentNOT LIKE---^assignment_groupISNOTEMPTY^assigned_toVALCHANGES^assigned_toDYNAMIC90d1921e5f510100a9ad2572f2b477fe^state=2^assigned_to.x_pd_integration_pagerduty_idISNOTEMPTY^NQx_pd_integration_incidentISNOTEMPTY^x_pd_integration_incidentNOT LIKE---^stateVALCHANGES^stateCHANGESFROM1^ORstateCHANGESFROM3^ORstateCHANGESFROM^stateCHANGESTO2^assigned_toDYNAMIC90d1921e5f510100a9ad2572f2b477fe^EQ&lt;item endquery="false" field="x_pd_integration_incident" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/&gt;&lt;item endquery="false" field="x_pd_integration_incident" goto="false" newquery="false" operator="NOT LIKE" or="false" value="---"/&gt;&lt;item endquery="false" field="assignment_group" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/&gt;&lt;item endquery="false" field="assigned_to" goto="false" newquery="false" operator="VALCHANGES" or="false" value=""/&gt;&lt;item endquery="false" field="assigned_to" goto="false" newquery="false" operator="DYNAMIC" or="false" value="90d1921e5f510100a9ad2572f2b477fe"/&gt;&lt;item display_value="In Progress" endquery="false" field="state" goto="false" newquery="false" operator="=" or="false" value="2"/&gt;&lt;item endquery="false" field="assigned_to.x_pd_integration_pagerduty_id" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/&gt;&lt;item endquery="false" field="x_pd_integration_incident" goto="false" newquery="true" operator="ISNOTEMPTY" or="false" value=""/&gt;&lt;item endquery="false" field="x_pd_integration_incident" goto="false" newquery="false" operator="NOT LIKE" or="false" value="---"/&gt;&lt;item endquery="false" field="state" goto="false" newquery="false" operator="VALCHANGES" or="false" value=""/&gt;&lt;item display_value="New" endquery="false" field="state" goto="false" newquery="false" operator="CHANGESFROM" or="false" value="1"/&gt;&lt;item display_value="On Hold" endquery="false" field="state" goto="false" newquery="false" operator="CHANGESFROM" or="true" value="3"/&gt;&lt;item endquery="false" field="state" goto="false" newquery="false" operator="CHANGESFROM" or="true" value=""/&gt;&lt;item display_value="In Progress" endquery="false" field="state" goto="false" newquery="false" operator="CHANGESTO" or="false" value="2"/&gt;&lt;item endquery="false" field="assigned_to" goto="false" newquery="false" operator="DYNAMIC" or="false" value="90d1921e5f510100a9ad2572f2b477fe"/&gt;&lt;item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/&gt;&lt;/filter_condition&gt;&lt;is_rest&gt;false&lt;/is_rest&gt;&lt;message/&gt;&lt;name&gt;PD Ack incident on self-assignment&lt;/name&gt;&lt;order&gt;100&lt;/order&gt;&lt;priority&gt;100&lt;/priority&gt;&lt;rest_method/&gt;&lt;rest_method_text/&gt;&lt;rest_service/&gt;&lt;rest_service_text/&gt;&lt;rest_variables/&gt;&lt;role_conditions/&gt;&lt;script&gt;&lt;![CDATA[(function executeRule (current, previous) {

  if (current.priority.changes()) {
    gs.debug('{0}. Prevent rule from execution in favour of "PD Update Priority and Assignment" business rule that handle the case when Assignee and Priority are changing simultaneously.', current.getDisplayValue());
    return;
  }

  var eventName = 'x_pd_integration.ack_on_self_assignment';
  if (x_pd_integration.TaskEntityHelper.isPdWebhook()) {
    gs.debug('Bypassing firing event {0} for {1} because source is PagerDuty', eventName, current.getDisplayValue());
    return;
  }

  var assignedUserSysId = current.getValue('assigned_to');
  gs.debug('Firing event {0} for {1}', eventName, current.getDisplayValue());
  gs.eventQueue(eventName, current, assignedUserSysId);
})(current, previous);
]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;PagerDuty_v8.1&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2020-02-16 16:58:23&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;1da34485db8300109ec19fd2ca96199f&lt;/sys_id&gt;&lt;sys_mod_count&gt;48&lt;/sys_mod_count&gt;&lt;sys_name&gt;PD Ack incident on self-assignment&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="PagerDuty Incident Resolution Platform"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_1da34485db8300109ec19fd2ca96199f&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-02-18 18:17:47&lt;/sys_updated_on&gt;&lt;template/&gt;&lt;when&gt;after&lt;/when&gt;&lt;/sys_script&gt;&lt;sys_translated_text action="delete_multiple" query="documentkey=1da34485db8300109ec19fd2ca96199f"/&gt;&lt;sys_es_latest_script action="INSERT_OR_UPDATE"&gt;&lt;id&gt;1da34485db8300109ec19fd2ca96199f&lt;/id&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2025-02-18 18:17:46&lt;/sys_created_on&gt;&lt;sys_id&gt;120a9fa1c3bb121040d0becdd4013135&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-02-18 18:17:46&lt;/sys_updated_on&gt;&lt;table&gt;sys_script&lt;/table&gt;&lt;use_es_latest&gt;false&lt;/use_es_latest&gt;&lt;/sys_es_latest_script&gt;&lt;/record_update&gt;</payload>
<payload_hash>-131254156</payload_hash>
<remote_update_set display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Child">2dd0afe2c3ac221040d0becdd40131d1</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-03-31 04:08:31</sys_created_on>
<sys_id>21d0afe2c3ac221040d0becdd40131d4</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1951a47cae60000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-03-31 04:08:31</sys_updated_on>
<table>incident</table>
<target_name>PD Ack incident on self-assignment</target_name>
<type>Business Rule</type>
<update_domain>global</update_domain>
<update_guid>d20ad7ad897b1210b052a6a309fbcf95</update_guid>
<update_guid_history>d20ad7ad897b1210b052a6a309fbcf95:-131254156,c7ef4ea5f267b55045bcdc834d11fe23:-1169995153,6d36052cd6b551101d53097b2dc0ee1b:-1006192417,633589a443b55110969ebb3a42859cbc:1382012127,1b91700632083010ad12a576404866d1:1793593984,5ce6616cb70470103effa0f1c1b6ccb5:382142695,2f76616c3104701013032824636df47b:-478108095,f0362d2c3c0470104e8e24f7b38343ed:856057612,1aa34fbc1b291010d55826031e78c68c:1470756812,1aa34fbc1b291010d55826031e78c68c:1470756812,c3817961050700106389264f45716bcf:800083270,b305a12150c300108b41d69f729674f9:603194320,9f0291e1d48300104b8e3bab07d756bf:-1708449879,f05151a13d830010b7f03fd26a8345fe:-1521571220,bcc09921d7830010b29703166606762d:1139463948,856f0dad3d4300100d6300dba99a1188:-1521571220,67b781a5a2430010f2509cd01c266fcd:1139463948,31e58de1a7430010b798fd15dff65a07:-1764495218,b91585e12d4300108f6c571146656afe:188784210,87448521854300100c00f4010291f649:1907498510,2be28161f7430010df547bfd4ddfc5f3:-753536658,3d310dad520300101798f8306b1ea023:-173529579,a8b005adba030010af0f20bded8e830d:-753536658,bdbc70698e030010464ddc7dfada84e1:251545189,61ab7ce5ef030010201781d58862a393:1060031404,5d063ca1d9030010297ff2e472662c4f:847543309,7c25c59973470010ade581c6d1d4f303:1261858500,6554cd19af470010246d5f1ee5cb6f4e:-20119407,df344199a1470010b2c27d8b2cea0d81:461508235,b9524119b54700100e13d91981e48f22:1430310530,515f381531470010539d686c8a4e204d:1261858500,bfdd3491284700101cf17d45c679013c:538489741,e9dcb051aa47001083fc64b01f19de2e:-1128530750,274770d9780700108ee97b0ca617d22d:506126739,3d337055c00700109c9c31bd8c88a199:847035612,b8407091990700108943a93791d61b0a:-1413303207,f16fe4919307001023d72b9383341109:935117403,916260956bc3001086ae5bedfe3c3133:107113229,481bcc9d6d430010d58f597a3804713c:-1117803898,ef0a889d4d4300109ac27e71a60f9d84:1658990111,dc59cc5d0e430010a17bc12c95197e7c:-731220798,96070cd9a043001065afb84c3d50735f:-1255018613,aba548991a430010f7d78fa9ad1976cd:-712799116,bcf0d80553c3001060051bc63db99bdc:-1984041989,3480100502c30010b8669b8600aecc1d:-2138461614,7ebf8841ffc30010857862bdf4a5b958:-1145708297,07ee4841b5c30010609ab7ba525c9095:-1379427467,cd0d888d2c8300106577f2fa3a3acf60:2070859244,1a7c488d0283001060efa57bdfe30e19:-1379427467,2a04884556830010642f00bc2dd6a4c6:-530585479</update_guid_history>
<update_set display_value="" />
<view />
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</application>
<category>customer</category>
<comments />
<name>sys_script_include_3f6dc9d5db65130070c5771c8c9619c2</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;public&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_pd_integration.TaskEntityHelper&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description&gt;Class helper for varius Task based entities&lt;/description&gt;&lt;mobile_callable&gt;false&lt;/mobile_callable&gt;&lt;name&gt;TaskEntityHelper&lt;/name&gt;&lt;sandbox_callable&gt;false&lt;/sandbox_callable&gt;&lt;script&gt;&lt;![CDATA[/*** Changes made to this script are not supported by PagerDuty ***/
var TaskEntityHelper = Class.create();

TaskEntityHelper.isTaskHasResolvedState = function (taskType, state) {
  taskType = taskType.toString();
  state = parseInt(state);
  var typesStatesMap = {
    incident: [6, 7, 8],
    sn_si_incident: [3, 7, 100],
    change_request: [0, 3, 4] // review closed canceled
  };
  return typesStatesMap[taskType].indexOf(state) !== -1;
};

TaskEntityHelper.resolvedStateValue = function (taskType) {
  taskType = taskType.toString();
  var resolveValues = {
    incident: gs.getProperty('x_pd_integration.resolved_state_value', 6), // resolved
    sn_si_incident: gs.getProperty('x_pd_integration.sn_si_resolved_state_value', 100), // review
    change_request: 0 // review
  };
  return resolveValues[taskType];
};

TaskEntityHelper.triggerStateValue = function (taskType) {
  taskType = taskType.toString();
  var triggerValues = {
    // incident: 1, // new
	// Custom state created
	incident: -3, //assigned
    sn_si_incident: 10, // draft
    change_request: -5 // new
  };
  return triggerValues[taskType];
};

// Custom section to handle acknowledge state
TaskEntityHelper.acknowledgedStateValue = function (taskType) {
	taskType = taskType.toString();
	var ackValues = {
		incident: 2, //in progress
		sn_si_incident: 16, //analysis
		change_request: -4 //assess
	};
	return ackValues[taskType];
};

TaskEntityHelper.getPdId = function (task, taskType) {
  taskType = taskType ? taskType.toString() : task.sys_class_name.toString();
  if (taskType === 'incident') {
    return task.x_pd_integration_incident;
  }
  return task.x_pd_integration_incident_id;

};

TaskEntityHelper.setPdId = function (task, value, taskType) {
  taskType = taskType ? taskType.toString() : task.sys_class_name.toString();
  gs.debug('TaskEntityHelper.setPdId {0} {1} value: {2}', task.number, taskType, value);
  if (taskType === 'incident') {
    task.x_pd_integration_incident = value;
  } else {
    task.x_pd_integration_incident_id = value;
  }
};

TaskEntityHelper.getPdIdField = function (taskType) {
  taskType = taskType.toString();
  if (taskType === 'incident') {
    return 'x_pd_integration_incident';
  }
  return 'x_pd_integration_incident_id';

};

TaskEntityHelper.setPriority = function (task, priorityObj, taskType) {
  taskType = taskType ? taskType.toString() : task.sys_class_name.toString();

  if (taskType === 'incident') {
    task.impact = priorityObj.impact;
    task.urgency = priorityObj.urgency;
  } else {
    task.priority = priorityObj.priority;
  }
  var user = gs.getUserName();
  task.work_notes = x_pd_integration.WorkNotesHelper.build('Priority set to ' + priorityObj.priority_display + ' from PagerDuty by ' + user);
};

TaskEntityHelper.isPdWebhook = function () {
  var integrationUser = gs.getProperty('x_pd_integration.sn_auth_user');
  var currentUser = gs.getUserName();
  return currentUser === integrationUser;
};

TaskEntityHelper.insertDefaultIncTypeReferenceIfRefNotFound = function (task) {
  gs.debug('TaskEntityHelper.insertDefaultIncTypeReferenceIfRefNotFound {0}', task.number);

  var gr = new GlideRecord('x_pd_integration_pagerduty_incident_reference');
  if (!gr.get('servicenow_incident', task.sys_id)) {
    // get default incident type
    var grIncType = new GlideRecord('x_pd_integration_pagerduty_incident_types');
    grIncType.addQuery('name', 'incident_default');
    grIncType.orderByDesc('sys_created_on');
    grIncType.setLimit(1);
    grIncType.query();
    // insert reference
    if (grIncType.next()) {
      x_pd_integration.TaskEntityHelper.insertIncidentTypeReference(task, grIncType.getValue('sys_id'), true);
    }
  }
};

TaskEntityHelper.insertOrUpdateIncidentTypeReference = function (task, incidentTypeSysId, runBusinessRulesOnInsert) {
  gs.debug('TaskEntityHelper.insertOrUpdateIncidentTypeReference {0}, {1}', task.number, incidentTypeSysId);

  var gr = new GlideRecord('x_pd_integration_pagerduty_incident_reference');
  if (gr.get('servicenow_incident', task.sys_id)) {
    gr.incident_type = incidentTypeSysId;
    gr.update();
  } else {
    x_pd_integration.TaskEntityHelper.insertIncidentTypeReference(task, incidentTypeSysId, runBusinessRulesOnInsert);
  }
};

TaskEntityHelper.getIncidentTypeFromReference = function (task, fallbackToDefault) {
  gs.debug('TaskEntityHelper.getIncidentTypeFromReference {0}, {1}', task.number, fallbackToDefault);

  var gr = new GlideRecord('x_pd_integration_pagerduty_incident_reference');
  if (gr.get('servicenow_incident', task.sys_id) &amp;&amp; !gs.nil(gr.incident_type)) {
    return {
      sysId: String(gr.incident_type),
      id: String(gr.incident_type.pagerduty_id),
      name: String(gr.incident_type.name)
    };
  }

  gs.debug('No incident type found for task/incident {0}, either relation does not exist or is invalid', task.number);

  if (fallbackToDefault === true) {
    // get and return the default incident type
    var grIncType = new GlideRecord('x_pd_integration_pagerduty_incident_types');
    grIncType.addQuery('name', 'incident_default');
    grIncType.orderByDesc('sys_created_on');
    grIncType.setLimit(1);
    grIncType.query();
    if (grIncType.next()) {
      return {
        sysId: grIncType.getValue('sys_id'),
        id: grIncType.getValue('pagerduty_id'),
        name: grIncType.getValue('name')
      };
    }
  }

  return {
    sysId: null,
    id: null,
    name: null
  };
};

TaskEntityHelper.insertIncidentTypeReference = function (task, incidentTypeSysId, runBusinessRulesOnInsert) {
  gs.debug('TaskEntityHelper.insertIncidentTypeReference {0}, {1}', task.number, incidentTypeSysId);

  var gr = new GlideRecord('x_pd_integration_pagerduty_incident_reference');
  gr.initialize();
  if (runBusinessRulesOnInsert === false) {
    gr.setWorkflow(false);
  }
  gr.servicenow_incident = task.sys_id;
  gr.incident_type = incidentTypeSysId;
  gr.insert();
};

TaskEntityHelper.deleteIncidentTypeReference = function (task) {
  var gr = new GlideRecord('x_pd_integration_pagerduty_incident_reference');
  if (gr.get('servicenow_incident', task.sys_id)) {
    gr.deleteRecord();
  }
};

TaskEntityHelper.prototype = {
  initialize: function (task, taskType) {
    this.taskType = taskType || task.sys_class_name;
    this.task = task;
  },

  isTaskHasResolvedState: function (state) {
    return TaskEntityHelper.isTaskHasResolvedState(this.taskType, state);
  },

  resolvedStateValue: function () {
    return TaskEntityHelper.resolvedStateValue(this.taskType);
  },

  triggerStateValue: function () {
    return TaskEntityHelper.triggerStateValue(this.taskType);
  },

  acknowledgedStateValue: function () {
	return TaskEntityHelper.acknowledgedStateValue(this.taskType);
  },

  getPdId: function () {
    return TaskEntityHelper.getPdId(this.task, this.taskType);
  },

  setPdId: function (value) {
    return TaskEntityHelper.setPdId(this.task, value, this.taskType);
  },

  getPdIdField: function () {
    return TaskEntityHelper.getPdIdField(this.taskType);
  },

  setPriority: function (priorityObj) {
    return TaskEntityHelper.setPriority(this.task, priorityObj, this.taskType);
  }
};
]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;PagerDuty_v8.1&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-04-17 14:50:20&lt;/sys_created_on&gt;&lt;sys_id&gt;3f6dc9d5db65130070c5771c8c9619c2&lt;/sys_id&gt;&lt;sys_mod_count&gt;45&lt;/sys_mod_count&gt;&lt;sys_name&gt;TaskEntityHelper&lt;/sys_name&gt;&lt;sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="PagerDuty Incident Resolution Platform"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_3f6dc9d5db65130070c5771c8c9619c2&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-03-11 16:15:24&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;sys_es_latest_script action="INSERT_OR_UPDATE"&gt;&lt;id&gt;3f6dc9d5db65130070c5771c8c9619c2&lt;/id&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2025-03-11 16:15:23&lt;/sys_created_on&gt;&lt;sys_id&gt;4a67cbd0c350221040d0becdd401314a&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-03-11 16:15:23&lt;/sys_updated_on&gt;&lt;table&gt;sys_script_include&lt;/table&gt;&lt;use_es_latest&gt;false&lt;/use_es_latest&gt;&lt;/sys_es_latest_script&gt;&lt;/record_update&gt;</payload>
<payload_hash>1430170753</payload_hash>
<remote_update_set display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Child">2dd0afe2c3ac221040d0becdd40131d1</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-03-31 04:08:31</sys_created_on>
<sys_id>21d0afe2c3ac221040d0becdd40131d7</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>19585fd4b350000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-03-31 04:08:31</sys_updated_on>
<table />
<target_name>TaskEntityHelper</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>1267c398ed9022104504d55b313ed491</update_guid>
<update_guid_history>1267c398ed9022104504d55b313ed491:1430170753,fc94accc73136300476c43abbd04ed74:1106614140,fc94accc73136300476c43abbd04ed74:1106614140,fc94accc73136300476c43abbd04ed74:1106614140,fc94accc73136300476c43abbd04ed74:1106614140</update_guid_history>
<update_set display_value="" />
<view />
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</application>
<category>customer</category>
<comments />
<name>sysevent_script_action_f0b14f33c379391086432355df01315b</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sysevent_script_action"&gt;&lt;sysevent_script_action action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;condition_script/&gt;&lt;description/&gt;&lt;event_name&gt;x_pd_integration.update_on_ci_change&lt;/event_name&gt;&lt;name&gt;PD Update Incident on CI change&lt;/name&gt;&lt;order&gt;100&lt;/order&gt;&lt;script&gt;&lt;![CDATA[/*** Changes made to this script are not supported by PagerDuty  ***/
gs.debug("PagerDuty 'x_pd_integration.update_on_ci_change' Incident event fired from {0}", current.getDisplayValue());
var pd = new x_pd_integration.PagerDutyCustom();
pd.updateOnCIChange(current, event.parm1, event.parm2);
]]&gt;&lt;/script&gt;&lt;synchronous&gt;false&lt;/synchronous&gt;&lt;sys_class_name&gt;sysevent_script_action&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2023-10-17 13:49:55&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;f0b14f33c379391086432355df01315b&lt;/sys_id&gt;&lt;sys_mod_count&gt;5&lt;/sys_mod_count&gt;&lt;sys_name&gt;PD Update Incident on CI change&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="PagerDuty Incident Resolution Platform"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sysevent_script_action_f0b14f33c379391086432355df01315b&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-02-18 19:17:48&lt;/sys_updated_on&gt;&lt;/sysevent_script_action&gt;&lt;sys_es_latest_script action="INSERT_OR_UPDATE"&gt;&lt;id&gt;f0b14f33c379391086432355df01315b&lt;/id&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2025-02-18 18:49:05&lt;/sys_created_on&gt;&lt;sys_id&gt;74316b6dc3bb121040d0becdd4013104&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-02-18 18:49:05&lt;/sys_updated_on&gt;&lt;table&gt;sysevent_script_action&lt;/table&gt;&lt;use_es_latest&gt;false&lt;/use_es_latest&gt;&lt;/sys_es_latest_script&gt;&lt;/record_update&gt;</payload>
<payload_hash>1336835537</payload_hash>
<remote_update_set display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Child">2dd0afe2c3ac221040d0becdd40131d1</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-03-31 04:08:31</sys_created_on>
<sys_id>25d0afe2c3ac221040d0becdd40131d3</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1951a7ebe930000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-03-31 04:08:31</sys_updated_on>
<table>x_pd_integration.update_on_ci_change</table>
<target_name>PD Update Incident on CI change</target_name>
<type>Script Action</type>
<update_domain>global</update_domain>
<update_guid>69c7e7a5f0fb121073b30f76842b2f6e</update_guid>
<update_guid_history>69c7e7a5f0fb121073b30f76842b2f6e:1336835537,27b7e3a57dfb121022c952361edb0d3a:779050721,d9b7eb656cfb1210a0e09b7f9e229e73:1369695345,2bb62721b9fb12104da616a5c40eab33:889788081,c531ab6d70bb12109e4626d5510b5608:-500924635,e321afe98cbb1210e257c7aaa634483b:-1951375938</update_guid_history>
<update_set display_value="" />
<view />
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</application>
<category>customer</category>
<comments />
<name>sys_script_f4e3917adb92130070c5771c8c96192e</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;&lt;sys_script action="INSERT_OR_UPDATE"&gt;&lt;abort_action&gt;false&lt;/abort_action&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;action_delete&gt;false&lt;/action_delete&gt;&lt;action_insert&gt;false&lt;/action_insert&gt;&lt;action_query&gt;false&lt;/action_query&gt;&lt;action_update&gt;true&lt;/action_update&gt;&lt;active&gt;true&lt;/active&gt;&lt;add_message&gt;false&lt;/add_message&gt;&lt;advanced&gt;true&lt;/advanced&gt;&lt;change_fields&gt;false&lt;/change_fields&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;collection&gt;incident&lt;/collection&gt;&lt;condition/&gt;&lt;description/&gt;&lt;execute_function&gt;false&lt;/execute_function&gt;&lt;filter_condition table="incident"&gt;stateCHANGESFROM6^ORstateCHANGESFROM7^ORstateCHANGESFROM8^stateCHANGESTO1^ORstateCHANGESTO2^ORstateCHANGESTO3^ORstateCHANGESTO-3^x_pd_integration_incidentISNOTEMPTY^x_pd_integration_incidentNOT LIKE---^EQ&lt;item display_value="Resolved" endquery="false" field="state" goto="false" newquery="false" operator="CHANGESFROM" or="false" value="6"/&gt;&lt;item display_value="Closed" endquery="false" field="state" goto="false" newquery="false" operator="CHANGESFROM" or="true" value="7"/&gt;&lt;item display_value="Canceled" endquery="false" field="state" goto="false" newquery="false" operator="CHANGESFROM" or="true" value="8"/&gt;&lt;item display_value="New" endquery="false" field="state" goto="false" newquery="false" operator="CHANGESTO" or="false" value="1"/&gt;&lt;item display_value="In Progress" endquery="false" field="state" goto="false" newquery="false" operator="CHANGESTO" or="true" value="2"/&gt;&lt;item display_value="On Hold" endquery="false" field="state" goto="false" newquery="false" operator="CHANGESTO" or="true" value="3"/&gt;&lt;item display_value="Assigned" endquery="false" field="state" goto="false" newquery="false" operator="CHANGESTO" or="true" value="-3"/&gt;&lt;item endquery="false" field="x_pd_integration_incident" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/&gt;&lt;item endquery="false" field="x_pd_integration_incident" goto="false" newquery="false" operator="NOT LIKE" or="false" value="---"/&gt;&lt;item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/&gt;&lt;/filter_condition&gt;&lt;is_rest&gt;false&lt;/is_rest&gt;&lt;message/&gt;&lt;name&gt;PD re-open incident&lt;/name&gt;&lt;order&gt;100&lt;/order&gt;&lt;priority&gt;100&lt;/priority&gt;&lt;rest_method/&gt;&lt;rest_method_text/&gt;&lt;rest_service/&gt;&lt;rest_service_text/&gt;&lt;rest_variables/&gt;&lt;role_conditions/&gt;&lt;script&gt;&lt;![CDATA[(function executeRule(current, previous /*null when async*/) {

})(current, previous);]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;PagerDuty_v8.1&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-05-29 14:04:12&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;f4e3917adb92130070c5771c8c96192e&lt;/sys_id&gt;&lt;sys_mod_count&gt;9&lt;/sys_mod_count&gt;&lt;sys_name&gt;PD re-open incident&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="PagerDuty Incident Resolution Platform"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_f4e3917adb92130070c5771c8c96192e&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-02-18 18:43:54&lt;/sys_updated_on&gt;&lt;template&gt;x_pd_integration_incident=---reopened---^EQ&lt;/template&gt;&lt;when&gt;before&lt;/when&gt;&lt;/sys_script&gt;&lt;sys_translated_text action="delete_multiple" query="documentkey=f4e3917adb92130070c5771c8c96192e"/&gt;&lt;sys_es_latest_script action="INSERT_OR_UPDATE"&gt;&lt;id&gt;f4e3917adb92130070c5771c8c96192e&lt;/id&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2025-02-18 18:43:54&lt;/sys_created_on&gt;&lt;sys_id&gt;0500a7a9c3bb121040d0becdd4013147&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-02-18 18:43:54&lt;/sys_updated_on&gt;&lt;table&gt;sys_script&lt;/table&gt;&lt;use_es_latest&gt;false&lt;/use_es_latest&gt;&lt;/sys_es_latest_script&gt;&lt;/record_update&gt;</payload>
<payload_hash>866432198</payload_hash>
<remote_update_set display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Child">2dd0afe2c3ac221040d0becdd40131d1</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-03-31 04:08:31</sys_created_on>
<sys_id>25d0afe2c3ac221040d0becdd40131d6</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1951a5fb61b0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-03-31 04:08:31</sys_updated_on>
<table>incident</table>
<target_name>PD re-open incident</target_name>
<type>Business Rule</type>
<update_domain>global</update_domain>
<update_guid>8100efe9a4bb12108d812e5eedb8f0aa</update_guid>
<update_guid_history>8100efe9a4bb12108d812e5eedb8f0aa:866432198,3094acccd413630052c464b17871235d:1896171490,29bc739e6d5a1010a60918b58cb3c8c7:-1323489958,7d96b39a985a101003b8c0f0cb24cd2f:1936508902,3094acccd413630052c464b17871235d:1896171490,3094acccd413630052c464b17871235d:1896171490,3094acccd413630052c464b17871235d:1896171490</update_guid_history>
<update_set display_value="" />
<view />
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</application>
<category>customer</category>
<comments />
<name>sysevent_register_2d718b33c379391086432355df0131a7</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sysevent_register"&gt;&lt;sysevent_register action="INSERT_OR_UPDATE"&gt;&lt;caller_access/&gt;&lt;derived_priority&gt;100&lt;/derived_priority&gt;&lt;description&gt;PagerDuty Update on CI change&lt;/description&gt;&lt;event_name&gt;x_pd_integration.update_on_ci_change&lt;/event_name&gt;&lt;fired_by&gt;Business rule&lt;/fired_by&gt;&lt;priority&gt;100&lt;/priority&gt;&lt;queue/&gt;&lt;suffix&gt;update_on_ci_change&lt;/suffix&gt;&lt;sys_class_name&gt;sysevent_register&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2023-10-17 13:48:52&lt;/sys_created_on&gt;&lt;sys_id&gt;2d718b33c379391086432355df0131a7&lt;/sys_id&gt;&lt;sys_mod_count&gt;3&lt;/sys_mod_count&gt;&lt;sys_name&gt;x_pd_integration.update_on_ci_change&lt;/sys_name&gt;&lt;sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="PagerDuty Incident Resolution Platform"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sysevent_register_2d718b33c379391086432355df0131a7&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-02-18 19:16:59&lt;/sys_updated_on&gt;&lt;table/&gt;&lt;/sysevent_register&gt;&lt;/record_update&gt;</payload>
<payload_hash>184805147</payload_hash>
<remote_update_set display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Child">2dd0afe2c3ac221040d0becdd40131d1</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-03-31 04:08:31</sys_created_on>
<sys_id>29d0afe2c3ac221040d0becdd40131d2</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1951a7dff4b0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-03-31 04:08:31</sys_updated_on>
<table />
<target_name>x_pd_integration.update_on_ci_change</target_name>
<type>Event Registration</type>
<update_domain>global</update_domain>
<update_guid>2d972b652ffb121035e04d338b6d7155</update_guid>
<update_guid_history>2d972b652ffb121035e04d338b6d7155:184805147,da87e7659afb12104ade4ea91534dc2a:-2067202665,9b11a76d31bb121017a258ebd2a474b4:-785747225,c511a76d76bb12107555737c07684faf:-1903253085</update_guid_history>
<update_set display_value="" />
<view />
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</application>
<category>customer</category>
<comments />
<name>sys_script_client_8bb0b1182f2b001068ca56e62799b67d</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script_client"&gt;&lt;sys_script_client action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;applies_extended&gt;false&lt;/applies_extended&gt;&lt;condition/&gt;&lt;description/&gt;&lt;field&gt;active&lt;/field&gt;&lt;global&gt;true&lt;/global&gt;&lt;isolate_script&gt;true&lt;/isolate_script&gt;&lt;messages/&gt;&lt;name&gt;Autorefresh PagerDuty Status Updates&lt;/name&gt;&lt;order/&gt;&lt;script&gt;&lt;![CDATA[function onLoad(control, oldValue, newValue, isLoading, isTemplate) {
  if (!g_user.hasRoleFromList('x_pd_integration.admin,x_pd_integration.incident_response,x_pd_integration.services_provisioning')) {
    return;
  }

  if (isLoading || newValue === '') {
    return;
  }

  var initialActivitiesCount = jQuery('ul.activities-form li').length;

  var onActivitiesChange = function() {
  var currentActivitiesCount = jQuery('ul.activities-form li').length;
  if (currentActivitiesCount != initialActivitiesCount) {
    refreshList();
    initialActivitiesCount = currentActivitiesCount;
  }
  };
  setInterval(onActivitiesChange, 2000);
}

function refreshList() {
  var listName = 'PagerDuty Status Updates';
  try {
    var elementLookup = $$('div.tabs2_list');
    for (i = 0; i != elementLookup.length; i++) {
      if (elementLookup[i].innerHTML.indexOf(listName) != -1) {
        var listHTML = elementLookup[i].id.split('_');
        var listID = listHTML[0];
        GlideList2.get(listID).refresh('');
      }
    }
  } catch (err) {
    jslog('Error refreshing list "' + listName + '": ' + err.message);
  }
}
]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_client&lt;/sys_class_name&gt;&lt;sys_created_by&gt;PagerDuty_v8.1&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2020-03-10 13:29:52&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;8bb0b1182f2b001068ca56e62799b67d&lt;/sys_id&gt;&lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;&lt;sys_name&gt;Autorefresh PagerDuty Status Updates&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="PagerDuty Incident Resolution Platform"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_client_8bb0b1182f2b001068ca56e62799b67d&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-03-11 14:25:29&lt;/sys_updated_on&gt;&lt;table&gt;incident&lt;/table&gt;&lt;type&gt;onLoad&lt;/type&gt;&lt;ui_type&gt;0&lt;/ui_type&gt;&lt;view/&gt;&lt;/sys_script_client&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1502031526</payload_hash>
<remote_update_set display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Child">2dd0afe2c3ac221040d0becdd40131d1</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-03-31 04:08:31</sys_created_on>
<sys_id>29d0afe2c3ac221040d0becdd40131d5</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1958598a9a90000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-03-31 04:08:31</sys_updated_on>
<table>incident</table>
<target_name>Autorefresh PagerDuty Status Updates</target_name>
<type>Client Script</type>
<update_domain>global</update_domain>
<update_guid>d04ea6589d1022107ad9c5eebe70d536</update_guid>
<update_guid_history>d04ea6589d1022107ad9c5eebe70d536:-1502031526,dce0f198eb2b0010b137a46f367f6de3:-187789621,dce0f198eb2b0010b137a46f367f6de3:-187789621</update_guid_history>
<update_set display_value="" />
<view />
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</application>
<category>customer</category>
<comments />
<name>sys_script_916cd2454fdf8e00dd657bb28110c78d</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;&lt;sys_script action="INSERT_OR_UPDATE"&gt;&lt;abort_action&gt;false&lt;/abort_action&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;action_delete&gt;false&lt;/action_delete&gt;&lt;action_insert&gt;true&lt;/action_insert&gt;&lt;action_query&gt;false&lt;/action_query&gt;&lt;action_update&gt;true&lt;/action_update&gt;&lt;active&gt;true&lt;/active&gt;&lt;add_message&gt;false&lt;/add_message&gt;&lt;advanced&gt;true&lt;/advanced&gt;&lt;change_fields&gt;false&lt;/change_fields&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;collection&gt;incident&lt;/collection&gt;&lt;condition&gt;gs.isLoggedIn()&lt;/condition&gt;&lt;description/&gt;&lt;execute_function&gt;true&lt;/execute_function&gt;&lt;filter_condition table="incident"&gt;x_pd_integration_incidentISNOTEMPTY^x_pd_integration_incidentNOT LIKE---^stateVALCHANGES^stateCHANGESFROM1^ORstateCHANGESFROM2^ORstateCHANGESFROM3^ORstateCHANGESFROM-3^stateCHANGESTO6^ORstateCHANGESTO7^ORstateCHANGESTO8^EQ&lt;item endquery="false" field="x_pd_integration_incident" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/&gt;&lt;item endquery="false" field="x_pd_integration_incident" goto="false" newquery="false" operator="NOT LIKE" or="false" value="---"/&gt;&lt;item endquery="false" field="state" goto="false" newquery="false" operator="VALCHANGES" or="false" value=""/&gt;&lt;item display_value="New" endquery="false" field="state" goto="false" newquery="false" operator="CHANGESFROM" or="false" value="1"/&gt;&lt;item display_value="In Progress" endquery="false" field="state" goto="false" newquery="false" operator="CHANGESFROM" or="true" value="2"/&gt;&lt;item display_value="On Hold" endquery="false" field="state" goto="false" newquery="false" operator="CHANGESFROM" or="true" value="3"/&gt;&lt;item display_value="Assigned" endquery="false" field="state" goto="false" newquery="false" operator="CHANGESFROM" or="true" value="-3"/&gt;&lt;item display_value="Resolved" endquery="false" field="state" goto="false" newquery="false" operator="CHANGESTO" or="false" value="6"/&gt;&lt;item display_value="Closed" endquery="false" field="state" goto="false" newquery="false" operator="CHANGESTO" or="true" value="7"/&gt;&lt;item display_value="Canceled" endquery="false" field="state" goto="false" newquery="false" operator="CHANGESTO" or="true" value="8"/&gt;&lt;item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/&gt;&lt;/filter_condition&gt;&lt;is_rest&gt;false&lt;/is_rest&gt;&lt;message/&gt;&lt;name&gt;PD Resolve PagerDuty Incident&lt;/name&gt;&lt;order&gt;100&lt;/order&gt;&lt;priority&gt;100&lt;/priority&gt;&lt;rest_method/&gt;&lt;rest_method_text/&gt;&lt;rest_service/&gt;&lt;rest_service_text/&gt;&lt;rest_variables/&gt;&lt;role_conditions/&gt;&lt;script&gt;&lt;![CDATA[(function onAsync (current, previous) {

  if (x_pd_integration.TaskEntityHelper.isPdWebhook()) {
    gs.debug('Cancelling action, since incident has been resolved from PagerDuty');
    return;
  }

  var currentUserSysId = gs.getUser().getID();
  var pd = new x_pd_integration.PagerDuty();
  pd.resolveIncident(current, currentUserSysId);

  var createdBy = gs.getUserName();
  if (createdBy !== 'system') {
    var resolutionNote = current.close_notes;
    if (resolutionNote !== '') {
      var note = '(from ServiceNow:' + createdBy + ') ' + resolutionNote;
      pd.postIncidentNote(x_pd_integration.TaskEntityHelper.getPdId(current), note, createdBy, false, current.getUniqueValue());
    }
  }

})(current, previous);
]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;PagerDuty_v8.1&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2015-10-22 20:50:31&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;916cd2454fdf8e00dd657bb28110c78d&lt;/sys_id&gt;&lt;sys_mod_count&gt;46&lt;/sys_mod_count&gt;&lt;sys_name&gt;PD Resolve PagerDuty Incident&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="PagerDuty Incident Resolution Platform"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_916cd2454fdf8e00dd657bb28110c78d&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-03-31 00:37:30&lt;/sys_updated_on&gt;&lt;template/&gt;&lt;when&gt;async_always&lt;/when&gt;&lt;/sys_script&gt;&lt;sys_translated_text action="delete_multiple" query="documentkey=916cd2454fdf8e00dd657bb28110c78d"/&gt;&lt;sys_es_latest_script action="INSERT_OR_UPDATE"&gt;&lt;id&gt;916cd2454fdf8e00dd657bb28110c78d&lt;/id&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2025-02-18 18:32:47&lt;/sys_created_on&gt;&lt;sys_id&gt;827d1fe5c3bb121040d0becdd40131b5&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-02-18 18:32:47&lt;/sys_updated_on&gt;&lt;table&gt;sys_script&lt;/table&gt;&lt;use_es_latest&gt;false&lt;/use_es_latest&gt;&lt;/sys_es_latest_script&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1725928707</payload_hash>
<remote_update_set display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Child">2dd0afe2c3ac221040d0becdd40131d1</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-03-31 04:08:31</sys_created_on>
<sys_id>2dd0afe2c3ac221040d0becdd40131d4</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>195e9a1d0e00000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-03-31 04:08:31</sys_updated_on>
<table>incident</table>
<target_name>PD Resolve PagerDuty Incident</target_name>
<type>Business Rule</type>
<update_domain>global</update_domain>
<update_guid>3a807a62caa82210b7537065b41d8485</update_guid>
<update_guid_history>3a807a62caa82210b7537065b41d8485:-1725928707,c37072a2a6a82210d0c1e228b8eaf7c7:-329842902,8e7d9be562bb12100ad3a1c3c7a02fe5:-1725928707,e4dafa45f36a91107a206c51398c0b10:468658174,4e8509e83db5511017405eb52b8b5a20:1696527713,de16c6c1206691104ded5ea9c306585b:-1487090419,319386c172669110c0029d7af0389be3:194741955,6d1e114159e2911000347f2459e9ca59:-1651851118,c9868a7ceba65110e63c6aec7d1723e0:2068762725,5164edbcee265110637a00a09d4586a5:1702431735,dd3699704326511052eeac3233522a75:1290550987,c694d5bc3de2511042b5a192b30ae838:-83866713,532f853850e2511021218e9799b1a4c0:-1648299055,5bbb8174b2e25110f61d5ae1f15b702c:818654336,e0f909fc8ea2511014e1b664ce48c941:-174255704,4e8509e83db5511017405eb52b8b5a20:1696527713,836581a8a7b551109a44c99f164ba94c:-392936169,557daf2b3353101017456069200a5c66:-564308999,e3ac672bcc53101065e0cb5a43ba72cf:274538255,de725ba72a131010e01be47b0e028d8b:831461085,6ba09be3e8131010b06511c957022b3d:-801728956,416f8f27c8131010e6661ceb984ae801:-1908054029,a08d8be388131010c72f88fc896e9331:-274121901,de17874ec61450103d222e295ba4ccd6:-1944833251,de17874ec61450103d222e295ba4ccd6:-1944833251,6cfa2e9bef73001058645037f488d33b:396419618,c384c29bac30330092a0249005c71082:-820060411,c384c29bac30330092a0249005c71082:-820060411,4e29c6a64857630010c0945e70d19c59:1846455470,4e29c6a64857630010c0945e70d19c59:1846455470,a494acccb01363005240a8cb17182021:-820060411</update_guid_history>
<update_set display_value="" />
<view />
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</application>
<category>customer</category>
<comments />
<name>sys_script_include_f7a4712ddb61130070c5771c8c961999</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_pd_integration.PdWebhookTransform&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;mobile_callable&gt;false&lt;/mobile_callable&gt;&lt;name&gt;PdWebhookTransform&lt;/name&gt;&lt;sandbox_callable&gt;false&lt;/sandbox_callable&gt;&lt;script&gt;&lt;![CDATA[/*** Changes made to this script are not supported by PagerDuty ***/

/*
  For variables go to: http://wiki.service-now.com/index.php?title=Import_Sets
*/

var PdWebhookTransform = (function () {
  var notesHelper = x_pd_integration.WorkNotesHelper;
  var taskHelper = new x_pd_integration.TaskEntityHelper(target, source.target_table);
  var pd = new x_pd_integration.PagerDuty();
  var eventOriginatedInServiceNow = pd.isClientServiceNow(String(source.message_channel_client));
  var insertWorkNote = 'PagerDuty incident was triggered for nonexistent incident, new incident created';

  function tryTransform () {
    try {
      webhookTransform();

      // CUSTOM HERE to avoid incident.trigger when the incident is created already in ServiceNow
      if (!(source.message_type == 'incident.trigger') || ((source.message_type == 'incident.trigger') &amp;&amp; (action == 'insert'))) {
		// Dynamic field mapping
		runDynamicFieldMapping(source.message_type, current.payload);
      }
      // END OF CUSTOM
      // Call customizable script
      runCustomScript();
    } catch (err) {
      gs.error('Error in WebhookTransform: ' + err);
    }
  }

  function webhookTransform () {
    try {
      var assignmentsSummary = parseAssignmentsSummary(source);
      var newGroupSysId;
      var assignToUser;

      gs.debug('Transform: {0} {1} action on incident {2}', source.message_type, action, target.getDisplayValue());
      var assignOnAckOnly = gs.getProperty('x_pd_integration.assign_on_ack_only');
      gs.debug('assignOnAckOnly=' + assignOnAckOnly);

      // ignore if pagerduty message channel client is ServiceNow; this event originally comes from ServiceNow
      // CUSTOM HERE - ignore the message if it is incident.trigger and insert and from SN
      if (eventOriginatedInServiceNow &amp;&amp; ((source.message_type === 'incident.resolve')||((source.message_type == "incident.trigger")&amp;&amp;(action == 'insert')))) {
		// END OF CUSTOM HERE
        ignore = true;
        gs.debug('Transform: ignore {0} since the event originally comes from ServiceNow', source.message_type);
        return;
      }

	// 			//ignore all new incidents created in PagerDuty
	// 			if (action == 'insert') {
	// 				ignore = true;
	// 				gs.debug("Transform: ignore {0} since the creation is blocked from PD", source.message_type);
	// 				return;
	// 			}

	// Disabling transaction when SN INC is resolved - except Notes
	if (action == 'update' &amp;&amp; taskHelper.isTaskHasResolvedState(target.state) &amp;&amp; (source.message_type != 'incident.annotate')) {
		// If target.state is already resolved ignore
		ignore = true;
		gs.info("Transform: ignore transaction since the target is already resolved: " + source.id + ':' + target.number);

		var pd = new x_pd_integration.PagerDuty();
		pd.resolveIncident(target, 'system');

		return;

	}

      if (source.message_type == 'incident.trigger') {
        if (action == 'update') {
          var shouldAddWorkNote = target.work_notes &amp;&amp; target.work_notes.indexOf(insertWorkNote) &gt;= 0;
          gs.debug('webhookTransform incident.trigger update for incident {0}', source.id);
          taskHelper.setPdId(source.id);

          // Ent v3.1 populate incident_key as well as id
          target.x_pd_integration_incident_key = source.incident_key;

          if (shouldAddWorkNote &amp;&amp; notesHelper.isEnabled('show_incident_triggering_note')) {
            target.work_notes = notesHelper.build('PagerDuty incident was triggered and will notify ' + assignmentsSummary);
          }

          // look for change in priority
          syncIncPriority(true);

          // don't assign incident is configured to only assign on acknowledgement
          if (assignOnAckOnly == 'true') {
            gs.debug('PagerDuty has assigned incident {0} to {1}', target.getDisplayValue(), assignmentsSummary);
            if (shouldAddWorkNote &amp;&amp; notesHelper.isEnabled('show_incident_assignment_note')) {
              target.work_notes = notesHelper.build('PagerDuty incident was assigned to ' + assignmentsSummary);
            }
          } else {
            // attempt to assign incident to user
            assignToUser = getUserByPDID(source.assigned_to_pd_id);

            if (gs.nil(assignToUser)) {
              gs.debug(
                'PagerDuty incident was assigned to {0}, but ServiceNow could not locate user \'{1}\' to assign the incident to them',
                assignmentsSummary, source.assigned_to_pd_id
              );
              if (shouldAddWorkNote &amp;&amp; notesHelper.isEnabled('show_incident_assignment_note')) {
                target.work_notes = notesHelper.build('PagerDuty incident was assigned to ' + assignmentsSummary +
                  ', but ServiceNow could not locate user \'' + source.assigned_to_pd_id);
              }
              return;
            } else {
              // CUSTOM HERE - Assign to set only when it is different than defaulr user
              if (source.assigned_to_pd_id != gs.getProperty("x_pd_integration.default_user")) {
                if (shouldAddWorkNote &amp;&amp; notesHelper.isEnabled('show_incident_assignment_note')) {
                  target.work_notes = notesHelper.build('PagerDuty incident was assigned to ' + assignmentsSummary +
                    ', assigning this incident to them');
                }
                target.assigned_to = assignToUser.getUniqueValue();
              }
              // END OF CUSTOM
            }
            return;
          }

        } else if (action == 'insert') {
          gs.debug('webhookTransform incident.trigger insert for incident {0}', source.id);

          taskHelper.setPdId(source.id);

          target.short_description = 'PagerDuty: ' + source.subject;
          if (notesHelper.isEnabled('show_incident_triggering_note')) {
            target.work_notes = notesHelper.build(insertWorkNote);
          }
          target.x_pd_integration_incident_key = source.incident_key;

          newGroupSysId = getGroupSysIdFromEscalationPolicyId(source);
          if (!gs.nil(newGroupSysId)) {
            target.setValue('assignment_group', newGroupSysId);
          }

          if (!gs.nil(source.service_id) &amp;&amp; gs.nil(source.ci_sys_id)) {
            target.setValue('cmdb_ci', getCISysID(source.service_id));
          }

          if (!gs.nil(source.ci_sys_id)) {
            target.setValue('cmdb_ci', source.ci_sys_id);
          }

          // CUSTOM HERE - Set On Behalf Of
          var payload = JSON.parse(source.payload);
          // On Behalf Of
          var assigneePDID = payload.incident &amp;&amp; payload.incident.assignments &amp;&amp; payload.incident.assignments[0] &amp;&amp; payload.incident.assignments[0].assignee;
          if (assigneePDID) {
            var assigneeSN = new GlideRecord('sys_user');
			assigneeSN.get('x_pd_integration_pagerduty_id', assigneePDID.id);
			target.u_on_behalf_of = assigneeSN.getUniqueValue();
          }
          // END OF CUSTOM HERE

          syncIncPriority();

		// CUSTOM HERE for NOC and CRE Configuration Item
		if ((source.service_name == 'NOC') || (source.service_name == 'CRE')) {

			// Get Custom Fields for NOC / CRE - Get Device CI Name
			var deviceName = '';
			gs.debug("webhookTransform - NOC / CRE device name custom field customization = {0} {1}", source.id, deviceName);
			deviceName = getCustomFieldValue(source.id, 'device_ci_name');
			if (deviceName) {
				var deviceNameGR = new GlideRecord('cmdb_ci');
				if (deviceNameGR.get('name', deviceName)) {
					target.cmdb_ci = deviceNameGR.getUniqueValue();
				} else {
					gs.debug("webhookTransform - NOC / CRE device name custom field customization = {0} {1} not found", source.id, deviceName);
				}
			}
			
			if (payload.log_entries &amp;&amp; payload.log_entries[0] &amp;&amp; payload.log_entries[0].channel &amp;&amp; payload.log_entries[0].channel.cef_details &amp;&amp; payload.log_entries[0].channel.cef_details.details &amp;&amp; payload.log_entries[0].channel.cef_details.details.Host) { 
				var client = payload.log_entries &amp;&amp; payload.log_entries[0] &amp;&amp; payload.log_entries[0].channel &amp;&amp; payload.log_entries[0].channel.cef_details &amp;&amp; payload.log_entries[0].channel.cef_details.source_origin;
				if ((client.contains('LogicMonitor')) || (client.contains('Kibana,Type:Hardware'))  || (client.contains('Dynatrace'))) {
					var hostname = payload.log_entries[0].channel.cef_details.details.Host;
					var hostnameSN = new GlideRecord('cmdb_ci');
					if (hostnameSN.get('name', hostname)) {
						target.cmdb_ci = hostnameSN.getUniqueValue();
					} else {
						gs.debug("webhookTransform - CI customization = {0} {1} not found", source.id, hostname);
					}
				}
			}
			var client2 = payload.log_entries &amp;&amp; payload.log_entries[0] &amp;&amp; payload.log_entries[0].channel &amp;&amp; payload.log_entries[0].channel.cef_details &amp;&amp; payload.log_entries[0].channel.cef_details.source_origin;
			if ((client2.contains('Kibana:Application')) || (client2.contains('Kibana')) &amp;&amp; !(client2.contains('Kibana,Type:Hardware'))) {
				var appName = payload.log_entries[0].channel.cef_details.source_origin;
				if (appName.split("CI:")[1])  {
					appName = appName.split("CI:")[1].split(",")[0];
					var appNameSN = new GlideRecord('cmdb_ci');
					if (appNameSN.get('name', appName)) {
						target.cmdb_ci = appNameSN.getUniqueValue();
					} else {
						gs.debug("webhookTransform - CI customization = {0} {1} not found", source.id, appName);
					}
				}
			}
		}
		// END OF CUSTOM

          // If the status is acknowledged or someone is assigned and acknowledge flag is false,
          // set the Assigned To field to incident
          if (!gs.nil(source.assigned_to_pd_id) &amp;&amp; (source.status == 'acknowledged' || assignOnAckOnly == 'false')) {
            assignToUser = getUserByPDID(source.assigned_to_pd_id);
            if (gs.nil(assignToUser)) {
              gs.debug(
                'PagerDuty incident {0} was assigned to {1}, but could not find user by PagerDuty ID {2}', target.getDisplayValue(),
                assignmentsSummary, source.assigned_to_pd_id
              );
              if (notesHelper.isEnabled('show_incident_assignment_note')) {
                target.work_notes = notesHelper.build('PagerDuty incident was assigned to ' + assignmentsSummary +
                  ', but ServiceNow could not locate user with PagerDuty ID \'' + source.assigned_to_pd_id + '\' to assign the incident to them');
              }
              return;
            }

            gs.debug('assignToUser.getDisplayValue() = {0}', assignToUser.getDisplayValue());
            gs.debug(
              'PagerDuty incident {0} was assigned to {1}, re-assigning incident', target.getDisplayValue(),
              assignToUser.getDisplayValue()
            );
			// CUSTOM HERE - Set Assigned to only if it is not default user
			if (source.assigned_to_pd_id != gs.getProperty("x_pd_integration.default_user")) {
              target.assigned_to = assignToUser.getUniqueValue();
			}
			// END OF CUSTOM HERE
          }
        }
        return;
      }

      // CUSTOM HERE - Skip the transaction for assign, delegate and escalate if it is insert
      if ((source.message_type == "incident.assign" || source.message_type == "incident.delegate" || source.message_type == "incident.escalate") &amp;&amp; action == "insert") {
        ignore = true;
        gs.debug("Transform: ignore {0} since assign, delegate and escalate should never generate a new Incident", source.message_type);
        return;
      }
      // END OF CUSTOM HERE

      if ((source.message_type == 'incident.assign' || source.message_type == 'incident.delegate' || source.message_type == 'incident.escalate') &amp;&amp; action == 'update') {

        gs.debug('Assign or delegate incident, assignOnAckOnly:{0}, assigned_to_pd_id:{1}', assignOnAckOnly, source.assigned_to_pd_id);

        if (source.message_type == 'incident.delegate') {
          newGroupSysId = getGroupSysIdFromEscalationPolicyId(source);
          if (!eventOriginatedInServiceNow &amp;&amp; !gs.nil(newGroupSysId)) {
            target.setValue('assignment_group', newGroupSysId);
			// CUSTOM HERE to apply trigger state - 00604699
			target.state = taskHelper.triggerStateValue();
			// END OF CUSTOM HERE
          }
        }

        // look for change in priority
        syncIncPriority(true);

        // attempt to assign incident to user
        assignToUser = getUserByPDID(source.assigned_to_pd_id);

        // based on property setting don't auto-assign ServiceNow incident until it's acknowledged
        if (assignOnAckOnly == 'true') {
          if (eventOriginatedInServiceNow &amp;&amp; !gs.nil(assignToUser) &amp;&amp; assignToUser.getUniqueValue() == target.assigned_to || source.status == 'acknowledged') {
			// CUSTOM HERE - Set correct ACK state
            // target.state = taskHelper.triggerStateValue();
			target.state = taskHelper.acknowledgedStateValue();
			// END OF CUSTOM HERE
          } else {
            gs.debug('PagerDuty incident {0} was assigned to {1}, but property set to assign only on ack', target.getDisplayValue(), assignmentsSummary);
            if (notesHelper.isEnabled('show_incident_reassignment_note')) {
              //Case 00604703 - request to update the worknotes and remove (so the assignee was cleared. )
              //   target.work_notes = notesHelper.build('PagerDuty incident was re-assigned to ' + assignmentsSummary + ' with assignOnAckOnly=' + assignOnAckOnly + ' so the assignee was cleared.');
              target.work_notes = notesHelper.build('PagerDuty incident was re-assigned to ' + assignmentsSummary + ' with assignOnAckOnly=' + assignOnAckOnly);
              // END OF CUSTOM HERE
            }
			// CUSTOM HERE - Do not clear Assigned To
            // target.assigned_to = '';
			// END OF CUSTOM HERE
            target.state = taskHelper.triggerStateValue();
          }
          return;
        }

        if (gs.nil(assignToUser)) {
          gs.debug(
            'PagerDuty incident {0} was assigned to {1}, but could not find user by PD ID {2}', target.getDisplayValue(),
            assignmentsSummary, source.assigned_to_pd_id
          );
          if (notesHelper.isEnabled('show_incident_assignment_note')) {
            target.work_notes = notesHelper.build('PagerDuty incident was assigned to ' + assignmentsSummary +
              ', but ServiceNow could not locate user \'' + source.assigned_to_pd_id + '\' to assign the incident to them');
          }
          return;
        }

        gs.debug('assignToUser.getDisplayValue() = {0}', assignToUser.getDisplayValue());
        gs.debug(
          'PagerDuty incident {0} was assigned to {1}, re-assigning incident', target.getDisplayValue(),
          assignToUser.getDisplayValue()
        );

		// CUSTOM HERE - Set Assigned to only if it is not default user
		if (source.assigned_to_pd_id != gs.getProperty("x_pd_integration.default_user")) {
          target.assigned_to = assignToUser.getUniqueValue();
		}
		// END OF CUSTOM HERE
        if (notesHelper.isEnabled('show_incident_assignment_note')) {
          target.work_notes = notesHelper.build('PagerDuty incident was assigned to ' + assignmentsSummary);
        }
        return;
      }

      if (source.message_type == 'incident.unacknowledge') {
        ignore = true;
        gs.debug('Transform: ignore incident.unacknowledge -- there should not be an ACK timeout');
        return;
      }

      if (source.message_type == 'incident.acknowledge') {

        if (action == 'insert') {
          ignore = true;
          return;
        } else if (action == 'update') {
          // CUSTOM HERE - Set correct state for Ack
          target.state = taskHelper.acknowledgedStateValue();
          // END OF CUSTOM
          // look for change in priority
          syncIncPriority(true);

          // assign to user based on 'assigned_to_pd_id' if we find it
          assignToUser = getUserByPDID(source.assigned_to_pd_id);
          if (gs.nil(assignToUser)) {
            target.work_notes = notesHelper.build('PagerDuty incident was acknowledged by ' + assignmentsSummary +
              ', but ServiceNow could not locate user \'' + source.assigned_to_pd_id + '\' to assign the incident to them');
            return;
          }

          // CUSTOM HERE - Set Assigned to only if it is not default user
          if (source.assigned_to_pd_id != gs.getProperty("x_pd_integration.default_user")) {
            target.assigned_to = assignToUser.getUniqueValue();
            target.work_notes = notesHelper.build('PagerDuty incident was acknowledged by ' + assignmentsSummary);
          }
          // END OF CUSTOM HERE
          return;
        }
      }

      if (source.message_type == 'incident.annotate') {
        if (action == 'insert') {
          ignore = true;
          return;
        } else if (action == 'update') {
          if (source.note.toString().indexOf('(from ServiceNow:') === -1) {
            var gdt = new GlideDateTime();
			gs.debug("Transform: Work Notes set.");
            target.work_notes = notesHelper.build(source.note.toString() + ' (PagerDuty:' + source.username + ' on ' + gdt.getDisplayValue() + ')');
            syncIncPriority(true);
          }
        }
      }

      // Message type is Resolve

      if (source.message_type == 'incident.resolve') {

        if (action == 'insert') {
          // A resolve webhook should never create a new ServiceNow ticket
          ignore = true;
		// CUSTOM HERE - Ignoring transaction - Raise a new Incident
		} else {
          ignore = true;

          // CALL INCIDENT TRIGGER TO CREATE A NEW INCIDENT IN PD
          // Create a new Incident
          var eventName = "x_pd_integration.trigger_incident";
          gs.debug("Firing event {0} for {1} since it was resolved in PagerDuty", eventName, target.getDisplayValue());
          var currentUserSysId = gs.getUser().getID();
          var changeValue = true;
          var params = currentUserSysId + ",update," + changeValue;
          gs.eventQueue(eventName, target, target.work_notes.getJournalEntry(-1), params);

          return;
          // END OF CUSTOM HERE
        }

        if (taskHelper.isTaskHasResolvedState(target.state)) {
          // If target.state is already resolved ignore
          ignore = true;
          gs.debug('Transform: ignore incident.resolve since the target is already resolved');
          // if (resolvedReason != "merge_resolve_reason")
          return;

        }

        gs.info('Transform: PagerDuty incident was resolved, setting incident {0} to resolved state', target.getDisplayValue());

        // Worknotes entry for any resolve use case except for a Merge
        if (source.resolve_reason != 'merge_resolve_reason') {
          if (!gs.nil(source.resolved_by_name)) {
            target.work_notes = notesHelper.build('PagerDuty incident was resolved by ' + source.resolved_by_name);
          } else {
            target.work_notes = notesHelper.build('PagerDuty incident was resolved');
          }
        } else { // resolveReason == "merge_resolve_reason"
          // Resolve occurred as a result of merge in PagerDuty, need to link to parent.
          var parentPdId = source.parent_pd_id;
          var parentSysId = getParentIncSysIdByPDIncId(parentPdId);
          if (source.target_table == 'incident') {
            target.parent_incident = parentSysId;
          } else if (source.target_table == 'sn_si_incident') {
            target.parent_security_incident = parentSysId;
          }

          // Get parent incident number for work notes
          var incNumber = getSNIncNumberBySysId(parentSysId);
          if (!gs.nil(source.resolved_by_name)) {
            target.work_notes = notesHelper.build('PagerDuty incident was resolved by ' + source.resolved_by_name + ' due to PagerDuty merge with incident ' + incNumber);
          } else {
            target.work_notes = notesHelper.build('PagerDuty incident was resolved due to PagerDuty merge with incident ' + incNumber);
          }
        }

        if (!taskHelper.isTaskHasResolvedState(target.state)) {
          target.state = taskHelper.resolvedStateValue();
        }

        // look for change in priority
        syncIncPriority(true);

      } // end if message type is resolve
    } catch (e) {
      gs.error('PdWebhookTransform, webhookTransform error: {0}', e);
    }
  }

  function runDynamicFieldMapping (messageType, payload) {
    // Add the dynamic field mapping
    var eventArr = messageType.split('.');
    if (eventArr.length &gt; 1) {
      var pifr = new x_pd_integration.PagerDutyInboundFieldRule();
      var results = pifr.getValuesFromPayloadBasedOnEvent(eventArr[1], payload, source.target_table);
      // Set the target field
      // if setting for a reference, the value is not a valid sys_id, it will set field to empty
      for (var i = 0; i &lt; results.length; i++) {
        var key = results[i].key;
        // eslint-disable-next-line es5/no-es6-methods
        if (!eventOriginatedInServiceNow || gs.nil(target.getValue(key))) {
          target.setValue(results[i].key, results[i].value);
        }
      }
    }
  }

  // CUSTOM HERE - New function to get Custom Fields Values
  function getCustomFieldValue(incidentId, customFieldName){
		var me = "getCustomFieldValue";
		gs.debug("{0} Called for PagerDuty Incident Id \"{1}\" Custom Field Name {2}", me, incidentId, customFieldName);
		var customFieldValue = '';
		var feature = 'incidents/' + incidentId + '/custom_fields/values';
		var response = new x_pd_integration.PagerDuty_REST().getREST(feature);
		var responseBody = response.getBody();
		var status = response.getStatusCode();
		if (status == 200) {
			gs.debug("{0} Called for PagerDuty Incident Id \"{1}\" returned 200", me, incidentId);
			var customFields = JSON.parse(response.getBody()).custom_fields;
		}

		for (var i = 0; i &lt; customFields.length; i++){
			if (customFields[i].name == customFieldName) {
				customFieldValue = customFields[i].value;
			}
		}
		gs.debug("{0} Called for PagerDuty Incident Id \"{1}\" Custom Field Value {2}", me, incidentId, customFieldValue);
		return customFieldValue;
	}
	// CUSTOM HERE

  function runCustomScript () {
    var custScript = new x_pd_integration.PagerDutyInboundCustomScript();
    custScript.customPostTransformActivity(source, target, action);
  }

  function getUserByEmail (email) {
    var gr = new GlideRecordSecure('sys_user');
    if (gr.get('email', email)) {
      gs.debug('Webhook transform found user {0} for email {1}', gr.getDisplayValue(), email);
      return gr;
    } else {
      gs.debug('Webhook transform could not find user for email {0}', email);
      return;
    }
  }

  function getUserByPDID (pd_id) {
    var gr = new GlideRecordSecure('sys_user');
    if (gr.get('x_pd_integration_pagerduty_id', pd_id)) {
      gs.debug('Webhook transform found user {0} for PageDuty ID {1}', gr.getDisplayValue(), pd_id);
      return gr;
    } else {
      gs.debug('Webhook transform could not find user for PagerDuty ID {0}', pd_id);
      return;
    }
  }

  function getCISysID (serviceID) {
    var gr = new GlideRecordSecure('cmdb_ci');
    if (gr.get('x_pd_integration_pagerduty_service', serviceID)) {
      return gr.getValue('sys_id');
    }
  }

  function getIncidentPriority (inc_id) {
    var gr = new GlideRecordSecure(source.target_table);
    gr.addQuery(taskHelper.getPdIdField(), inc_id);
    gr.query();
    if (gr.next()) {
      return gr.priority;
    }
  }

  function getParentIncSysIdByPDIncId (pdIncId) {
    var gr = new GlideRecordSecure(source.target_table);
    gr.addQuery(taskHelper.getPdIdField(), pdIncId);
    gr.query();
    if (gr.next()) {
      return gr.sys_id;
    }
  }

  function getSNIncNumberBySysId (sysId) {
    var gr = new GlideRecordSecure(source.target_table);
    gr.addQuery('sys_id', sysId);
    gr.query();
    if (gr.next()) {
      return gr.number;
    }
  }

  function getGroupSysIdFromEscalationPolicyId (source) {
    if (gs.nil(source.escalation_policy_id)) {
      return;
    }
    var epHelper = new x_pd_integration.EscalationPolicyHelper();
    return epHelper.getAssignmentGroupIdWithPriority(source.escalation_policy_id, source.priority_id);
  }

  function syncIncPriority (checkPriorityChanges) {
	gs.info("webhookTransform - syncIncPriority started...");
	var iuObj;

	if (action == 'update') {
		if (!gs.nil(source.priority_id)) {
			iuObj = pd.getImpactUrgencyById(source.priority_id);
		}
		gs.info("webhookTransform - syncIncPriority (Update)  - Impact: {0}, Urgency: {1}", iuObj.impact, iuObj.urgency);
	} else {
		// Gets P4 from PD integration table
		var gr = new GlideRecordSecure("x_pd_integration_pagerduty_priority");
		gr.addQuery('priority', '4');
		gr.query();
		if (gr.next()) {
			var impact = gr.impact;
			var urgency = gr.urgency;
			var priority = gr.priority;
			var priority_display = gr.priority.getDisplayValue();
			iuObj = {
				impact: impact,
				urgency: urgency,
				priority: priority,
				priority_display: priority_display
			};
		}
		taskHelper.setPriority(iuObj);
		gs.info("webhookTransform - syncIncPriority (Insert) - Impact: {0}, Urgency: {1}, Priority: {3}", iuObj.impact, iuObj.urgency, iuObj.priority);
	}

	gs.info("webhookTransform - syncIncPriority - Starting send back to PD");
	var eventName = "x_pd_integration.update_priority_only";
	var currentUserSysid = gs.getUser().getID();
    if (!gs.nil(source.priority_id)) {
      var tr_priority;
      var db_priority = getIncidentPriority(source.id);
      
      if (!gs.nil(iuObj) &amp;&amp; iuObj.hasOwnProperty('priority')) {
          tr_priority = iuObj.priority;
      }

      gs.info("webhookTransform - syncIncPriority - Check if Priority is different in SN and PD");
      if ((action == 'insert') || ((db_priority != tr_priority) &amp;&amp; !gs.nil(db_priority) &amp;&amp; !gs.nil(tr_priority))) {
        // Call PD API to update priority
		gs.info("webhookTransform - syncIncPriority - Priority is different on PD");
        gs.info("webhookTransform - syncIncPriority - Firing event {0} for {1}", eventName, target.getDisplayValue());
        gs.eventQueue(eventName, target, currentUserSysid, source.id);
      }

    } else {
		gs.info("webhookTransform - syncIncPriority - Priority is empty on PD");
		// Call PD API to update priority
		gs.info("webhookTransform - syncIncPriority - Firing event {0} for {1}", eventName, target.getDisplayValue());
		gs.eventQueue(eventName, target, currentUserSysid, source.id);
	}
  }

  function parseAssignmentsSummary (source) {
    var payload = JSON.parse(source.payload);
    var assignments = payload.incident &amp;&amp; payload.incident.assignments;
    var assignmentsSummary = [];
    if (assignments) {
      assignments.forEach(function (item) {
        assignmentsSummary.push(item.assignee.summary);
      });
    }
    assignmentsSummary.splice(-2, 2, assignmentsSummary.slice(-2).join(' and '));
    return assignmentsSummary.join(', ');
  }

  return {tryTransform: tryTransform};
})();
]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;PagerDuty_v8.1&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2018-04-18 12:20:40&lt;/sys_created_on&gt;&lt;sys_id&gt;f7a4712ddb61130070c5771c8c961999&lt;/sys_id&gt;&lt;sys_mod_count&gt;78&lt;/sys_mod_count&gt;&lt;sys_name&gt;PdWebhookTransform&lt;/sys_name&gt;&lt;sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="PagerDuty Incident Resolution Platform"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_f7a4712ddb61130070c5771c8c961999&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-03-31 02:19:01&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;sys_es_latest_script action="INSERT_OR_UPDATE"&gt;&lt;id&gt;f7a4712ddb61130070c5771c8c961999&lt;/id&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2025-03-29 00:26:32&lt;/sys_created_on&gt;&lt;sys_id&gt;2eda5c4ac320221040d0becdd40131f7&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-03-29 00:26:32&lt;/sys_updated_on&gt;&lt;table&gt;sys_script_include&lt;/table&gt;&lt;use_es_latest&gt;false&lt;/use_es_latest&gt;&lt;/sys_es_latest_script&gt;&lt;/record_update&gt;</payload>
<payload_hash>688524495</payload_hash>
<remote_update_set display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Child">2dd0afe2c3ac221040d0becdd40131d1</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-03-31 04:08:31</sys_created_on>
<sys_id>2dd0afe2c3ac221040d0becdd40131d7</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>195e9fec1240000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-03-31 04:08:31</sys_updated_on>
<table />
<target_name>PdWebhookTransform</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>79c7c362952c221040ea0a29be983562</update_guid>
<update_guid_history>79c7c362952c221040ea0a29be983562:688524495,06c5192eb0a02210ff0a4ae4fd7094e3:2067887087,417591ea43a0221072067e7128bba89e:-1585365142,f2a7b8e2f8202210cd75de2668635a85:2067887087,49180c2ad668a210f70e461125afd7fe:975516786,daeda35e15e4a210c81a50a73df01c65:-185520092,97cda75e14e4a2102712e62316c62145:-2094948325,ae7d2f9a69e4a21007861f5b24e44a67:976540505,39bce79ad0e4a2103e8ad347dcfac142:-340251611,731cabd6ade4a21067f7603f12ceb131:-404406029,b9cb231620e4a210c1c09134f32f847a:207256087,218bab162a24a2105aea48fa6cf4d01e:-20360203,b3caa31624e4a210d837c2655ab2eff1:1044197497,70caef568fe4a210f6c9500534f56dd5:26435233,a1596bd69fe4a2101e87a6e56977a5f5:393463388,df5763567fe4a2109e01405582e20d1b:-370138030,454b28c6a2a022105b9e2fe6e338ea69:1880671518,f21f904641a0221067fb12b426ee26a6:-813794392,30ae5c4af320221083a9d3344c34abfe:-1611801354,ae1edc42fc2022101bbfab61e8a014aa:1171066742,4fcc904616a0221018433c1fd36557c6:-1926020185,a8db9cc2e0a02210c104c7d052930c9a:1796708895,7adad482ac2022106d956876ef4f123f:655497815,17fcb496d9812010192934875719f705:-2035417955,dfe690da30012010fbd319eacf02f963:1241300091,92951c5ad601201088e19511060ca69c:-1048734486,ac95949acf01201065e5aad70ab22241:1241300091,8f55109a3201201088a75983141a9280:-1950257203,0ac4901a57012010981a10b4de3d66b0:-112223896,6ea4985a2001201080acac2f88929974:-1472779746,3254505a22012010a4882777a9d27ee1:-974575200,a634505a5b012010e9e4386633e35ddb:-1048734486,2c2498962e012010894c47c629b6790b:1241300091,ad335896c101201044ad5eb8271aeee7:-241473569,4c352ebdf28d601006312876d135b76a:-2035417955,1c9006f9a94d6010c8cd0fbcd38de0c6:858117635,9b676db9220d60104fb9c16c5cbbf5d2:1710602641,1637ed797c0d601017b05c70d76b6e9a:-1810607160,3206e9f5b20d6010b23ef4e969c7b00b:2067572247,d031a9b5310d60107f82142a54a294b2:2025380262,1bced935980d6010ff64652356816486:1241300091,5c5bc45ddf052010df37c2803f0328bc:1227986332,d77bd8d202d31010de556d17507fbd5f:1241300091,0ea468638c5110100aff794f67a9c93b:-2146981046,0ea468638c5110100aff794f67a9c93b:-2146981046,3ae2a1a256555010442ef5cce392d6cb:160192190,7252e922ce555010fcf53ac738983d92:-117635374,9d81a56248555010ceaf87974a86285e:-8529540,84d0a9ee011550100e13eff7c0a23ae8:384142507,8f80e522915550106605a3625f6fab8c:-1326656609,639cc5ae13d15010342f24c16bceaca6:384142507,7426746fbc0c10108541bea292cf4ff2:-1326656609,0b3de412964c1010f370197656840c79:-1675829083,7e875369c608101076abf397dd65c94f:-1195409051,44706de8f24a00108081b6bde077851e:-189047356,c2f7bd09291100109f4e90ba6c770c58:1654103290,064dad097b110010b9c55519cc5e9e52:1177930768,fba81ed033f40010212edce7104e4942:2031380225,cd30d29cc0b40010f21a893451e6c7ec:-945672603,4498421874b400100a8ec37e142be1d8:400969641,e19bee96ad21330075ba7e091a08d05b:-1153878620,e19bee96ad21330075ba7e091a08d05b:-1153878620,f094acccbd13630082344a910569df98:-1422561593,f094acccbd13630082344a910569df98:-1422561593</update_guid_history>
<update_set display_value="" />
<view />
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</application>
<category>customer</category>
<comments />
<name>sysevent_script_action_c84e10d14f221200dd657bb28110c751</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sysevent_script_action"&gt;&lt;sysevent_script_action action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;condition_script/&gt;&lt;description/&gt;&lt;event_name&gt;x_pd_integration.post_worknote&lt;/event_name&gt;&lt;name&gt;PagerDuty Post Work Note&lt;/name&gt;&lt;order&gt;100&lt;/order&gt;&lt;script&gt;&lt;![CDATA[/*** Changes made to this script are not supported by PagerDuty ***/
var createdBy = String(event.parm1);

gs.debug('PagerDuty event \'x_pd_integration.post_worknote\' fired from {0} by {1}', current.getDisplayValue(), createdBy);
var pd = new x_pd_integration.PagerDuty();

if (createdBy !== 'system') {

  var pdNotes = [];
  var rawNotes = pd.getIncidentNotes(current.x_pd_integration_incident);
  rawNotes.forEach(function (note) {
    pdNotes.push(note.content);
  });

  var snNotes = pd.getSNWorknotes(current.getUniqueValue(), createdBy);

  pdNotes = pdNotes.map(function (note) {
    return note.trim();
  });
  snNotes = snNotes.map(function (note) {
    return note.trim();
  });
  pdNotes.reverse();
  snNotes.reverse();

  // only interested in the notes that came from ServiceNow and a certain user (createdBy)
  pdNotes = pdNotes.filter(function (pdNote) {
    return pdNote.indexOf('(from ServiceNow:' + createdBy + ') ') &gt;= 0;
  });

  // only interested in a content
  for (var i in pdNotes) {
    if (pdNotes.hasOwnProperty(i)) {
      pdNotes[i] = pdNotes[i].replace('(from ServiceNow:' + createdBy + ') ', '');
    }
  }

  // filter out repeating notes in chronological order
  pdNotes.forEach(function (pdNote) {
    var snNoteIndex = snNotes.indexOf(pdNote);
    if (snNoteIndex &gt;= 0) {
      // not interested in unique notes before the repeating one
      snNotes.splice(0, snNoteIndex + 1);
    }
  });

  snNotes.forEach(function (snNote) {
    var index = snNote.indexOf('(PagerDuty:');
    if (index === -1) {
      var note = '(from ServiceNow:' + createdBy + ') ' + snNote;
      pd.postIncidentNote(x_pd_integration.TaskEntityHelper.getPdId(current), note, createdBy, false, current.getUniqueValue());
    }
  });

}
]]&gt;&lt;/script&gt;&lt;synchronous&gt;false&lt;/synchronous&gt;&lt;sys_class_name&gt;sysevent_script_action&lt;/sys_class_name&gt;&lt;sys_created_by&gt;PagerDuty_v8.1&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2016-04-01 19:41:55&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;c84e10d14f221200dd657bb28110c751&lt;/sys_id&gt;&lt;sys_mod_count&gt;59&lt;/sys_mod_count&gt;&lt;sys_name&gt;PagerDuty Post Work Note&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="PagerDuty Incident Resolution Platform"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sysevent_script_action_c84e10d14f221200dd657bb28110c751&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;PagerDuty_v8.1&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2020-11-23 16:52:08&lt;/sys_updated_on&gt;&lt;/sysevent_script_action&gt;&lt;sys_es_latest_script action="INSERT_OR_UPDATE"&gt;&lt;id&gt;c84e10d14f221200dd657bb28110c751&lt;/id&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2025-03-11 14:37:33&lt;/sys_created_on&gt;&lt;sys_id&gt;0101f658c310221040d0becdd40131cf&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-03-11 14:37:33&lt;/sys_updated_on&gt;&lt;table&gt;sysevent_script_action&lt;/table&gt;&lt;use_es_latest&gt;false&lt;/use_es_latest&gt;&lt;/sys_es_latest_script&gt;&lt;/record_update&gt;</payload>
<payload_hash>1200312684</payload_hash>
<remote_update_set display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Child">2dd0afe2c3ac221040d0becdd40131d1</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-03-31 04:08:31</sys_created_on>
<sys_id>61d0afe2c3ac221040d0becdd40131d3</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>19585a3b9cc0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-03-31 04:08:31</sys_updated_on>
<table>x_pd_integration.post_worknote</table>
<target_name>PagerDuty Post Work Note</target_name>
<type>Script Action</type>
<update_domain>global</update_domain>
<update_guid>dd01b6586f102210d75f5ecfa9a7ae70</update_guid>
<update_guid_history>dd01b6586f102210d75f5ecfa9a7ae70:1200312684,2e590bdfab2420109b60a9e152d7075d:-596083133,2cf9df854ed35010711641504010eb51:-1343235201,84089f8569d35010f1e129cefe1dbe10:-168321617,f7a357cdd9d35010e136591e750417c9:54035570,1cd58f0599d350105b73f0f34af23ea9:-533567771,2c827f3c539b1010cd17310608aac2d9:-1836371033,f68133f8899b10109ba73e6f37246852:-603197638,33a534e6d5ea9010d711688e0ae02f08:880588397,8b93f4e25cea9010ead956e7f50fcd53:-829029252,166d20eea4aa9010ad8533e558023b7e:-697231789,a3ebe02228ea9010bcf1b0c49260f338:48176676,98a620ee0eaa9010e0cdb55165613378:-1087928918,71c5a4ae8aaa9010251be5cc038e29ff:-1529339,71973bf15962d0100463d8067879b016:-1195691575,f7c5f371d662d010385674443d20e52b:-2093908553,cfb23fbdf122d010ce35e93e10a66f0f:1088987816,c51923f95322d0102ce7ab3098b61f16:-54437022,6a072739cb22d010b42c904e0f95c1f6:-905286398,d2a427399d22d0105266d1fb688f56bd:354438075,ce23afb54d22d0108137f62ec791552e:1703749358,c5c263f5fd22d01031dadaae0aac1374:-661867295,ee62e3753822d01076cbe5d8ac7f38c2:-401434083,e2ce5735d622d010050af600c8f26dcf:-784091888,746e1735ee22d0102161eb401ef0f246:-504024370,e53eb6fdcdae90104f566dcd4f48f991:-1611329106,7c5d7afd63ae90104b8efe7055dc1ccd:-1402123750,d50d3ebdfdae9010bde9e1bc48abbcef:638645722,7f7afa3d57ae9010d3ce8050a421a326:537769015,f6b8f23da6ae901002f83dc66c50a9b5:410978520,ac9942fde92e9010b1c086065687bfe9:969834738,0bd18e79c52e90109248c39b534479cd:54524659,d830c279dc2e90105e19192de53d5e64:1540500793,c5ff3539fe2e9010d25226196c0f85a1:-768716519,3aaff539e42e90103f54ff34629070eb:-1399627517,aaeef139a32e901046cefec1e7c3461a:1171422974,796e35f5972e901037f208f704ed4893:-75560204,bd186870b7df0010175f2634d08c4f5b:-563764872,bd186870b7df0010175f2634d08c4f5b:-563764872,de84a8cce913630057a68dd2616e5a7a:1047335796,de84a8cce913630057a68dd2616e5a7a:1047335796,de84a8cce913630057a68dd2616e5a7a:1047335796</update_guid_history>
<update_set display_value="" />
<view />
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</application>
<category>customer</category>
<comments />
<name>sys_script_e731726197d301106115bbc3f153af65</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;&lt;sys_script action="INSERT_OR_UPDATE"&gt;&lt;abort_action&gt;false&lt;/abort_action&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;action_delete&gt;false&lt;/action_delete&gt;&lt;action_insert&gt;true&lt;/action_insert&gt;&lt;action_query&gt;false&lt;/action_query&gt;&lt;action_update&gt;true&lt;/action_update&gt;&lt;active&gt;true&lt;/active&gt;&lt;add_message&gt;false&lt;/add_message&gt;&lt;advanced&gt;true&lt;/advanced&gt;&lt;change_fields&gt;false&lt;/change_fields&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;collection&gt;incident&lt;/collection&gt;&lt;condition&gt;gs.isLoggedIn()&lt;/condition&gt;&lt;description/&gt;&lt;execute_function&gt;false&lt;/execute_function&gt;&lt;filter_condition table="incident"&gt;x_pd_integration_incidentCHANGESTO---waiting---^ORx_pd_integration_incidentISEMPTY^ORx_pd_integration_incidentCHANGESTO---reopened---^ORx_pd_integration_incident=---unlinked---^priorityIN1,2^assignment_group.x_pd_integration_pagerduty_escalationISNOTEMPTY^stateNOT IN7,8^priorityVALCHANGES^ORassignment_groupVALCHANGES^ORstateVALCHANGES^ORcmdb_ciVALCHANGES^cmdb_ci.x_pd_integration_pagerduty_serviceISNOTEMPTY^ORassignment_group.x_pd_integration_pagerduty_serviceISNOTEMPTY^cmdb_ci.nameISNOTEMPTY^NQx_pd_integration_incidentCHANGESTO---waiting---^ORx_pd_integration_incidentISEMPTY^ORx_pd_integration_incidentCHANGESTO---reopened---^ORx_pd_integration_incident=---unlinked---^priorityIN3,4,5^assignment_group.x_pd_integration_pagerduty_escalationISNOTEMPTY^stateNOT IN7,8^assignment_group.name=NOC^ORassignment_group.name=CRE^cmdb_ci.nameISNOTEMPTY^priorityVALCHANGES^ORassignment_groupVALCHANGES^ORstateVALCHANGES^ORcmdb_ciVALCHANGES^NQstateVALCHANGES^x_pd_integration_incident=---reopened---^assignment_group.x_pd_integration_pagerduty_escalationISNOTEMPTY^stateNOT IN7,8^EQ&lt;item endquery="false" field="x_pd_integration_incident" goto="false" newquery="false" operator="CHANGESTO" or="false" value="---waiting---"/&gt;&lt;item endquery="false" field="x_pd_integration_incident" goto="false" newquery="false" operator="ISEMPTY" or="true" value=""/&gt;&lt;item endquery="false" field="x_pd_integration_incident" goto="false" newquery="false" operator="CHANGESTO" or="true" value="---reopened---"/&gt;&lt;item endquery="false" field="x_pd_integration_incident" goto="false" newquery="false" operator="=" or="true" value="---unlinked---"/&gt;&lt;item display_value="1,2" endquery="false" field="priority" goto="false" newquery="false" operator="IN" or="false" value="1,2"/&gt;&lt;item endquery="false" field="assignment_group.x_pd_integration_pagerduty_escalation" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/&gt;&lt;item display_value="7,8" endquery="false" field="state" goto="false" newquery="false" operator="NOT IN" or="false" value="7,8"/&gt;&lt;item display_value="-- None --" endquery="false" field="priority" goto="false" newquery="false" operator="VALCHANGES" or="false" value=""/&gt;&lt;item endquery="false" field="assignment_group" goto="false" newquery="false" operator="VALCHANGES" or="true" value=""/&gt;&lt;item endquery="false" field="state" goto="false" newquery="false" operator="VALCHANGES" or="true" value=""/&gt;&lt;item endquery="false" field="cmdb_ci" goto="false" newquery="false" operator="VALCHANGES" or="true" value=""/&gt;&lt;item endquery="false" field="cmdb_ci.x_pd_integration_pagerduty_service" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/&gt;&lt;item endquery="false" field="assignment_group.x_pd_integration_pagerduty_service" goto="false" newquery="false" operator="ISNOTEMPTY" or="true" value=""/&gt;&lt;item endquery="false" field="cmdb_ci.name" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/&gt;&lt;item endquery="false" field="x_pd_integration_incident" goto="false" newquery="true" operator="CHANGESTO" or="false" value="---waiting---"/&gt;&lt;item endquery="false" field="x_pd_integration_incident" goto="false" newquery="false" operator="ISEMPTY" or="true" value=""/&gt;&lt;item endquery="false" field="x_pd_integration_incident" goto="false" newquery="false" operator="CHANGESTO" or="true" value="---reopened---"/&gt;&lt;item endquery="false" field="x_pd_integration_incident" goto="false" newquery="false" operator="=" or="true" value="---unlinked---"/&gt;&lt;item display_value="3,4,5" endquery="false" field="priority" goto="false" newquery="false" operator="IN" or="false" value="3,4,5"/&gt;&lt;item endquery="false" field="assignment_group.x_pd_integration_pagerduty_escalation" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/&gt;&lt;item display_value="7,8" endquery="false" field="state" goto="false" newquery="false" operator="NOT IN" or="false" value="7,8"/&gt;&lt;item endquery="false" field="assignment_group.name" goto="false" newquery="false" operator="=" or="false" value="NOC"/&gt;&lt;item endquery="false" field="assignment_group.name" goto="false" newquery="false" operator="=" or="true" value="CRE"/&gt;&lt;item endquery="false" field="cmdb_ci.name" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/&gt;&lt;item display_value="-- None --" endquery="false" field="priority" goto="false" newquery="false" operator="VALCHANGES" or="false" value=""/&gt;&lt;item endquery="false" field="assignment_group" goto="false" newquery="false" operator="VALCHANGES" or="true" value=""/&gt;&lt;item endquery="false" field="state" goto="false" newquery="false" operator="VALCHANGES" or="true" value=""/&gt;&lt;item endquery="false" field="cmdb_ci" goto="false" newquery="false" operator="VALCHANGES" or="true" value=""/&gt;&lt;item endquery="false" field="state" goto="false" newquery="true" operator="VALCHANGES" or="false" value=""/&gt;&lt;item endquery="false" field="x_pd_integration_incident" goto="false" newquery="false" operator="=" or="false" value="---reopened---"/&gt;&lt;item endquery="false" field="assignment_group.x_pd_integration_pagerduty_escalation" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/&gt;&lt;item display_value="7,8" endquery="false" field="state" goto="false" newquery="false" operator="NOT IN" or="false" value="7,8"/&gt;&lt;item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/&gt;&lt;/filter_condition&gt;&lt;is_rest&gt;false&lt;/is_rest&gt;&lt;message/&gt;&lt;name&gt;PD Incident Trigger&lt;/name&gt;&lt;order&gt;40&lt;/order&gt;&lt;priority&gt;100&lt;/priority&gt;&lt;rest_method/&gt;&lt;rest_method_text/&gt;&lt;rest_service/&gt;&lt;rest_service_text/&gt;&lt;rest_variables/&gt;&lt;role_conditions/&gt;&lt;script&gt;&lt;![CDATA[(function executeRule (current, previous /*null when async*/) {

  var epHelper = new x_pd_integration.EscalationPolicyHelper();
  var pdEpId = epHelper.getPDEscalationPolicyId(current.getValue('assignment_group'));
  if (!pdEpId) {
    return;
  }

  var eventName = 'x_pd_integration.trigger_incident';
  gs.debug('Firing event {0} for {1}', eventName, current.getDisplayValue());
  var currentUserSysid = gs.getUser().getID();

  var changeValue = false;
  if (gs.getProperty('x_pd_integration.sn2pd_mapping') === 'Configuration Items and Assignment Groups map to PagerDuty') {
    changeValue = (current.cmdb_ci.changes() || current.assignment_group.changes() || current.assigned_to.changes());
  } else {
    changeValue = (current.assignment_group.changes() || current.assigned_to.changes());
  }

  var params = currentUserSysid + ',' + current.operation() + ',' + changeValue;
  gs.eventQueue(eventName, current, current.work_notes.getJournalEntry(-1), params);

})(current, previous);
]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;PagerDuty_v8.1&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2022-05-06 13:56:44&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;e731726197d301106115bbc3f153af65&lt;/sys_id&gt;&lt;sys_mod_count&gt;13&lt;/sys_mod_count&gt;&lt;sys_name&gt;PD Incident Trigger&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="PagerDuty Incident Resolution Platform"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_e731726197d301106115bbc3f153af65&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-02-18 17:49:37&lt;/sys_updated_on&gt;&lt;template/&gt;&lt;when&gt;after&lt;/when&gt;&lt;/sys_script&gt;&lt;sys_translated_text action="delete_multiple" query="documentkey=e731726197d301106115bbc3f153af65"/&gt;&lt;sys_es_latest_script action="INSERT_OR_UPDATE"&gt;&lt;id&gt;e731726197d301106115bbc3f153af65&lt;/id&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2025-02-18 17:42:49&lt;/sys_created_on&gt;&lt;sys_id&gt;9a0293adc33b121040d0becdd40131ba&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-02-18 17:42:49&lt;/sys_updated_on&gt;&lt;table&gt;sys_script&lt;/table&gt;&lt;use_es_latest&gt;false&lt;/use_es_latest&gt;&lt;/sys_es_latest_script&gt;&lt;/record_update&gt;</payload>
<payload_hash>1692927410</payload_hash>
<remote_update_set display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Child">2dd0afe2c3ac221040d0becdd40131d1</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-03-31 04:08:31</sys_created_on>
<sys_id>61d0afe2c3ac221040d0becdd40131d6</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1951a2e02030000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-03-31 04:08:31</sys_updated_on>
<table>incident</table>
<target_name>PD Incident Trigger</target_name>
<type>Business Rule</type>
<update_domain>global</update_domain>
<update_guid>bd931be9d67b121004719f810412483c</update_guid>
<update_guid_history>bd931be9d67b121004719f810412483c:1692927410,4f129329dd7b1210da7a6b8fb4efbff8:1622071792,9602d769247b1210c57643ac4b4ad7d5:1268493138,653ce063438e52508e472834afd7aebe:949066728,8c68982f8bca5250e5f00c4e0c9487bc:1615799496,2cbddb4276ed521056c9c6db980751ce:-734327130,9571db86496d52107827ea5d34ae763d:1591587334,dc2eabf54ca9121055ac3ecdc84f55b5:1615799496,df985b6176570110fd4bf212366880f0:-153684763,25210e9cfa78de10e9b1dd3d4fef6a2c:-1564653133,7890829c8d78de1072b7884793fd1b66:386476627,73ffbd1c9878de10e88b24fbc777e8f6:-1564653133,907ff5d81378de1045a59e5a727d7244:1738265600,df985b6176570110fd4bf212366880f0:-153684763,0882132d6f170110a0f467f102c90e94:895458466,34125be9a2170110ed946284262f2f85:551138781,811153e9e51701104bf7ee7e32adee3e:-1681898706,a8623ae198d301109d807ec8a3419ec5:1376548081,4f327e218ed30110fcb1b236faad242a:-1818641215</update_guid_history>
<update_set display_value="" />
<view />
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</application>
<category>customer</category>
<comments />
<name>sys_script_b9fdb9cd4f9f8e00dd657bb28110c79e</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;&lt;sys_script action="INSERT_OR_UPDATE"&gt;&lt;abort_action&gt;false&lt;/abort_action&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;action_delete&gt;false&lt;/action_delete&gt;&lt;action_insert&gt;false&lt;/action_insert&gt;&lt;action_query&gt;false&lt;/action_query&gt;&lt;action_update&gt;true&lt;/action_update&gt;&lt;active&gt;true&lt;/active&gt;&lt;add_message&gt;false&lt;/add_message&gt;&lt;advanced&gt;true&lt;/advanced&gt;&lt;change_fields&gt;false&lt;/change_fields&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;collection&gt;incident&lt;/collection&gt;&lt;condition&gt;gs.isLoggedIn()&lt;/condition&gt;&lt;description/&gt;&lt;execute_function&gt;true&lt;/execute_function&gt;&lt;filter_condition table="incident"&gt;x_pd_integration_incidentISNOTEMPTY^assigned_toVALCHANGES^assigned_toISNOTEMPTY^x_pd_integration_incidentNOT LIKE---^stateNOT IN6,7,8^EQ&lt;item endquery="false" field="x_pd_integration_incident" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/&gt;&lt;item endquery="false" field="assigned_to" goto="false" newquery="false" operator="VALCHANGES" or="false" value=""/&gt;&lt;item endquery="false" field="assigned_to" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/&gt;&lt;item endquery="false" field="x_pd_integration_incident" goto="false" newquery="false" operator="NOT LIKE" or="false" value="---"/&gt;&lt;item display_value="6,7,8" endquery="false" field="state" goto="false" newquery="false" operator="NOT IN" or="false" value="6,7,8"/&gt;&lt;item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/&gt;&lt;/filter_condition&gt;&lt;is_rest&gt;false&lt;/is_rest&gt;&lt;message/&gt;&lt;name&gt;PD User Assign&lt;/name&gt;&lt;order&gt;200&lt;/order&gt;&lt;priority&gt;100&lt;/priority&gt;&lt;rest_method/&gt;&lt;rest_method_text/&gt;&lt;rest_service/&gt;&lt;rest_service_text/&gt;&lt;rest_variables/&gt;&lt;role_conditions/&gt;&lt;script&gt;&lt;![CDATA[function onAfter (current, previous) {

  if (current.priority.changes()) {
    gs.debug('{0}. Prevent rule from execution in favour of "PD Update Priority and Assignment" business rule that handle the case when Assignee and Priority are changing simultaneously.', current.getDisplayValue());
    return;
  }

  var eventName = 'x_pd_integration.assign_incident_user';
  if (x_pd_integration.TaskEntityHelper.isPdWebhook()) {
    gs.debug('Bypassing firing event {0} for {1} because source is PagerDuty', eventName, current.getDisplayValue());
    return;
  }

  gs.debug('Firing event {0} for {1}', eventName, current.getDisplayValue());
  var currentUserSysId = gs.getUser().getID();
  var assignedUserSysId = current.getValue('assigned_to');

  // prevent new assignee from being notified if assigning to self
  if (currentUserSysId == assignedUserSysId) {
    gs.debug('Skipping "PD User Assign" business rule since new assigned user: {0} is self {1}. Using "PD Ack on Self Assignment" business rule instead.', assignedUserSysId, currentUserSysId);
    return;
  }

  gs.eventQueue(eventName, current, assignedUserSysId, currentUserSysId);
}
]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;PagerDuty_v8.1&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2015-10-22 18:37:35&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;b9fdb9cd4f9f8e00dd657bb28110c79e&lt;/sys_id&gt;&lt;sys_mod_count&gt;28&lt;/sys_mod_count&gt;&lt;sys_name&gt;PD User Assign&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="PagerDuty Incident Resolution Platform"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_b9fdb9cd4f9f8e00dd657bb28110c79e&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;PagerDuty_v8.1&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2022-09-04 10:07:14&lt;/sys_updated_on&gt;&lt;template/&gt;&lt;when&gt;after&lt;/when&gt;&lt;/sys_script&gt;&lt;sys_translated_text action="delete_multiple" query="documentkey=b9fdb9cd4f9f8e00dd657bb28110c79e"/&gt;&lt;/record_update&gt;</payload>
<payload_hash>1270645964</payload_hash>
<remote_update_set display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Child">2dd0afe2c3ac221040d0becdd40131d1</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-03-31 04:08:31</sys_created_on>
<sys_id>65d0afe2c3ac221040d0becdd40131d5</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1951a530b430000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-03-31 04:08:31</sys_updated_on>
<table>incident</table>
<target_name>PD User Assign</target_name>
<type>Business Rule</type>
<update_domain>global</update_domain>
<update_guid>5edc9f2593bb1210a14b654c46ac65a3</update_guid>
<update_guid_history>5edc9f2593bb1210a14b654c46ac65a3:1270645964,fc164de87fb55110cdb0ab7cc4002004:-787768018,1de178068208301017bcdb0f9ce6d462:-845383938,75c487fcc029101086afb438326113cb:1074573907,75c487fcc029101086afb438326113cb:1074573907,a494accc0a136300a0c458f94a7e6e51:-1727824101,a494accc0a136300a0c458f94a7e6e51:-1727824101,a494accc0a136300a0c458f94a7e6e51:-1727824101</update_guid_history>
<update_set display_value="" />
<view />
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</application>
<category>customer</category>
<comments />
<name>sys_script_711057d94f93ce00dd657bb28110c75d</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;&lt;sys_script action="INSERT_OR_UPDATE"&gt;&lt;abort_action&gt;false&lt;/abort_action&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;action_delete&gt;false&lt;/action_delete&gt;&lt;action_insert&gt;false&lt;/action_insert&gt;&lt;action_query&gt;false&lt;/action_query&gt;&lt;action_update&gt;true&lt;/action_update&gt;&lt;active&gt;true&lt;/active&gt;&lt;add_message&gt;false&lt;/add_message&gt;&lt;advanced&gt;true&lt;/advanced&gt;&lt;change_fields&gt;false&lt;/change_fields&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;collection&gt;incident&lt;/collection&gt;&lt;condition&gt;gs.isLoggedIn()&lt;/condition&gt;&lt;description/&gt;&lt;execute_function&gt;true&lt;/execute_function&gt;&lt;filter_condition table="incident"&gt;x_pd_integration_incidentISNOTEMPTY^assignment_groupVALCHANGES^assignment_groupISNOTEMPTY^x_pd_integration_incidentNOT LIKE---^stateNOT IN6,7,8^EQ&lt;item endquery="false" field="x_pd_integration_incident" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/&gt;&lt;item endquery="false" field="assignment_group" goto="false" newquery="false" operator="VALCHANGES" or="false" value=""/&gt;&lt;item endquery="false" field="assignment_group" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/&gt;&lt;item endquery="false" field="x_pd_integration_incident" goto="false" newquery="false" operator="NOT LIKE" or="false" value="---"/&gt;&lt;item display_value="6,7,8" endquery="false" field="state" goto="false" newquery="false" operator="NOT IN" or="false" value="6,7,8"/&gt;&lt;item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/&gt;&lt;/filter_condition&gt;&lt;is_rest&gt;false&lt;/is_rest&gt;&lt;message/&gt;&lt;name&gt;PD Group Policy Assign&lt;/name&gt;&lt;order&gt;1100&lt;/order&gt;&lt;priority&gt;100&lt;/priority&gt;&lt;rest_method/&gt;&lt;rest_method_text/&gt;&lt;rest_service/&gt;&lt;rest_service_text/&gt;&lt;rest_variables/&gt;&lt;role_conditions/&gt;&lt;script&gt;&lt;![CDATA[function onAfter(current, previous) {

//   var epHelper = new x_pd_integration.EscalationPolicyHelper();
//   var pdEpId = epHelper.getPDEscalationPolicyId(current.getValue('assignment_group'));
//   if (!pdEpId)
//     return;

  if (current.assigned_to.changes() &amp;&amp; !gs.nil(current.assigned_to)) {
    gs.debug("{0} Aborting assignment rule update on PD since the assigned user has also changed, only send the user reassignment", current.getDisplayValue());
    return;
  }

  if (current.priority.changes()) {
    gs.debug("{0}. Prevent rule from execution in favour of \"PD Update Priority and Assignment\" business rule that handle the case when Assignment Group and Priority are changing simultaneously.", current.getDisplayValue());
    return;
  }

  var eventName = "x_pd_integration.assign_incident_policy";
  if (x_pd_integration.TaskEntityHelper.isPdWebhook()) {
    gs.debug("Bypassing firing event {0} for {1} because source is PagerDuty", eventName, current.getDisplayValue());
    return;
  }

  var currentUserSysId = gs.getUser().getID();
  gs.debug("Firing event {0} for {1}", eventName, current.getDisplayValue());
  gs.eventQueue(eventName, current, current.x_pd_integration_incident, currentUserSysId);
}]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;PagerDuty_v8.1&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2015-10-23 19:14:51&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;711057d94f93ce00dd657bb28110c75d&lt;/sys_id&gt;&lt;sys_mod_count&gt;29&lt;/sys_mod_count&gt;&lt;sys_name&gt;PD Group Policy Assign&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="PagerDuty Incident Resolution Platform"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_711057d94f93ce00dd657bb28110c75d&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;PagerDuty_v8.1&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-05-12 08:17:09&lt;/sys_updated_on&gt;&lt;template/&gt;&lt;when&gt;after&lt;/when&gt;&lt;/sys_script&gt;&lt;sys_translated_text action="delete_multiple" query="documentkey=711057d94f93ce00dd657bb28110c75d"/&gt;&lt;sys_es_latest_script action="INSERT_OR_UPDATE"&gt;&lt;id&gt;711057d94f93ce00dd657bb28110c75d&lt;/id&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2025-02-18 18:42:50&lt;/sys_created_on&gt;&lt;sys_id&gt;ddcf5369c3bb121040d0becdd40131c7&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-02-18 18:42:50&lt;/sys_updated_on&gt;&lt;table&gt;sys_script&lt;/table&gt;&lt;use_es_latest&gt;false&lt;/use_es_latest&gt;&lt;/sys_es_latest_script&gt;&lt;/record_update&gt;</payload>
<payload_hash>1315842201</payload_hash>
<remote_update_set display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Child">2dd0afe2c3ac221040d0becdd40131d1</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-03-31 04:08:31</sys_created_on>
<sys_id>69d0afe2c3ac221040d0becdd40131d4</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1951a5ebcb80000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-03-31 04:08:31</sys_updated_on>
<table>incident</table>
<target_name>PD Group Policy Assign</target_name>
<type>Business Rule</type>
<update_domain>global</update_domain>
<update_guid>29cfdba96bbb12105b99740b73af13bf</update_guid>
<update_guid_history>29cfdba96bbb12105b99740b73af13bf:1315842201,18c130067b083010a8db77ba83172d90:741906492,a12483fc4729101063e06bb67a2ad797:-1182053907,a12483fc4729101063e06bb67a2ad797:-1182053907,e7c8445829e950109f7fe91516f2da9a:-1999332152,cdadfb8c34a950106cda7ba026305dbb:-485423454,7bf7b680e6e5501069c7827f9997b8a2:-80731680,0067ba408be550100db266ecb7fae2e5:-1999332152,3bb5b2000ae550107682e61828871bf8:139770055,2a25ba8cf6a55010cd3ad39a3351b499:311384193,b14f2e4868a550100327b5c890b9a5b3:139770055,009cee840aa550104034fdc14e9162a8:-602096273,e3e15e219248101011b4c324d02f445b:1114758529,cdb15e2d78081010672f7b29e7a0cfdb:397487276,a894accc1a136300d362fa234ba72119:-1467572097,a894accc1a136300d362fa234ba72119:-1467572097,a894accc1a136300d362fa234ba72119:-1467572097</update_guid_history>
<update_set display_value="" />
<view />
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</application>
<category>customer</category>
<comments />
<name>sys_script_include_e4398d454f9f8e00dd657bb28110c794</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;public&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_pd_integration.PagerDuty&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description&gt;/*** Changes made to this script are not supported by PagerDuty ***/&amp;#13;
PagerDuty integration methods&lt;/description&gt;&lt;mobile_callable&gt;false&lt;/mobile_callable&gt;&lt;name&gt;PagerDuty&lt;/name&gt;&lt;sandbox_callable&gt;false&lt;/sandbox_callable&gt;&lt;script&gt;&lt;![CDATA[/*** Changes made to this script are not supported by PagerDuty ***/
/* eslint no-underscore-dangle: 0 */
var PagerDuty = Class.create();
PagerDuty.prototype = {
  initialize: function () {
    this.clientName = 'ServiceNow';
    this._errorMsg = '';
    this._hasError = false;

    this._autoProvisionUsers = gs.getProperty('x_pd_integration.auto_provision_users');
    this.assignOnAckOnly = gs.getProperty('x_pd_integration.assign_on_ack_only');
    this.closeOnUnknownUserGroup = gs.getProperty('x_pd_integration.close_incident_on_unknown');
    this.defaultUserID = gs.getProperty('x_pd_integration.default_user');
    this.sn2pdMappingCIAG = 'Configuration Items and Assignment Groups map to PagerDuty';
    this.sn2pdMappingAG = 'Assignment Groups map to PagerDuty';
    this.sn2pdMapping = gs.getProperty('x_pd_integration.sn2pd_mapping');
    this.defaultServiceID = gs.getProperty('x_pd_integration.default_service');
    this.triggerIncidentBodyTemplate = gs.getProperty('x_pd_integration.incident_body_template');
    this.baseUrl = gs.getProperty('glide.servlet.uri');
  },

  /**
   * Get PagerDuty ID for a user from PagerDuty if needed
   * @param {String} user email address
   * @return {String} PagerDuty user ID
   */
  getUserIdByEmail: function (email, sysid) {
    var me = 'getUserIdByEmail';
    if (gs.nil(email)) {
      return;
    }

    var emailLowerCase = email.toLowerCase();
    gs.debug('{0} for {1}', me, emailLowerCase);

    var feature = 'users?query=' + gs.urlEncode(emailLowerCase);
    var rest = new x_pd_integration.PagerDuty_REST();

    var response = rest.getREST(feature, {});
    var responseBody = response.haveError() ? rest.extractPagerDutyErrorResponse(response) : response.getBody();
    var status = response.getStatusCode();
    gs.debug('{0} response: {1}:{2}', me, status, responseBody);

    if (status === 200) {
      var body = global.JSON.parse(response.getBody());
      var user;
      for (var i = 0; i &lt; body.users.length; i++) {
        if (body.users[i].email === emailLowerCase) {
          user = body.users[i];
          break;
        }
      }

      if (gs.nil(user)) {
        this._setError(me, 'PagerDuty could not find user for email ' + email);
        return;
      }
      var userId = user.id;
      if (!gs.nil(userId)) {
        // add id to user so we don't have to ask again
        this._updateUser(sysid, userId);
        return userId;
      }
    }
  },

  /**
   * Get Email for a user, either from database or PagerDuty if needed
   * @param {String} user PD id
   * @return {String} PagerDuty user email
   */
  getUserEmailByPDID: function (userID) {
    var me = 'getUserEmailByPDID';
    if (gs.nil(userID)) {
      return;
    }
    gs.debug('{0} for {1}', me, userID);

    var userEmail;
    var user = new GlideRecordSecure('sys_user');
    if (user.isValidField('x_pd_integration_pagerduty_id') &amp;&amp; user.isValidField('email')) {
      user.addQuery('x_pd_integration_pagerduty_id', userID);
      user.setLimit(1);
      user.query();
      if (user.next()) {
        userEmail = user.getValue('email');
      }
    }

    if (gs.nil(userEmail)) {
      userEmail = this.getUserEmailFromPagerDuty(userID);
    }
    return userEmail;
  },

  getUserEmailFromPagerDuty: function (userID) {
    var me = 'getUserEmailFromPagerDuty';
    var feature = 'users/' + userID;
    var rest = new x_pd_integration.PagerDuty_REST();

    var response = rest.getREST(feature);
    var status = response.getStatusCode();

    if (status === 200) {
      var body = global.JSON.parse(response.getBody());
      if (gs.nil(body.user)) {
        this._setError(me, 'PagerDuty could not find user ' + userID);
        return;
      }
      return body.user.email;
    }
  },

  /**
   * Get user name given Pager user id
   * @param (String) user id
   * @return {String} user name
   */
  getUserNameByPDID: function (userID) {
    var me = 'getUserNameByPDID';
    if (gs.nil(userID)) {
      return;
    }
    gs.debug('{0} for {1}', me, userID);

    var userName;
    var user = new GlideRecordSecure('sys_user');
    if (user.isValidField('x_pd_integration_pagerduty_id') &amp;&amp; user.isValidField('email')) {
      user.addQuery('x_pd_integration_pagerduty_id', userID);
      user.setLimit(1);
      user.query();
      if (user.next()) {
        userName = user.getValue('name');
      }
    }

    if (gs.nil(userName)) {
      var feature = 'users/' + userID;
      var rest = new x_pd_integration.PagerDuty_REST();

      var response = rest.getREST(feature);
      var responseBody = response.haveError() ? rest.extractPagerDutyErrorResponse(response) : response.getBody();
      var status = response.getStatusCode();
      gs.debug('{0} response: {1}:{2}', me, status, responseBody);

      if (status === 200) {
        var body = global.JSON.parse(response.getBody());
        if (gs.nil(body.user)) {
          this._setError(me, 'PagerDuty could not find user ' + userID);
          return;
        }
        userName = body.user.name;
      }
    }
    return userName;
  },

  /**
   * Get the PagerDuty user's role
   * @param (String) PagerDuty user ID
   * @return {String} PagerDuty user's role
   */
  getUserRoleByPDID: function (userID) {
    var me = 'getUserRoleByPDID';
    var feature = 'users/' + userID;
    var rest = new x_pd_integration.PagerDuty_REST();

    var response = rest.getREST(feature);
    var responseBody = response.haveError() ? rest.extractPagerDutyErrorResponse(response) : response.getBody();
    var status = response.getStatusCode();
    gs.debug('{0} response: {1}:{2}', me, status, responseBody);

    if (status === 200) {
      var body = global.JSON.parse(response.getBody());
      if (gs.nil(body.user)) {
        this._setError(me, 'PagerDuty could not find user ' + userID);
        return null;
      }
      return body.user.role;
    }
    return null;
  },

  /**
   * Call PagerDuty API to get incident assignees' IDs
   * @param {String} PagerDuty user's email to send in a "From" header
   * @param {String} PagerDuty incident ID
   * @return {Array} Objects with assignments data
   */
  getIncidentAssignments: function (requester, incidentId) {
    var me = 'getIncidentAssignments';
    gs.debug('{0} for {1}', me, incidentId);
    var feature = 'incidents/' + incidentId;
    var rest = new x_pd_integration.PagerDuty_REST();
    var response = rest.getREST(feature, {}, requester);

    var responseBody = response.haveError() ? rest.extractPagerDutyErrorResponse(response) : response.getBody();
    var status = response.getStatusCode();
    gs.debug('{0} response: {1}:{2}', me, status, responseBody);


    if (status !== 200) {
      gs.warn('GET incident assignments failed. Status: ' + status + '; Message: ' +
        responseBody + '; Query: ' + feature);
      throw new Error(responseBody);
    }

    var body = global.JSON.parse(responseBody);
    gs.debug('body.incident.assignments : ' + global.JSON.stringify(body.incident.assignments));

    return body.incident.assignments;
  },

  /**
   * Get PagerDuty Team members
   * @param {String} PagerDuty user's email to send in a "From" header
   * @param {String} PagerDuty Team ID
   * @return {Array} Objects with data about the PagerDuty Team members
   */
  getIncidentTeamUsers: function (requester, pdTeamId) {
    var teamMembers;
    var me = 'getIncidentTeamUsers';
    if (gs.nil(pdTeamId)) {
      return null;
    }

    var feature = 'teams/' + pdTeamId + '/members';
    var rest = new x_pd_integration.PagerDuty_REST();

    var response = rest.getREST(feature, {}, requester);
    var responseBody = response.haveError() ? rest.extractPagerDutyErrorResponse(response) : response.getBody();
    var status = response.getStatusCode();
    gs.debug('{0} response: {1}:{2}', me, status, responseBody);

    if (status === 200) {
      var body = global.JSON.parse(response.getBody());
      if (gs.nil(body.members)) {
        this._setError(me, 'PagerDuty could not find team members ' + pdTeamId);
        return null;
      }
      teamMembers = body.members;
    }
    return teamMembers;
  },

  /**
   * Get team name given Pager team id
   * @param (String) team id
   * @return {String} team name
   */
  getTeamNameByPDID: function (teamID) {
    var me = 'getTeamNameByPDID';
    if (gs.nil(teamID)) {
      return;
    }
    gs.debug('{0} for {1}', me, teamID);

    var teamName;
    var feature = 'teams/' + teamID;
    var rest = new x_pd_integration.PagerDuty_REST();

    var response = rest.getREST(feature);
    var responseBody = response.haveError() ? rest.extractPagerDutyErrorResponse(response) : response.getBody();
    var status = response.getStatusCode();
    gs.debug('{0} response: {1}:{2}', me, status, responseBody);

    if (status === 200) {
      var body = global.JSON.parse(response.getBody());
      if (gs.nil(body.team)) {
        this._setError(me, 'PagerDuty could not find team ' + teamID);
        return;
      }
      teamName = body.team.name;
    }
    return teamName;
  },

  /**
   * Get valid PD email address of current user or default user
   * @param (String) current system user id
   * @return {String} email address
   */
  getValidEmail: function (currentUserSysid) {
    var me = 'getValidEmail';
    var currentUserEmail;

    if (gs.nil(currentUserSysid) || currentUserSysid === 'system' || currentUserSysid === 'guest') {
      this._setError(me, 'Invalid current user sysid, fallback to default user');
      currentUserEmail = this.getUserEmailByPDID(this.defaultUserID);
    } else {
      var currentUser = new GlideRecordSecure('sys_user');
      if (!currentUser.get(currentUserSysid)) {
        this._setError(me, 'Invalid current user sysid, fallback to default user');
        currentUserEmail = this.getUserEmailByPDID(this.defaultUserID);
      } else {
        // get user info from sys_userv
        currentUserEmail = currentUser.getValue('email');
        var currentUserID = currentUser.getValue('x_pd_integration_pagerduty_id');
        if (gs.nil(currentUserID)) {
          this._setError(me, 'Current user sysid is not mapped to PagerDuty user, fallback to default user');
          currentUserEmail = this.getUserEmailByPDID(this.defaultUserID);
        } else if (gs.nil(currentUserEmail)) {
          currentUserEmail = this.getUserEmailByPDID(currentUserID);
        }
      }
    }
    gs.debug('{0} Local user "{1}" -&gt; PD email "{2}"', me, currentUserSysid, currentUserEmail);
    return currentUserEmail;
  },

  /**
   * Get a user's PagerDuty ID
   * if not in user record, either auto-provision or use default user property
   * @param {String} value to query for
   * @param {String} field on sys_user table to query
   * @return {String} PagerDuty ID for the user
   */
  getUserIDFromFieldData: function (userData, userField, useDefault) {
    var me = 'getUserIDFromFieldData';
    if (gs.nil(userData) || gs.nil(userField)) {
      gs.error(
        '{0} error, missing user data:{1} or field:{2} to query, using default user ID {3}',
        me, userData, userField, this.defaultUserID
      );
      if (!gs.nil(this.defaultUserID)) {
        return this.defaultUserID;
      }
      gs.error('{0} could not find user {1} and useDefault user property was empty', me, userData);
    }

    // check the sys_user record for id
    var user = new GlideRecordSecure('sys_user');
    if (!user.isValidField(userField)) {
      gs.error('{0} error querying for {1}={2}, invalid field', me, userField, userData);
      return;
    }
    user.addQuery(userField, userData);
    user.setLimit(1);
    user.query();
    if (!user.next()) {
      gs.error('{0}: user record for {1}={2} could not be found', me, userField, userData);
      return;
    }

    gs.debug('{0} found user {1}, PagerDuty_id={2}', me, user.getDisplayValue(), user.getValue('x_pd_integration_pagerduty_id'));
    var userID = user.getValue('x_pd_integration_pagerduty_id');
    if (!gs.nil(userID)) {
      gs.debug('{0} found current userID {1} in user record for {2}', me, userID, user.getDisplayValue());
      return userID;
    }

    // query PagerDuty for user based on email
    var email = user.getValue('email');
    userID = this.getUserIdByEmail(email, user.getUniqueValue());
    if (!gs.nil(userID)) {
      gs.debug('{0} found current userID {1} in PagerDuty based on email {2}', me, userID, email);
      return userID;
    }

    // auto provision user if enabled
    if (this._autoProvisionUsers === 'true') {
      gs.info(
        '{0} user {1} does not have a PagerDuty ID, auto-provisioning enabled, attempting to create it',
        me, user.getDisplayValue()
      );
      var pdp = new x_pd_integration.PagerDutyProvisioning();
      userID = pdp.provisionUser(user);

      gs.debug('{0} provisioned new user {1}:{2}', me, user.getDisplayValue(), userID);
      return userID;
    }

    // attempt to use default user from property
    if (!useDefault) {
      gs.info('{0} could not find user {1} and useDefault parameter was set to false', me, userField);
      return;
    }

    if (!gs.nil(this.defaultUserID)) {
      gs.debug('{0} using default user property {1}', me, this.defaultUserID);
      return this.defaultUserID;
    }
    gs.error('{0} could not find user {1} and useDefault user property was empty', me, userData);
  },

  /**
   * Creates PagerDuty incident
   * @param {GlideRecord} grIncident - incident record
   * @param {String} workNotes - ServiceNow incident work notes
   * @param {String} params - comma-separated params:
   * 0 - current user sys_id
   * 1 - operation (insert or update)
   * 2 - indicator ("true" or "false") of fields changes (assignment group, assignee, or configuration item)
   */
  triggerIncident: function (grIncident, workNotes, params) {
    var me = 'triggerIncident';
    if (!grIncident.isValidRecord()) {
      gs.error('Invalid GlideRecordSecure passed to triggerIncident()');
      return;
    }
    var display = this.displayIncidentTriggeringNote();

    var paramsArray = params.split(',');
    var currentUserSysId = paramsArray[0];
    var operation = paramsArray[1];
    var changeValue = (paramsArray[2] === 'true');
    gs.debug(
      '{0} | mapping option: {1}, currentUserSysId: {2}, current operation: {3}, changeValue: {4}',
      me, this.sn2pdMapping, currentUserSysId, operation, changeValue
    );

    var notes = '';
    var serviceId = '';
    var webhookId = '';
    var isServiceMapped = false;
    var isEscalationPolicyMapped = false;
    var isAssignedToMapped = false;
    var isAssignedToEmpty = gs.nil(grIncident.getValue('assigned_to'));
    var serviceType = '';
    var serviceName = '';
    var serviceTableName = '';
    var grObj;

    if (this.sn2pdMapping === this.sn2pdMappingCIAG) {
      serviceType = 'configuration item';
      serviceTableName = 'cmdb_ci';
      if (!gs.nil(grIncident.getValue('cmdb_ci'))) {
        grObj = grIncident.cmdb_ci.getRefRecord();
        serviceId = String(grIncident.cmdb_ci.x_pd_integration_pagerduty_service);
        webhookId = String(grIncident.cmdb_ci.x_pd_integration_pagerduty_webhook);
        serviceName = grIncident.getDisplayValue('cmdb_ci');
      }
      // fallback for PagerDuty service ID: Configuration item &gt; Assignment group
      if (gs.nil(serviceId)) {
        if (!gs.nil(grIncident.assignment_group.x_pd_integration_pagerduty_service)) {
          grObj = grIncident.assignment_group.getRefRecord();
          serviceId = String(grIncident.assignment_group.x_pd_integration_pagerduty_service);
          webhookId = String(grIncident.assignment_group.x_pd_integration_pagerduty_webhook);
          serviceName = grIncident.getDisplayValue('assignment_group');
        } else {
          // use Default Service ID set on the PagerDuty Settings page
          serviceId = this.defaultServiceID;
          if (!gs.nil(serviceId)) {
            // get the service name for the default service
            serviceName = this.getPdServiceName(serviceId);
            if (gs.nil(serviceName)) {
              if (changeValue) {
                gs.debug('{0} Default PagerDuty service {0} is not valid', me, serviceId);
                notes = gs.getMessage('Default PagerDuty service {0} is not valid', [serviceId]);
                this._setError(me, notes);
                this._addIncidentWorkNote(grIncident, notes);
              }
              this._clearPDIncident(grIncident);
              return;
            }
          }
        }
      }
    } else {
      serviceType = 'assignment group';
      serviceTableName = 'sys_user_group';
      if (!gs.nil(grIncident.getValue('assignment_group'))) {
        grObj = grIncident.assignment_group.getRefRecord();
        serviceId = String(grIncident.assignment_group.x_pd_integration_pagerduty_service);
        webhookId = String(grIncident.assignment_group.x_pd_integration_pagerduty_webhook);
        serviceName = grIncident.getDisplayValue('assignment_group');
      } else {
        // Skip if the mapping is AG and the assignment_group is empty
        this._clearPDIncident(grIncident);
        return;
      }
    }

    if (!gs.nil(serviceId)) {
      isServiceMapped = true;
    }

    var epHelper = new x_pd_integration.EscalationPolicyHelper();
    epHelper.setIncidentId(grIncident.sys_id);
    var snPriorityId = epHelper.getIncidentSnPriorityId();
    var escalationPolicyId = epHelper.getPDEscalationPolicyIdWithPriority(grIncident.getValue('assignment_group'), snPriorityId);

    if (!gs.nil(escalationPolicyId)) {
      isEscalationPolicyMapped = true;
    }

    var assignedToUserId;
    var assignedToUserSysId = grIncident.getValue('assigned_to');
    var assignedToUserDisplay = grIncident.getDisplayValue('assigned_to');
    if (!gs.nil(assignedToUserSysId)) {
      var assignedToUser = new GlideRecordSecure('sys_user');
      if (!assignedToUser.get(assignedToUserSysId)) {
        this._setError(me, 'Invalid assigned to user sys_id passed, aborting');
        this._clearPDIncident(grIncident);
        return;
      }
      var assignedToUserEmail = assignedToUser.getValue('email');
      assignedToUserId = assignedToUser.getValue('x_pd_integration_pagerduty_id');
      if (gs.nil(assignedToUserId)) {
        if (!gs.nil(assignedToUserEmail)) {
          assignedToUserId = this.getUserIDFromFieldData(assignedToUserEmail, 'email', true);
		// Custom here to use default User as Assigne To when not found  
		} else {
			assignedToUserId = this.defaultUserID;
		}
		// Custom to look for User to check if PD ID is valid
      } else {
		if(!this.isValidPDUserID(assignedToUserId)) {
			assignedToUserId = this.defaultUserID;
        }
      }
      if (!gs.nil(assignedToUserId)) {
        isAssignedToMapped = true;
      }
    }
    gs.debug(
      '{0} | isAssignedToMapped: {1}, isAssignedToEmpty: {2}, isServiceMapped: {3}, isEscalationPolicyMapped: {4}',
      me, isAssignedToMapped, isAssignedToEmpty, isServiceMapped, isEscalationPolicyMapped
    );
    if (this.sn2pdMapping === this.sn2pdMappingCIAG) {
      if ((!isAssignedToMapped &amp;&amp; !isAssignedToEmpty) || (!isServiceMapped) || (!isEscalationPolicyMapped)) {
        if (changeValue) {
          notes += 'PagerDuty incident was not created as the following items are not mapped to PagerDuty:';
          if (!isServiceMapped) {
            notes = notes + '\nConfiguration Item: ' + grIncident.cmdb_ci.getDisplayValue();
          }
          if (!isEscalationPolicyMapped) {
            notes = notes + '\nGroup: ' + grIncident.assignment_group.getDisplayValue();
          }
          if (!isAssignedToMapped &amp;&amp; !isAssignedToEmpty) {
            notes = notes + '\nAssigned To User: ' + assignedToUserDisplay;
          }
          this._setError(me, notes);
          this._addIncidentWorkNote(grIncident, notes);
        }
        this._clearPDIncident(grIncident);
        return;
      }
    }
    if (this.sn2pdMapping === this.sn2pdMappingAG) {
      if ((!isAssignedToMapped &amp;&amp; !isAssignedToEmpty) || (!isServiceMapped)) {
        if (changeValue) {
          notes = 'PagerDuty incident was not created as the following items are not mapped to PagerDuty:';
          if (!isServiceMapped) {
            notes = notes + '\nGroup: ' + grIncident.assignment_group.getDisplayValue();
          }
          if (!isAssignedToMapped &amp;&amp; !isAssignedToEmpty) {
            notes = notes + '\nAssigned To User: ' + assignedToUserDisplay;
          }
          this._setError(me, notes);
          this._addIncidentWorkNote(grIncident, notes);
        }
        this._clearPDIncident(grIncident);
        return;
      }
    }

    // If CI/Group (depending on mapping type) set in the incident form doesn't contain Webhook ID,
    // at first initiated webhook subscription search in PagerDuty by service ID.
    // If not found, the webhook gets automatically provisioned.
    if (gs.nil(webhookId) &amp;&amp; !gs.nil(grObj)) {
      webhookId = this.searchWebhookByServiceId(serviceId);
      if (gs.nil(webhookId)) {
        webhookId = this.provisionWebhook(grObj, serviceId);
        if (gs.nil(webhookId) &amp;&amp; (changeValue)) {
          notes = gs.getMessage(
            'Incident {0} {1} {2} does not have a PagerDuty Webhook ID value',
            [grIncident.getDisplayValue(), serviceType, serviceName]
          );
          this._setError(me, notes);
          this._addIncidentWorkNote(grIncident, notes);
          this._clearPDIncident(grIncident);
          return;
        }
        // continue
      }
      if (webhookId) {
        this.updateWebhookId(grObj, serviceId, webhookId);
      }
    }
    gs.debug(
      '{0} | serviceType: {1}, serviceName: {2}, serviceTableName: {3}',
      me, serviceType, serviceName, serviceTableName
    );

    var currentUserEmail = this.getValidEmail(currentUserSysId);
    var url = this.baseUrl + grIncident.getLink();

    var description = grIncident.getValue('number') + ':' + grIncident.getValue('short_description');

    var details =
      this.triggerIncidentBodyTemplate
        .replace(/{.*?}/g, function (name) {
          try {
            name = name.slice(1, -1);
            var val = null;
            if (name === 'workNote') {
              val = workNotes;
            } else {
              val = grIncident.getDisplayValue(name);
            }
            return val;
          } catch (e) {
            return 'Failed to evaluate template {' + name + '}';
          }
        });

    var pdPriorityId = '';
    var pdUrgency = '';
    var grPdPriority = new GlideRecordSecure('x_pd_integration_pagerduty_priority');
    grPdPriority.addQuery('priority', grIncident.priority);
    grPdPriority.addNotNullQuery('pagerduty_priority_id');
    grPdPriority.query();
    if (grPdPriority.next()) {
      pdPriorityId = String(grPdPriority.pagerduty_priority_id);
      pdUrgency = String(grPdPriority.pagerduty_urgency);
    }
    gs.debug(
      'ServiceNow incident priority: {0}, pdPriorityId: {1}, pdUrgency: {2}',
      grIncident.priority, pdPriorityId, pdUrgency
    );

    var incidentBody = {
      type: 'incident',
      title: description,
      service: {
        id: serviceId,
        type: 'service_reference'
      },
      body: {
        type: 'incident_body',
        details: details
      }
    };
	// Case XXXXX - Custom to set Assigned To
	// We are always setting Assignment Group during creation 
	// and updating Assigned To when filled in
    // if (!gs.nil(assignedToUserId)) {
    //   incidentBody.assignments = [{
    //     assignee: {
    //       id: assignedToUserId,
    //       type: 'user_reference'
    //     }
    //   }];
    // } else 
	
	if (escalationPolicyId) {
      incidentBody.escalation_policy = {
        id: escalationPolicyId,
        type: 'escalation_policy_reference'
      };
    }

    if (!gs.nil(pdPriorityId)) {
      pdPriorityId = String(pdPriorityId);
      incidentBody.priority = {
        id: pdPriorityId,
        type: 'priority'
      };
    }

    if (!gs.nil(pdUrgency)) {
      pdUrgency = String(pdUrgency);
      incidentBody.urgency = pdUrgency;
    }

    // the following insert may be a noop if the incident reference already exists (e.g. when reopening a SN incident)
    x_pd_integration.TaskEntityHelper.insertDefaultIncTypeReferenceIfRefNotFound(grIncident);
    // here we get the value after we set it because of before BRs setting a new incident type
    var incidentType = x_pd_integration.TaskEntityHelper.getIncidentTypeFromReference(grIncident);
    if (!gs.nil(incidentType) &amp;&amp; !gs.nil(incidentType.id)) {
      incidentBody.incident_type = incidentType;
    }

    var postBody = {
      incident: incidentBody
    };

    var feature = 'incidents';
    var rest = new x_pd_integration.PagerDuty_REST();
    var response = rest.postREST(feature, postBody, currentUserEmail, url);
    var responseBody = response.getBody();
    var status = response.getStatusCode();
    gs.debug('{0} | response: {1}:{2}', me, status, responseBody);

    if (rest.hasError()) {
      notes = gs.getMessage('PagerDuty REST failed to trigger an incident ({0})', rest.getError());
      this._setError(me, notes);
      this._addIncidentWorkNote(grIncident, notes);
      this._clearPDIncident(grIncident);
      x_pd_integration.TaskEntityHelper.deleteIncidentTypeReference(grIncident);
      return;
    }

    if (response.haveError()) {
      this._setError(this._generateInternalErrorMessage(me, status, rest.extractPagerDutyErrorResponse(response)));

      // Starting custom code - Reprocess in case of missing privileges
      var customErrorMessage = rest.extractPagerDutyErrorResponse(response);
      if (customErrorMessage.contains('Service not found')) {
        return;
      } else if (customErrorMessage.contains('User Not Found')) {
        this.triggerIncident(grIncident, workNotes, 'system');
        return;
      }
      // End of custom code

      this._addIncidentWorkNote(grIncident, this._generateNoteErrorMessage('PagerDuty REST failed to trigger an incident: ', rest.extractPagerDutyErrorResponse(response)));
      this._clearPDIncident(grIncident);
      x_pd_integration.TaskEntityHelper.deleteIncidentTypeReference(grIncident);
      return;
    }

    if (status === 200 || status === 201) {
      gs.debug('{0} | for {1}, response body: {2}', me, grIncident.getDisplayValue(), response.getBody());

      var body = global.JSON.parse(response.getBody());
      var incidentKey = body.incident.incident_key;
      var incidentId = body.incident.id;
      var incidentAssignments = body.incident.assignments;
      gs.debug('{0} | incidentKey: {1}, incidentId: {2}', me, incidentKey, incidentId);

      // app v3.1: incident_key for webhook import coalescing
      grIncident.x_pd_integration_incident_key = incidentKey;
      x_pd_integration.TaskEntityHelper.setPdId(grIncident, incidentId);

      // Case XXXXX - Custom to set Assigned To
      // We are always setting Assignment Group during creation 
      // and updating Assigned To when filled in
      if (!gs.nil(assignedToUserId)) {
        this.assignIncidentToUser(grIncident, assignedToUserSysId, currentUserSysId);
      }
      // End of custom to set Assigned To

      var workNoteText = '';
      var assignedPagerDutyUsers = [];
      incidentAssignments.forEach(function (item) {
        assignedPagerDutyUsers.push(item.assignee.summary);
      });

      // Set incident metadata to link ServiceNow incident on PD Incident view
      this.addIncidentMetadataReference(grIncident, incidentId, currentUserEmail);
      // CUSTOM HERE - Adding PD Incident Number in the notes
      if (this.sn2pdMapping === this.sn2pdMappingCIAG) {
        if (incidentAssignments.length &gt; 0) {
          workNoteText = gs.getMessage(
            'PagerDuty created incident ' + incidentId + ' for the configuration item {0} and group {1} and assigned it to {2}',
            [serviceName, grIncident.getDisplayValue('assignment_group'), assignedPagerDutyUsers.join(', ')]
          );
        } else {
          // redundant condition since PagerDuty escalation policy should have at least 1 target
          workNoteText = gs.getMessage(
            'PagerDuty created incident ' + incidentId + ' for the configuration item {0} and group {1}',
            [serviceName, grIncident.getDisplayValue('assignment_group')]
          );
        }
      }
      if (this.sn2pdMapping === this.sn2pdMappingAG) {
        if (incidentAssignments.length &gt; 0) {
          workNoteText = gs.getMessage(
            'PagerDuty created incident ' + incidentId + ' for group {0} and assigned it to {1}',
            [grIncident.getDisplayValue('assignment_group'), assignedPagerDutyUsers.join(', ')]
          );
        } else {
          // redundant condition since PagerDuty escalation policy should have at least 1 target
          workNoteText = gs.getMessage(
            'PagerDuty created incident ' + incidentId + ' for group {0}',
            grIncident.getDisplayValue('assignment_group')
          );
        }
      }
      // END OF CUSTOM HERE - Adding PD Incident Number in the notes
      if (display !== 'false') {
        grIncident.work_notes = x_pd_integration.WorkNotesHelper.build(workNoteText);
      }
      if (x_pd_integration.TaskEntityHelper.isTaskHasResolvedState(grIncident.sys_class_name, grIncident.state)) {
        this.resolveIncident(grIncident, currentUserSysId);
      }

      grIncident.update();

      // update PagerDuty custom fields
      var cfOutboundProcessor = new x_pd_integration.PagerDutyCustomFieldsOutboundSync();
      cfOutboundProcessor.updateAllPdCustomFields(grIncident, incidentId);
    } else {
      this._setError(this._generateInternalErrorMessage(me, status, rest.extractPagerDutyErrorResponse(response)));
      // Starting custom code - Reprocess in case of missing privileges
      var customErrorMessage2 = rest.extractPagerDutyErrorResponse(response);
      if (customErrorMessage2.contains('Service not found')) {
        return;
      } else if (customErrorMessage2.contains('User Not Found')) {
        this.triggerIncident(grIncident, workNotes, 'system');
        return;
      }
      // End of custom code
      this._addIncidentWorkNote(grIncident, this._generateNoteErrorMessage('PagerDuty REST failed to trigger an incident: ', rest.extractPagerDutyErrorResponse(response)));
      this._errorPDIncident(grIncident);
    }
  },

  /**
   * Resolves linked PagerDuty incident
   * @param {GlideRecord} grIncident - incident record
   * @param {String} currentUserSysId - current user sys_id
   */
  resolveIncident: function (grIncident, currentUserSysId) {
    var me = 'resolveIncident';
    var notes = '';

    gs.debug('{0} | {1}', me, grIncident.getDisplayValue());

    var currentUserEmail = this.getValidEmail(currentUserSysId);

    var incidentId = x_pd_integration.TaskEntityHelper.getPdId(grIncident);
    var feature = 'incidents/' + incidentId;

    var body = {
      incident: {
        type: 'incident_reference',
        status: 'resolved'
      }
    };

    var rest = new x_pd_integration.PagerDuty_REST();
    var clientUrl = this.baseUrl + grIncident.getLink();
    var response = rest.putREST(feature, body, currentUserEmail, clientUrl);

    var responseBody = response.getBody();
    var status = response.getStatusCode();
    gs.debug('{0} | response: {1}:{2}', me, status, responseBody);

    if (response.haveError()) {
      this._setError(this._generateInternalErrorMessage(me, status, rest.extractPagerDutyErrorResponse(response)));
      // Starting custom code - Reprocess in case of missing privileges
      var customErrorMessage = rest.extractPagerDutyErrorResponse(response);
      if (customErrorMessage.contains('not authorized') || customErrorMessage.contains('User Not Found')) {
        this.resolveIncident(grIncident, 'system');
        return;
      }
      // End of custom code
      this._addIncidentWorkNote(grIncident, this._generateNoteErrorMessage('PagerDuty error during resolve: ', rest.extractPagerDutyErrorResponse(response)));
      return;
    }

    if (status === 200) {
      notes = gs.getMessage('Resolving PagerDuty incident');
      this._addIncidentWorkNote(grIncident, notes);
    } else {
      this._setError(this._generateInternalErrorMessage(me, status, rest.extractPagerDutyErrorResponse(response)));
      // Starting custom code - Reprocess in case of missing privileges
      var customErrorMessage2 = rest.extractPagerDutyErrorResponse(response);
      if (customErrorMessage2.contains('not authorized') || customErrorMessage2.contains('User Not Found')) {
        this.resolveIncident(grIncident, 'system');
        return;
      }
      // End of custom code
      this._addIncidentWorkNote(grIncident, this._generateNoteErrorMessage('PagerDuty error during resolve: ', rest.extractPagerDutyErrorResponse(response)));
    }
  },

  /**
   * Acknowledges PagerDuty incident
   * @param {GlideRecord} grIncident - incident record
   * @param {String} assignedUserSysId - assignee's sys_id
   */
  acknowledgeIncident: function (grIncident, assignedUserSysId) {
    var me = 'acknowledgeIncident';
    var notes = '';

    gs.debug('{0} | {1}', me, grIncident.getDisplayValue());

    var assignedUserEmail = this.getValidEmail(assignedUserSysId);

    var incidentId = x_pd_integration.TaskEntityHelper.getPdId(grIncident);
    var feature = 'incidents/' + incidentId;

    var body = {
      incident: {
        type: 'incident_reference',
        status: 'acknowledged'
      }
    };

    var rest = new x_pd_integration.PagerDuty_REST();
    var clientUrl = this.baseUrl + grIncident.getLink();
    var response = rest.putREST(feature, body, assignedUserEmail, clientUrl);

    var responseBody = response.getBody();

    var status = response.getStatusCode();
    gs.debug('{0} | response: {1}:{2}', me, status, responseBody);

    if (response.haveError()) {
      this._setError(this._generateInternalErrorMessage(me, status, rest.extractPagerDutyErrorResponse(response)));
      // Starting custom code - Reprocess in case of missing privileges
      var customErrorMessage = rest.extractPagerDutyErrorResponse(response);
      if (customErrorMessage.contains('not authorized') || customErrorMessage.contains('User Not Found')) {
        this.acknowledgeIncident(grIncident, 'system');
        return;
      }
      // End of custom code
      this._addIncidentWorkNote(grIncident, this._generateInternalErrorMessage('PagerDuty error during acknowledgement: ', rest.extractPagerDutyErrorResponse(response)));
      return;
    }

    if (status === 200) {
      notes = gs.getMessage('Acknowledging PagerDuty incident');
      this._addIncidentWorkNote(grIncident, notes);
    } else {
      this._setError(this._generateInternalErrorMessage(me, status, rest.extractPagerDutyErrorResponse(response)));
      // Starting custom code - Reprocess in case of missing privileges
      var customErrorMessage2 = rest.extractPagerDutyErrorResponse(response);
      if (customErrorMessage2.contains('not authorized') || customErrorMessage2.contains('User Not Found')) {
        this.acknowledgeIncident(grIncident, 'system');
        return;
      }
      // End of custom code
      this._addIncidentWorkNote(grIncident, this._generateNoteErrorMessage('PagerDuty error during acknowledgement: ', rest.extractPagerDutyErrorResponse(response)));
    }
  },

  /**
   * Resolves the PagerDuty incident on unlink
   * @param {GlideRecord} grIncident - incident record
   * @param {String} currentUserSysId - current user sys_id
   * @param {String} pdIncidentId - PagerDuty incident ID to resolve on unlink
   */
  resolveOnUnreference: function (grIncident, currentUserSysId, pdIncidentId) {
    var fn = 'resolveOnUnreference';
    var snIncidentNumber = grIncident.getDisplayValue();
    var snIncidentId = grIncident.getValue('sys_id');
    var agName = grIncident.getDisplayValue('assignment_group');

    gs.debug('{0} {1}', fn, snIncidentNumber);

    var notes = 'Incident has been reassigned to the ' +
      'Assignment group "' + agName + '" not mapped with PagerDuty.\n' +
      '\nResolving PagerDuty incident ' + pdIncidentId + ' according to integration settings';
    this._addIncidentWorkNote(grIncident, notes);

    var currentUserEmail = this.getValidEmail(currentUserSysId);

    var grUser = new GlideRecordSecure('sys_user');
    var currentUserName;
    if (grUser.get(currentUserSysId)) {
      currentUserName = grUser.getValue('user_name');
    } else {
      currentUserName = currentUserSysId;
    }

    var pdNote = 'Resolved by ServiceNow since the linked incident has been reassigned to a non-mapped Assignment group.';
    this.postIncidentNote(pdIncidentId, pdNote, currentUserName, false, snIncidentId);

    var feature = 'incidents/' + pdIncidentId;

    var body = {
      incident: {
        type: 'incident_reference',
        status: 'resolved'
      }
    };

    var rest = new x_pd_integration.PagerDuty_REST();
    var clientUrl = this.baseUrl + grIncident.getLink();
    var response = rest.putREST(feature, body, currentUserEmail, clientUrl);

    var responseBody = response.getBody();

    var status = response.getStatusCode();
    gs.debug('{0} response: {1}:{2}', fn, status, responseBody);

    if (response.haveError()) {
      this._setError(this._generateInternalErrorMessage(fn, status, rest.extractPagerDutyErrorResponse(response)));
      // Starting custom code - Reprocess in case of missing privileges
      var customErrorMessage = rest.extractPagerDutyErrorResponse(response);
      if (customErrorMessage.contains('not authorized') || customErrorMessage.contains('User Not Found')) {
        this.resolveOnUnreference(grIncident, 'system', pdIncidentId);
        return;
      }
      // End of custom code
      this._addIncidentWorkNote(grIncident, this._generateNoteErrorMessage('PagerDuty error during resolve: ', rest.extractPagerDutyErrorResponse(response)));
      return;
    }

    if (status === 200) {
      gs.info('{0}: PagerDuty incident {1} has been resolved since the linked ServiceNow incident was reassigned to a non-mapped group', fn, pdIncidentId);
    } else {
      this._setError(this._generateInternalErrorMessage(fn, status, rest.extractPagerDutyErrorResponse(response)));
      // Starting custom code - Reprocess in case of missing privileges
      var customErrorMessage2 = rest.extractPagerDutyErrorResponse(response);
      if (customErrorMessage2.contains('not authorized') || customErrorMessage2.contains('User Not Found')) {
        this.resolveOnUnreference(grIncident, 'system', pdIncidentId);
        return;
      }
      // End of custom code
      this._addIncidentWorkNote(grIncident, this._generateNoteErrorMessage('PagerDuty error during resolve: ', rest.extractPagerDutyErrorResponse(response)));
    }
  },

  /**
   * Reassigns PagerDuty escalation policy
   * @param {GlideRecord} incident - incident record
   * @param {String} currentUserSysid
   */
  assignIncidentToPolicy: function (grIncident, currentUserSysId) {
    var display = this.displayIncidentReassignmentNote();
    var me = 'assignIncidentToPolicy';
    gs.debug('{0} | incident: {1}, currentUserSysId: {2}', me, grIncident.getDisplayValue(), currentUserSysId);

    var taskHelper = new x_pd_integration.TaskEntityHelper(grIncident);
    var userEmail = this.getValidEmail(currentUserSysId);

    var epHelper = new x_pd_integration.EscalationPolicyHelper();
    epHelper.setIncidentId(grIncident.sys_id);
    var snPriorityId = epHelper.getIncidentSnPriorityId();
    var escalationPolicyId = epHelper.getPDEscalationPolicyIdWithPriority(grIncident.getValue('assignment_group'), snPriorityId);

    var notes;
    if (gs.nil(escalationPolicyId)) {
      if (this.closeOnUnknownUserGroup === 'true') {
        notes = grIncident.getDisplayValue() + ' assignment group \'' + grIncident.getDisplayValue('assignment_group') +
          '\' does not have a PagerDuty policy, closing PagerDuty incident, and removing reference';
        taskHelper.setPdId('---unlinked---');
        this._addIncidentWorkNote(grIncident, notes, display);
      } else {
		// CUSTOM HERE - Use default EP - From default Service
        // notes = grIncident.getDisplayValue() + ' assignment group \'' + grIncident.getDisplayValue('assignment_group') +
        //   '\' does not have a PagerDuty policy, could not reassign policy';
        // this._setError(me, notes);
        // this._addIncidentWorkNote(grIncident, notes, display);
		escalationPolicyId = epHelper.getPDEscalationPolicyIdFromDefaultService();
		// END OF CUSTOM
      }
      return;
    }

    // useless code due to filter condition in the `PD Group Policy Assign` business rule
    var incidentId = taskHelper.getPdId();
    if (gs.nil(incidentId)) {
      notes = grIncident.getDisplayValue() + ' does not have a PagerDuty ID so it could not re-assign the escalation_policy';
      this._setError(me, notes);
      this._addIncidentWorkNote(grIncident, notes, display);
      return;
    }

    var feature = 'incidents/' + incidentId;
    var body = {
      incident: {
        type: 'incident_reference',
        escalation_policy: {
          id: escalationPolicyId,
          type: 'escalation_policy_reference'
        }
      }
    };

    var rest = new x_pd_integration.PagerDuty_REST();
    var clientUrl = this.baseUrl + grIncident.getLink();
    var response = rest.putREST(feature, body, userEmail, clientUrl);
    var responseBody = response.getBody();
    var status = response.getStatusCode();
    gs.debug('{0} | response: {1}:{2}', me, status, responseBody);

    if (response.haveError()) {
      this._setError(this._generateInternalErrorMessage(me, status, rest.extractPagerDutyErrorResponse(response)));
      // Starting custom code - Reprocess in case of missing privileges
      var customErrorMessage = rest.extractPagerDutyErrorResponse(response);
      if (customErrorMessage.contains('not authorized') || customErrorMessage.contains('User Not Found')) {
        this.assignIncidentToPolicy(grIncident, 'system');
        return;
      }
      // End of custom code
      this._addIncidentWorkNote(grIncident, this._generateNoteErrorMessage('PagerDuty error during group assignment: ', rest.extractPagerDutyErrorResponse(response)));
      return;
    }

    if (status === 201 || status === 200) {
      notes = gs.getMessage(
        'PagerDuty incident was reassigned to the {0} group escalation policy',
        grIncident.getDisplayValue('assignment_group')
      );
      this._addIncidentWorkNote(grIncident, notes, display);
    } else {
      this._setError(this._generateInternalErrorMessage(me, status, rest.extractPagerDutyErrorResponse(response)));
      // Starting custom code - Reprocess in case of missing privileges
      var customErrorMessage2 = rest.extractPagerDutyErrorResponse(response);
      if (customErrorMessage2.contains('not authorized') || customErrorMessage2.contains('User Not Found')) {
        this.assignIncidentToPolicy(grIncident, 'system');
        return;
      }
      // End of custom code
      this._addIncidentWorkNote(grIncident, this._generateNoteErrorMessage('PagerDuty error during group assignment: ', rest.extractPagerDutyErrorResponse(response)));
    }
  },

  /**
   * Sets assignee for the PagerDuty incident
   * @param {GlideRecord} grIncident - incident record
   * @param {String} assigneeSysId - assignee sys_id
   * @param {String} currentUserSysId - current user sys_id
   */
  assignIncidentToUser: function (grIncident, assigneeSysId, currentUserSysId) {
    var me = 'assignIncidentToUser';
    var notes = '';
    var display = this.displayIncidentReassignmentNote();

    var currentUserEmail = this.getValidEmail(currentUserSysId);

    var grUser = new GlideRecordSecure('sys_user');
    if (!grUser.get(assigneeSysId)) {
      this._setError(me, 'User with sys_id ' + assigneeSysId + ' not found');
      return;
    }
    var assigneeEmail = grUser.getValue('email');
    var assigneePdId = grUser.getValue('x_pd_integration_pagerduty_id');

    if (gs.nil(assigneePdId)) {
      if (assigneeEmail) {
        // CUSTOM HERE - Changed last parameter to true
		assigneePdId = this.getUserIDFromFieldData(assigneeEmail, 'email', true);
		// END OF CUSTOM HERE - Changed last parameter to true
      } else {
		// CUSTOM HERE - Set default User
        assigneePdId = this.defaultUserID;
		// END OF CUSTOM HERE - Set default User
      }
    }

	// CUSTOM HERE - Validate User to set or Default User
	var isValidUser = true;
	isValidUser = this.isValidPDUserID(assigneePdId);

    if (gs.nil(assigneePdId) || !isValidUser) {
		assigneePdId = this.defaultUserID;
    //   notes =
    //     gs.getMessage('Could not find valid PagerDuty user for assignment user \'{0}\', will not assign incident to user in PagerDuty', grUser.getDisplayValue());
    //   this._setError(me, notes);
    //   this._addIncidentWorkNote(grIncident, notes, display);
    //   return;
    }
	// END OF CUSTOM HERE - Validate User to set or Default User

    var incidentId = x_pd_integration.TaskEntityHelper.getPdId(grIncident);
    var feature = 'incidents/' + incidentId;

    var body = {
      incident: {
        type: 'incident_reference',
        assignments: [{
          assignee: {
            id: assigneePdId,
            type: 'user_reference'
          }
        }]
      }
    };

    var rest = new x_pd_integration.PagerDuty_REST();
    var clientUrl = this.baseUrl + grIncident.getLink();
    var response = rest.putREST(feature, body, currentUserEmail, clientUrl);

    var responseBody = response.getBody();

    var status = response.getStatusCode();
    gs.debug('{0} | response: {0}:{1}', me, status, responseBody);

    if (response.haveError()) {
      this._setError(this._generateInternalErrorMessage(me, status, rest.extractPagerDutyErrorResponse(response)));
      // Starting custom code - Reprocess in case of missing privileges
      var customErrorMessage = rest.extractPagerDutyErrorResponse(response);
      if (customErrorMessage.contains('not authorized') || customErrorMessage.contains('User Not Found')) {
        this.assignIncidentToUser(grIncident, assigneeSysId, 'system');
        return;
      }
      // End of custom code
      this._addIncidentWorkNote(grIncident, this._generateNoteErrorMessage('PagerDuty error during user assignment: ', rest.extractPagerDutyErrorResponse(response)));
      return;
    }

    if (status === 200 || status === 201) {
      notes = gs.getMessage('PagerDuty incident was reassigned to {0}', grUser.getDisplayValue());
      this._addIncidentWorkNote(grIncident, notes, display);
    } else {
      this._setError(this._generateInternalErrorMessage(me, status, rest.extractPagerDutyErrorResponse(response)));
      // Starting custom code - Reprocess in case of missing privileges
      var customErrorMessage2 = rest.extractPagerDutyErrorResponse(response);
      if (customErrorMessage2.contains('not authorized') || customErrorMessage2.contains('User Not Found')) {
        this.assignIncidentToUser(grIncident, assigneeSysId, 'system');
        return;
      }
      // End of custom code
      this._addIncidentWorkNote(grIncident, this._generateNoteErrorMessage('PagerDuty error during user assignment: ', rest.extractPagerDutyErrorResponse(response)));
    }
  },

  /**
   * Updates PagerDuty incident priority
   * @param {GlideRecord} grIncident - incident record
   * @param {String} currentUserSysId - current user sys_id
   * @param {String} previousPriorityParams - stringified JSON with the previous values of
   *                                          impact, urgency, and priority fields
   */
  updatePriority: function (grIncident, currentUserSysId, previousPriorityParams) {
    var me = 'updatePriority';
    var notes = '';

    gs.debug('{0} | {1}', me, grIncident.getDisplayValue());

    var pdPriorityId = '';
    var pdUrgency = '';
    var grPdPriority = new GlideRecordSecure('x_pd_integration_pagerduty_priority');
    grPdPriority.addQuery('priority', grIncident.priority);
    grPdPriority.addNotNullQuery('pagerduty_priority_id');
    grPdPriority.query();
    if (grPdPriority.next()) {
      pdPriorityId = String(grPdPriority.pagerduty_priority_id);
      pdUrgency = String(grPdPriority.pagerduty_urgency);
    }

    var incidentBody = {
      type: 'incident_reference',
      priority: {
        id: pdPriorityId,
        type: 'priority'
      }
    };

    if (pdUrgency) {
      incidentBody.urgency = pdUrgency;
    }

    var incidentHelper = new x_pd_integration.IncidentHelper(grIncident.sys_id);
    previousPriorityParams = global.JSON.parse(previousPriorityParams);
    var snPriorityId1 = incidentHelper.getSnPriorityId(previousPriorityParams);
    var snPriorityId2 = incidentHelper.getSnPriorityId();

    var epHelper = new x_pd_integration.EscalationPolicyHelper();
    var assignmentGroupSysId = grIncident.getValue('assignment_group');
    var epId1 = epHelper.getPDEscalationPolicyIdWithPriority(assignmentGroupSysId, snPriorityId1);
    var epId2 = epHelper.getPDEscalationPolicyIdWithPriority(assignmentGroupSysId, snPriorityId2);

    var isPriorityChanged = previousPriorityParams.priority !== grIncident.getValue('priority');
    var isEpChanged = epId1 !== epId2;

	// CUSTOM HERE - To get default Escalation Policy
	if (gs.nil(epId2)) {
		epId2 = epHelper.getPDEscalationPolicyIdFromDefaultService();
	}
	// END OF CUSTOM

    if (isPriorityChanged &amp;&amp; isEpChanged &amp;&amp; !gs.nil(epId2) &amp;&amp; !gs.nil(snPriorityId1)) {
      incidentBody.escalation_policy = {
        id: String(epId2),
        type: 'escalation_policy_reference'
      };
    }

    var body = {
      incident: incidentBody
    };

    var rest = new x_pd_integration.PagerDuty_REST();
    var currentUserEmail = this.getValidEmail(currentUserSysId);
    var incidentId = x_pd_integration.TaskEntityHelper.getPdId(grIncident);
    var feature = 'incidents/' + incidentId;
    var clientUrl = this.baseUrl + grIncident.getLink();
    var response = rest.putREST(feature, body, currentUserEmail, clientUrl);

    var responseBody = response.getBody();

    var status = response.getStatusCode();
    gs.debug('{0} | response: {1}:{2}', me, status, responseBody);

    if (response.haveError()) {
      this._setError(this._generateInternalErrorMessage(me, status, rest.extractPagerDutyErrorResponse(response)));
      // Starting custom code - Reprocess in case of missing privileges
      var customErrorMessage = rest.extractPagerDutyErrorResponse(response);
      if (customErrorMessage.contains('not authorized') || customErrorMessage.contains('User Not Found')) {
        this.updatePriority(grIncident, 'system', global.JSON.stringify(previousPriorityParams));
        return;
      }
      // End of custom code
      this._addIncidentWorkNote(grIncident, this._generateNoteErrorMessage('PagerDuty error during priority update: ', rest.extractPagerDutyErrorResponse(response)));
      return;
    }

    if (status === 200) {
      notes = gs.getMessage('Updating PagerDuty incident priority');
      this._addIncidentWorkNote(grIncident, notes);
    } else {
      this._setError(this._generateInternalErrorMessage(me, status, rest.extractPagerDutyErrorResponse(response)));
      // Starting custom code - Reprocess in case of missing privileges
      var customErrorMessage2 = rest.extractPagerDutyErrorResponse(response);
      if (customErrorMessage2.contains('not authorized') || customErrorMessage2.contains('User Not Found')) {
        this.updatePriority(grIncident, 'system', global.JSON.stringify(previousPriorityParams));
        return;
      }
      // End of custom code
      this._addIncidentWorkNote(grIncident, this._generateNoteErrorMessage('PagerDuty error during priority update: ', rest.extractPagerDutyErrorResponse(response)));
    }
  },

  /**
   * Updates PagerDuty incident priority - Not Urgency
   * @param {GlideRecord} grIncident - incident record
   * @param {String} currentUserSysId - current user sys_id
   * @param {String} previousPriorityParams - stringified JSON with the previous values of
   *                                          impact, urgency, and priority fields
   */
  updatePriorityOnly: function (grPDPriority, currentUserSysId, pdIncident) {
    var me = 'updatePriorityOnly';
    var notes = '';
	gs.debug('{0} | {1}', me, pdIncident);

	var grIncident = new GlideRecord('incident');
	grIncident.addQuery('x_pd_integration_incident', pdIncident);
	grIncident.query();
	if (!grIncident.next()) {
		return;
	}

    gs.debug('{0} | {1}', me, grIncident.getDisplayValue());

    var pdPriorityId = '';

    var grPdPriority = new GlideRecordSecure('x_pd_integration_pagerduty_priority');
    grPdPriority.addQuery('priority', grIncident.priority);
    grPdPriority.addNotNullQuery('pagerduty_priority_id');
    grPdPriority.query();
    if (grPdPriority.next()) {
      pdPriorityId = String(grPdPriority.pagerduty_priority_id);

    }

    var incidentBody = {
      type: 'incident_reference',
      priority: {
        id: pdPriorityId,
        type: 'priority'
      }
    };

    // var incidentHelper = new x_pd_integration.IncidentHelper(grIncident.sys_id);
    // previousPriorityParams = global.JSON.parse(previousPriorityParams);
    // var snPriorityId1 = incidentHelper.getSnPriorityId(previousPriorityParams);
    // var snPriorityId2 = incidentHelper.getSnPriorityId();

    // var epHelper = new x_pd_integration.EscalationPolicyHelper();
    // var assignmentGroupSysId = grIncident.getValue('assignment_group');
    // var epId1 = epHelper.getPDEscalationPolicyIdWithPriority(assignmentGroupSysId, snPriorityId1);
    // var epId2 = epHelper.getPDEscalationPolicyIdWithPriority(assignmentGroupSysId, snPriorityId2);

    // var isPriorityChanged = previousPriorityParams.priority !== grIncident.getValue('priority');
    // var isEpChanged = epId1 !== epId2;

	// // CUSTOM HERE - To get default Escalation Policy
	// if (gs.nil(epId2)) {
	// 	epId2 = epHelper.getPDEscalationPolicyIdFromDefaultService();
	// }
	// // END OF CUSTOM

    // if (isPriorityChanged &amp;&amp; isEpChanged &amp;&amp; !gs.nil(epId2) &amp;&amp; !gs.nil(snPriorityId1)) {
    //   incidentBody.escalation_policy = {
    //     id: String(epId2),
    //     type: 'escalation_policy_reference'
    //   };
    // }

    var body = {
      incident: incidentBody
    };

    var rest = new x_pd_integration.PagerDuty_REST();
    var currentUserEmail = this.getValidEmail(currentUserSysId);
    var incidentId = x_pd_integration.TaskEntityHelper.getPdId(grIncident);
    var feature = 'incidents/' + incidentId;
    var clientUrl = this.baseUrl + grIncident.getLink();
    var response = rest.putREST(feature, body, currentUserEmail, clientUrl);

    var responseBody = response.getBody();

    var status = response.getStatusCode();
    gs.debug('{0} | response: {1}:{2}', me, status, responseBody);

    if (response.haveError()) {
      this._setError(this._generateInternalErrorMessage(me, status, rest.extractPagerDutyErrorResponse(response)));
      // Starting custom code - Reprocess in case of missing privileges
      var customErrorMessage = rest.extractPagerDutyErrorResponse(response);
      if (customErrorMessage.contains('not authorized') || customErrorMessage.contains('User Not Found')) {
        this.updatePriorityOnly(grIncident, 'system', pdIncident);
        return;
      }
      // End of custom code
      this._addIncidentWorkNote(grIncident, this._generateNoteErrorMessage('PagerDuty error during priority update: ', rest.extractPagerDutyErrorResponse(response)));
      return;
    }

    if (status === 200) {
      notes = gs.getMessage('Updating PagerDuty incident priority');
      this._addIncidentWorkNote(grIncident, notes);
    } else {
      this._setError(this._generateInternalErrorMessage(me, status, rest.extractPagerDutyErrorResponse(response)));
      // Starting custom code - Reprocess in case of missing privileges
      var customErrorMessage2 = rest.extractPagerDutyErrorResponse(response);
      if (customErrorMessage2.contains('not authorized') || customErrorMessage2.contains('User Not Found')) {
        this.updatePriorityOnly(grIncident, 'system', global.JSON.stringify(previousPriorityParams));
        return;
      }
      // End of custom code
      this._addIncidentWorkNote(grIncident, this._generateNoteErrorMessage('PagerDuty error during priority update: ', rest.extractPagerDutyErrorResponse(response)));
    }
  },

  /**
   * Updates PagerDuty incident priority and assignment (including self-assignment case)
   * when changed by one action in the linked ServiceNow incident
   * @param {GlideRecord} grIncident - incident record
   * @param {String} currentUserSysId - current user sys_id
   * @param {String} assignment - strring 'assignment_group' or 'assigne'
   */
  updatePriorityAndAssignment: function (grIncident, currentUserSysId, assignment) {
    var fn = 'updatePriorityAndAssignment';
    var display = this.displayIncidentReassignmentNote();

    var pdPriorityId;
    var pdUrgency;
    var grPdPriority = new GlideRecordSecure('x_pd_integration_pagerduty_priority');
    grPdPriority.addQuery('priority', grIncident.priority);
    grPdPriority.addNotNullQuery('pagerduty_priority_id');
    grPdPriority.query();
    if (grPdPriority.next()) {
      pdPriorityId = String(grPdPriority.pagerduty_priority_id);
      pdUrgency = String(grPdPriority.pagerduty_urgency);
    }

    var body = {
      incident: {
        type: 'incident_reference',
        priority: {
          id: pdPriorityId,
          type: 'priority'
        }
      }
    };

    if (pdUrgency) {
      body.incident.urgency = pdUrgency;
    }

    if (assignment === 'assignment_group') {
      var escalationPolicyPdId = this.getEscalationPolicyPdId(grIncident);

      if (gs.nil(escalationPolicyPdId)) {
		// CUSTOM HERE - Get EP from Default Service
		// this.handleUnsetEscalationPolicy(fn, grIncident);
		var epHelper = new x_pd_integration.EscalationPolicyHelper();
		escalationPolicyPdId = epHelper.getPDEscalationPolicyIdFromDefaultService();
		// END OF CUSTOM HERE - Get EP from Default Service
        
      }

      body.incident.escalation_policy = {
        id: escalationPolicyPdId,
        type: 'escalation_policy_reference'
      };
    } else if (assignment === 'assignee') {
      var assignToSysId = grIncident.getValue('assigned_to');

      if (assignToSysId === currentUserSysId) {
        body.incident.status = 'acknowledged';
      } else {
        var assigneeSysId = assignToSysId;

        var assigneePdId;
        var assigneeEmail;
        var grUser = new GlideRecordSecure('sys_user');
        grUser.addQuery('sys_id', assigneeSysId);
        grUser.query();
        if (grUser.next()) {
          assigneePdId = String(grUser.x_pd_integration_pagerduty_id);
          assigneeEmail = String(grUser.email);
        }
        if (gs.nil(assigneePdId) &amp;&amp; !gs.nil(assigneeEmail)) {
          assigneePdId = this.getUserIDFromFieldData(assigneeEmail, 'email', false);
        }

		// CUSTOM HERE - Set default user as assignee
		// if (gs.nil(assigneePdId)) {
        //   this.handleNilAssigneePdId(fn, grIncident);
        // }
		var isValidUser = true;
		isValidUser = this.isValidPDUserID(assigneePdId);

		if (gs.nil(assigneePdId) || !isValidUser) assigneePdId = this.defaultUserID;
        // END OF CUSTOM HERE - Set default user as assignee

        body.incident.assignments = [
          {
            assignee: {
              id: assigneePdId,
              type: 'user_reference'
            }
          }
        ];
      }
    } else {
      gs.error('{0} | The assignment type should be either "assignment_group" or "assignee". ' +
        'The actual value is: {1}', fn, assignment);
      return;
    }

    var rest = new x_pd_integration.PagerDuty_REST();
    var currentUserEmail = this.getValidEmail(currentUserSysId);
    var incidentId = x_pd_integration.TaskEntityHelper.getPdId(grIncident);
    var feature = 'incidents/' + incidentId;
    var clientUrl = this.baseUrl + grIncident.getLink();

    var response = rest.putREST(feature, body, currentUserEmail, clientUrl);
    var responseBody = response.getBody();
    var status = response.getStatusCode();
    gs.debug('{0} | response: {1}:{2}', fn, status, responseBody);

    if (response.haveError()) {
      this._setError(this._generateInternalErrorMessage(fn, status, rest.extractPagerDutyErrorResponse(response)));
      // Starting custom code - Reprocess in case of missing privileges
      var customErrorMessage = rest.extractPagerDutyErrorResponse(response);
      if (customErrorMessage.contains('not authorized') || customErrorMessage.contains('User Not Found')) {
        this.updatePriorityAndAssignment(grIncident, 'system', assignment);
        return;
      }
      // End of custom code
      this._addIncidentWorkNote(grIncident, this._generateNoteErrorMessage('PagerDuty error during update request: ', rest.extractPagerDutyErrorResponse(response)));
      return;
    }

    if (status === 200) {
      var note = 'PagerDuty incident priority has been changed, and it was reassigned to ';
      note += assignment === 'assignment_group'
        ? gs.getMessage('"{0}" group escalation policy', grIncident.getDisplayValue('assignment_group'))
        : gs.getMessage('{0}', grIncident.getDisplayValue('assigned_to'));
      this._addIncidentWorkNote(grIncident, note, display);
    } else {
      this._setError(this._generateInternalErrorMessage(fn, status, rest.extractPagerDutyErrorResponse(response)));
      // Starting custom code - Reprocess in case of missing privileges
      var customErrorMessage2 = rest.extractPagerDutyErrorResponse(response);
      if (customErrorMessage2.contains('not authorized') || customErrorMessage2.contains('User Not Found')) {
        this.updatePriorityAndAssignment(grIncident, 'system', assignment);
        return;
      }
      // End of custom code
      this._addIncidentWorkNote(grIncident, this._generateNoteErrorMessage('PagerDuty error during update request: ', rest.extractPagerDutyErrorResponse(response)));
    }
  },

  /**
   * Initiates webhook provisioning and form update upon completion
   * @param {GlideRecordSecure} grRec - record from a table (e.g., cmdb_ci, sys_user_group)
   * @param {String} pdServiceId - PagerDuty service ID
   * @returns {String} PagerDuty webhook ID
   */
  provisionWebhook: function (grRec, pdServiceId) {
    var pdp = new PagerDutyProvisioning();
    var webhookId = pdp.createServiceWebhook(pdServiceId, grRec);
    if (!gs.nil(webhookId)) {
      this.updateWebhookId(grRec, pdServiceId, webhookId);
      return webhookId;
    }
  },

  /**
   * Updates PagerDuty webhook field in the form
   * @param {GlideRecordSecure} grRec - record from a table (e.g., cmdb_ci, sys_user_group)
   * @param {String} pdServiceId - PagerDuty service ID
   * @param {String} webhookId - PagerDuty webhook ID
   */
  updateWebhookId: function (grRec, pdServiceId, webhookId) {
    var me = 'updateWebhookId';
    if (gs.nil(webhookId)) {
      return;
    }

    if (!grRec.get('x_pd_integration_pagerduty_service', pdServiceId)) {
      gs.error('{0}: Webhook ID wasn\'t updated. PagerDuty service with ID {0} doesn\'t exist', me, pdServiceId);
      return;
    }

    grRec.setValue('x_pd_integration_pagerduty_webhook', webhookId);
    grRec.update();
  },

  /**
   * Searches for PagerDuty webhook subscription by service ID
   * @param {String} pdServiceId - PagerDuty service ID
   * @returns {String|undefined} PagerDuty webhook subscription ID
   */
  searchWebhookByServiceId: function (pdServiceId) {
    var me = 'searchWebhookByServiceId';
    if (gs.nil(pdServiceId)) {
      return;
    }

    var feature = 'webhook_subscriptions?filter_type=service&amp;filter_id=' + pdServiceId;
    var rest = new x_pd_integration.PagerDuty_REST();

    var response = rest.getREST(feature, {});
    var responseBody = response.haveError()
      ? rest.extractPagerDutyErrorResponse(response)
      : response.getBody();
    var status = response.getStatusCode();
    gs.debug('{0} response: {1}:{2}', me, status, responseBody);

    if (status === 200) {
      var body = global.JSON.parse(response.getBody());
      var webhookSubscriptions = body.webhook_subscriptions;
      if (!webhookSubscriptions.length) {
        this._setError(me, 'There are no webhook subscriptions for the PagerDuty service with ID ' + pdServiceId);
        return;
      }

      var snEndpoint = gs.getProperty('x_pd_integration.webhook_restapi');
      for (var i = 0; i &lt; webhookSubscriptions.length; i++) {
        if (webhookSubscriptions[i].delivery_method.url.indexOf(this.baseUrl + snEndpoint) === 0) {
          return webhookSubscriptions[i].id;
        }
      }
    }
  },

  /**
   * Searches for PagerDuty webhook extension by service ID
   * @param {String} pdServiceId - PagerDuty service ID
   * @returns {String|undefined} PagerDuty webhook extension ID
   */
  searchWebhookV2ByServiceId: function (pdServiceId) {
    var me = 'searchWebhookV2ByServiceId';
    if (gs.nil(pdServiceId)) {
      return;
    }

    var feature = 'extensions?extension_object_id=' + pdServiceId;
    var rest = new x_pd_integration.PagerDuty_REST();

    var response = rest.getREST(feature, {});
    var responseBody = response.haveError()
      ? rest.extractPagerDutyErrorResponse(response)
      : response.getBody();
    var status = response.getStatusCode();
    gs.debug('{0} response: {1}:{2}', me, status, responseBody);

    if (status === 200) {
      var body = global.JSON.parse(response.getBody());
      var webhookExtensions = body.extensions;
      if (!webhookExtensions.length) {
        this._setError(me, 'There are no webhook Extensions for the PagerDuty service with ID ' + pdServiceId);
        return;
      }

      return webhookExtensions[0].id;
    }
  },

  /**
   * Enables PagerDuty webhook subscription
   * @param {String} id - PagerDuty webhook subscription ID
   * @returns {Boolean} true if webhook subscription was enabled successfully
   */
  enableWebhook: function (id) {
    var me = 'enableWebhook';
    if (gs.nil(id)) {
      return;
    }

    var feature = 'webhook_subscriptions/' + id + '/enable';
    var rest = new x_pd_integration.PagerDuty_REST();

    var response = rest.postREST(feature, null);
    var responseBody = response.haveError()
      ? rest.extractPagerDutyErrorResponse(response)
      : response.getBody();
    var status = response.getStatusCode();
    gs.debug('{0} response: {1}:{2}', me, status, responseBody);

    if (status === 200) {
      return true;
    }
    return false;
  },

  /**
   * Enables PagerDuty webhook extension
   * @param {String} id - PagerDuty webhook extension ID
   * @returns {Boolean} true if webhook extension was enabled successfully
   */
  enableWebhookV2: function (id) {
    var me = 'enableWebhookV2';
    if (gs.nil(id)) {
      return;
    }

    var feature = 'extensions/' + id + '/enable';
    var rest = new x_pd_integration.PagerDuty_REST();

    var response = rest.postREST(feature, null);
    var responseBody = response.haveError()
      ? rest.extractPagerDutyErrorResponse(response)
      : response.getBody();
    var status = response.getStatusCode();
    gs.debug('{0} response: {1}:{2}', me, status, responseBody);

    if (status === 201) {
      return true;
    }
    return false;
  },

  /**
   * Retrieves PagerDuty service name by ID
   * @param {String} pdServiceId - PagerDuty service ID
   * @returns {String} PagerDuty service name
   */
  getPdServiceName: function (pdServiceId) {
    var me = 'getPdServiceName';
    if (gs.nil(pdServiceId)) {
      return;
    }

    var feature = 'services/' + pdServiceId;
    var rest = new x_pd_integration.PagerDuty_REST();

    var response = rest.getREST(feature, {});
    var responseBody = response.haveError()
      ? rest.extractPagerDutyErrorResponse(response)
      : response.getBody();
    var status = response.getStatusCode();
    gs.debug('{0} response: {1}:{2}', me, status, responseBody);

    if (status === 200) {
      var body = global.JSON.parse(response.getBody());
      return body.service.name;
    }
  },

  /**
   * DEPRECATE in v4.0: No longer use this for API v2.0
   * query PagerDuty for service key given a service ID
   * @param {String} service id
   * @return {String} service key
   */
  getServiceKeyFromID: function (serviceID) {
    gs.debug('getServiceKeyFromID for {0}', serviceID);
    var feature = 'services/' + serviceID;
    var rest = new x_pd_integration.PagerDuty_REST();

    var response = rest.getREST(feature, {});
    var responseBody = response.haveError() ? rest.extractPagerDutyErrorResponse(response) : response.getBody();
    var status = response.getStatusCode();
    gs.debug('getServiceKeyFromID response: {0}:{1}', status, responseBody);

    if (status === 200) {
      var body = global.JSON.parse(response.getBody());
      var key = body.service.service_key;
      gs.debug('getServiceKeyFromID ID:{0} returned Key:{1}', serviceID, key);
      return key;
    }
  },

  /**
   * query PagerDuty for an incident
   * @param {String} incident id
   * @return {Object} incident
   */
  getIncidentByID: function (incidentID) {
    var me = 'getIncidentByID';
    gs.debug('{0} for {1}', me, incidentID);
    var feature = 'incidents/' + incidentID;
    var rest = new x_pd_integration.PagerDuty_REST();

    var response = rest.getREST(feature, {});
    var responseBody = response.haveError() ? rest.extractPagerDutyErrorResponse(response) : response.getBody();
    var status = response.getStatusCode();
    gs.debug('{0} response: {1}:{2}', me, status, responseBody);

    if (status === 200) {
      var body = global.JSON.parse(response.getBody());
      gs.debug('{0} ID={1} returned ID:{2}', me, incidentID, body.incident);
      return body.incident;
    }
  },

  /**
   * Fetches the first_trigger_log_entry from the incident
   * @param {String} pdIncidentId PagerDuty incident id
   * @returns {(Object|undefined)} the object of [trigger_log_entry] type or nothing
   */
  getFirstTriggerLogEntry: function (pdIncidentId) {
    var rest = new x_pd_integration.PagerDuty_REST();
    var feature = 'incidents/' + pdIncidentId;
    var response = rest.getREST(feature, {'include%5B%5D': 'first_trigger_log_entries'});
    if (rest.hasError()) {
      gs.error('Error in getFirstTriggerLogEntry: ' + rest.getError());
    }
    var responseBody = response.haveError() ? rest.extractPagerDutyErrorResponse(response)
      : response.getBody();
    var status = response.getStatusCode();
    if (status === 200) {
      var body = global.JSON.parse(responseBody);
      return body.incident.first_trigger_log_entry;
    }
    gs.error('Error in getFirstTriggerLogEntry: ' + responseBody);
  },

  /**
   * query PagerDuty for an incident with a metadata inside
   * @param {String} obfuscated PagerDuty incident id
   * @return {Object} incident with metadata or empty object
   */
  getIncidentWithMetadata: function (incidentId) {
    var rest = new x_pd_integration.PagerDuty_REST();
    var feature = 'incidents/' + incidentId + '?include%5B%5D=metadata';
    var response = rest.getREST(feature, {});
    if (rest.hasError()) {
      gs.error('Error in getIncidentWithMetadata: ' + rest.getError());
    }
    var responseBody = response.haveError() ? rest.extractPagerDutyErrorResponse(response)
      : response.getBody();
    var status = response.getStatusCode();
    if (status === 200) {
      var body = global.JSON.parse(responseBody);
      return body.incident;
    }
    return {};
  },

  /**
   * query PagerDuty for impacted services IDs given an incident ID
   * @param {String} incident id
   * @return {Array} services [ids]
   */
  getServicesIDsFromIncidentID: function (incidentID) {
    var me = 'getServicesIDsFromIncidentID';
    gs.debug('{0} for {1}', me, incidentID);
    var feature = 'incidents/' + incidentID;
    var rest = new x_pd_integration.PagerDuty_REST();

    var response = rest.getREST(feature, {});
    var responseBody = response.haveError() ? rest.extractPagerDutyErrorResponse(response) : response.getBody();
    var status = response.getStatusCode();
    gs.debug('{0} response: {1}:{2}', me, status, responseBody);

    if (status === 200) {
      var body = global.JSON.parse(response.getBody());
      var ids = [];
      body.incident.impacted_services.forEach(function (impacted_service) {
        ids.push(impacted_service.id);
      });
      gs.debug('{0} incidentID={1} returned services IDs:{2}', me, incidentID, ids);
      return ids;
    }
  },

  /**
   * Query PagerDuty to get Response Plays for a user
   * @param {String} requester a "from" field sent to PagerDuty in a header, should contain an email
   * @return {Array} response_plays
   * @deprecated 2023/09/28
   * https://pagerduty.atlassian.net/browse/ITS-7486
   */
  getResponsePlays: function (requester) {
    var rest = new x_pd_integration.PagerDuty_REST();
    var feature = 'response_plays?filter_for_manual_run=true';
    var response = rest.getREST(feature, {}, requester);
    var responseBody = response.haveError() ? rest.extractPagerDutyErrorResponse(response) : response.getBody();
    var status = response.getStatusCode();
    gs.debug('getResponsePlays response: {1}:{2}', status, responseBody);

    if (status === 301) {
      throw new Error('Response plays are unavailable because your account has upgraded from Response Plays to Incident Workflows. ' +
        '&lt;a href="https://support.pagerduty.com/docs/incident-workflows?utm_source=servicenow_itsm&amp;utm_content=run_response_play_dialog"' +
        ' target="_blank" rel="noopener noreferrer"&gt;Learn more&lt;/a&gt;');
    }

    if (status === 200) {
      var body = global.JSON.parse(response.getBody());
      return body.response_plays;
    }

    return [];
  },

  /**
   * Get incident notes from PagerDuty incident to import
   * @param {String} incident ID
   * @return {Array} collection of note objects
   */
  getIncidentNotes: function (incidentID) {
    var me = 'getIncidentNotes';
    gs.debug('{0} for {1}', me, incidentID);
    var feature = 'incidents/' + incidentID + '/notes?time_zone=UTC';
    var rest = new x_pd_integration.PagerDuty_REST();

    var params = {};
    var response = rest.getREST(feature, params);
    var responseBody = response.haveError() ? rest.extractPagerDutyErrorResponse(response) : response.getBody();
    var status = response.getStatusCode();
    gs.debug('{0} response: {1}:{2}', me, status, responseBody);

    if (status === 200) {
      var body = global.JSON.parse(response.getBody());

      if (gs.nil(body.notes)) {
        gs.error('{0} could not find notes for incident ID {1}', me, incidentID);
        return;
      }

      var notes = body.notes;
      return notes;
    }
  },

  /**
   * Creates a note on the PagerDuty incident
   * @param {String} pdIncidentId - PagerDuty incident ID
   * @param {String} content - note content
   * @param {String} createdBy - ServiceNow user ID or sys_id
   * @param {Boolean} updateIncident - whether to update x_pd_integration_notes_ids incident column (deprecated)
   * @param {String} snIncidentId - ServiceNow incident sys_id
   */
  postIncidentNote: function (pdIncidentId, content, createdBy, updateIncident, snIncidentId) {
    var me = 'postIncidentNote';
    gs.debug('{0} | {1}:{2} created by {3}', me, pdIncidentId, content, createdBy);

    if (gs.nil(pdIncidentId) || gs.nil(content)) {
      return;
    }

    var worknote = {};
    worknote.content = content;

    var requesterId;
    if (gs.nil(createdBy)) {
      requesterId = this.defaultUserID;
    } else {
      requesterId = this.getUserIDFromFieldData(createdBy, 'user_name', true);
    }
    var requesterEmail = this.getUserEmailByPDID(requesterId);

    var feature = 'incidents/' + pdIncidentId + '/notes';

    var body = {
      note: worknote
    };

    var rest = new x_pd_integration.PagerDuty_REST();
    var response = rest.postREST(feature, body, requesterEmail);
    var status = response.getStatusCode();

    var ih = new x_pd_integration.IncidentHelper(snIncidentId);
    var incident = ih.getIncident();

    if (response.haveError()) {
      this._setError(this._generateInternalErrorMessage(me, status, rest.extractPagerDutyErrorResponse(response)));
      // Starting custom code - Reprocess in case of missing privileges
      var customErrorMessage = rest.extractPagerDutyErrorResponse(response);
      if (customErrorMessage.contains('not authorized') || customErrorMessage.contains('User Not Found')) {
        this.postIncidentNote(pdIncidentId, content, null, updateIncident, snIncidentId);
        return;
      }
      // End of custom code
      this._addIncidentWorkNote(incident, this._generateNoteErrorMessage('PagerDuty error during post work note: ', rest.extractPagerDutyErrorResponse(response)));
      return;
    }

    if (status === 200 || status === 201) {
      var responseBody = global.JSON.parse(response.getBody());
      var noteId = responseBody.note.id;
      gs.debug('{0} successfully created note {1} in PagerDuty incident {2}', me, noteId, pdIncidentId);

      if (updateIncident) {
        this.updateIncidentNoteIDs(pdIncidentId, noteId);
      }
    } else {
      this._setError(this._generateInternalErrorMessage(me, status, rest.extractPagerDutyErrorResponse(response)));
      // Starting custom code - Reprocess in case of missing privileges
      var customErrorMessage2 = rest.extractPagerDutyErrorResponse(response);
      if (customErrorMessage2.contains('not authorized') || customErrorMessage2.contains('User Not Found')) {
        this.postIncidentNote(pdIncidentId, content, null, updateIncident, snIncidentId);
        return;
      }
      // End of custom code
      this._addIncidentWorkNote(incident, this._generateNoteErrorMessage('PagerDuty error during post work note: ', rest.extractPagerDutyErrorResponse(response)));
    }
  },

  /**
   * Update the incident PagerDuty notes datestamp
   * @param {String} PagerDuty incidentID
   * @param {GlideDateTime} date stamp (optional)
   * @return void
   * @deprecated
   */
  updateIncidentNoteIDs: function (incidentID, noteID) {
    var me = 'updateIncidentNoteIDs';
    gs.debug('{0} updating note ID list on incident ID {1} with {2}', me, incidentID, noteID);
    if (gs.nil(incidentID) || gs.nil(noteID)) {
      return;
    }

    var gr = new GlideRecordSecure('incident');
    gr.addQuery('x_pd_integration_incident', incidentID);
    gr.query();
    if (!gr.next()) {
      gs.debug('{0} incidentID {1} not found for note {2}', me, incidentID, noteID);
    }

    var currentNoteIDs = gr.getValue('x_pd_integration_notes_ids');
    if (gs.nil(currentNoteIDs)) {
      gr.setValue('x_pd_integration_notes_ids', noteID);
    } else {
      gr.setValue('x_pd_integration_notes_ids', currentNoteIDs + ',' + noteID);
    }

    gr.update();
    gs.debug('{0} incidentID {1} updated note {2}, now has \'{3}\'', me, incidentID, noteID, gr.getValue('x_pd_integration_notes_ids'));
  },

  /**
   * Create PagerDuty notes improt records
   * @param {Array} collection of note objects
   * @return void
   */
  createNoteImports: function (incidentID, notes) {
    var me = 'createNoteImports';
    gs.debug('{0} starting import of \'{1}\' notes for incidentID:{2}', me, notes.length, incidentID);
    if (gs.nil(notes)) {
      return;
    }

    for (var i = notes.length - 1; i &gt;= 0; i--) {
      var note = notes[i];
      if (!gs.nil(note)) {
        var user = note.user;
        gs.debug('{0} content: {1}', me, note.content);

        var gr = new GlideRecordSecure('x_pd_integration_inc_note_import');
        gr.setValue('note_created_at', note.created_at);
        gr.setValue('incident_id', incidentID);
        gr.setValue('note_id', note.id);
        gr.setValue('user_id', user.id);
        gr.setValue('user_email', user.email);
        gr.setValue('user_name', user.name);
        gr.setValue('content', note.content);
        gr.insert();
        gs.debug('{0} created import row, incidentID:{1}, noteID:{2}', me, incidentID, note.id);
      }
    }
  },

  /**
   * Get the last work notes journal entry record for an incident_id
   * @param {String} incident sysid
   * @param {String} sys_user.user_name
   * @return {GlideRecordSecure} sys_journal_field record
   */
  getLastIncidentWorknote: function (incidentSysId, createdBy) {
    var me = 'getLastIncidentWorknote';
    gs.debug('{0} query for last worknote on {1} by {2}', me, incidentSysId, createdBy);
    if (gs.nil(incidentSysId)) {
      return;
    }

    var gr = new GlideRecordSecure('sys_journal_field');
    gr.addQuery('element', 'work_notes');
    gr.addQuery('element_id', incidentSysId);
    gr.addQuery('sys_created_by', createdBy);
    gr.setLimit(1);
    gr.orderByDesc('sys_created_on');
    gr.query();
    gr.next();
    return gr;
  },

  /**
   * Get work notes journal entries for an incident_id
   * @param {String} incident sysid
   * @param {String} sys_user.user_name
   * @return {String} sys_journal_field values
   */
  getSNWorknotes: function (incidentSysId, createdBy) {
    var workNotes = [];
    var me = 'getSNWorknotes';
    gs.debug('{0} query for worknotes on {1} by {2}', me, incidentSysId, createdBy);
    if (gs.nil(incidentSysId)) {
      return;
    }

    var gr = new GlideRecordSecure('sys_journal_field');
    gr.addQuery('element', 'work_notes');
    gr.addQuery('element_id', incidentSysId);
    gr.addQuery('sys_created_by', createdBy);
    gr.orderByDesc('sys_created_on');
    gr.query();
    while (gr.next()) {
      workNotes.push(gr.getValue('value'));
    }
    return workNotes;
  },

  /**
   * Add Incident Metadata reference to SNow Incident
   * @param (GlideRecordSecure) grIncident
   * @param (String) PagerDuty Incident ID
   * @param (String) current user email
   */
  addIncidentMetadataReference: function (grIncident, pdIncidentID, currentUserEmail) {
    var me = 'addIncidentMetadataReference';
    gs.debug('{0} - Add metadata reference to incident {1}', me, grIncident.getDisplayValue());

    var link = grIncident.getLink();
    var url = gs.getProperty('glide.servlet.uri') + link;
    var instanceName = gs.getProperty('instance_name');
    var incidentNumber = grIncident.getValue('number');
    var metadataKey = 'servicenow_itsm_' + instanceName + '_' + incidentNumber;
    var metadataValue = {
      external_name: incidentNumber + ' (' + instanceName + ')',
      external_url: url
    };
    // Payload for the PUT /incidents/:id
    var payload = {
      incident: {
        type: 'incident',
        metadata: {}
      }
    };
    payload.incident.metadata[metadataKey] = global.JSON.stringify(metadataValue);

    var feature = 'incidents/' + pdIncidentID;
    var rest = new x_pd_integration.PagerDuty_REST();
    var response = rest.putREST(feature, payload, currentUserEmail, url);
    var status = response.getStatusCode();

    if (rest.hasError()) {
      var notes = gs.getMessage('PagerDuty REST failed to add/update metadata reference to PagerDuty incident ({0})', rest.getError());
      this._setError(me, notes);
      this._addIncidentWorkNote(grIncident, notes);
      return status;
    }

    if (response.haveError()) {
      this._setError(this._generateInternalErrorMessage(me, status, rest.extractPagerDutyErrorResponse(response)));
      // Starting custom code - Reprocess in case of missing privileges
      var customErrorMessage = rest.extractPagerDutyErrorResponse(response);
      if (customErrorMessage.contains('not authorized') || customErrorMessage.contains('User Not Found')) {
        this.addIncidentMetadataReference(grIncident, pdIncidentID, this.getUserEmailByPDID(this.defaultUserID));
        return;
      }
      // End of custom code
      this._addIncidentWorkNote(
        grIncident,
        this._generateNoteErrorMessage('PagerDuty REST failed to add/update metadata reference to PagerDuty incident: ', rest.extractPagerDutyErrorResponse(response))
      );
      return status;
    }

    if (status === 200 || status === 201) {
      gs.debug('{0} - Successfully added metadata reference for {1}', me, grIncident.getDisplayValue());
    }
    return status;
  },

  /**
   * Updates v2 webhook (extension) in PagerDuty
   * @param {String} webhookId
   * @param {Object} requestBody
   */
  updatePdExtension: function (webhookId, requestBody) {
    var me = 'updatePdExtension';
    gs.debug('{0} - Update PagerDuty extension with ID {1}', me, webhookId);

    var feature = 'extensions/' + webhookId;
    var rest = new x_pd_integration.PagerDuty_REST();
    var response = rest.putREST(feature, requestBody);
    var status = response.getStatusCode();

    if (rest.hasError()) {
      gs.error('{0} - Update PagerDuty Extension error : {1}', me, rest.getError());
      return status;
    }

    if (status === 200) {
      gs.debug('{0} - Successfully Update PagerDuty Extension with ID {1}', me, webhookId);
    }
  },

  /**
   * Delete v2 webhook (extension) in PagerDuty
   * @param {String} webhookId
   * @param {Object} requestBody
   */
  deletePdExtension: function (webhookId) {
    var me = 'deletePdExtension';
    gs.debug('{0} - Delete PagerDuty extension with ID {1}', me, webhookId);

    var feature = 'extensions/' + webhookId;
    var rest = new x_pd_integration.PagerDuty_REST();
    var response = rest.deleteREST(feature);
    var status = response.getStatusCode();

    if (rest.hasError()) {
      gs.error('{0} - Delete PagerDuty Extension error : {1}', me, rest.getError());
    }

    if (status === 204) {
      gs.debug('{0} - Successfully Delete PagerDuty Extension with ID {1}', me, webhookId);
    }
    return status;
  },

  /**
   * Add work notes to an incident
   * @param {GlideRecordSecure} incident
   * @param {String} notes
   * @return void
   */
  _addIncidentWorkNote: function (incident, notes, display) {
    if (display !== 'false') {
      try {
		// CUSTOM HERE - To avoid Incident Already Resolved work_notes
		if (notes.contains("Incident Already Resolved")) {
			return;
		}
		// END OF CUSTOM HERE - To avoid Incident Already Resolved work_notes
        incident.work_notes = x_pd_integration.WorkNotesHelper.build(notes);
        incident.update();
      } catch (ex) {
        gs.error('_addIncidentWorkNote error ' + ex);
      }
    }
  },

  /**
   * Create a PagerDuty user
   * @param {String} sys_user sysid
   * @return {String} PagerDuty user id
   */
  _createPDUser: function (userSysid) {
    var user = new GlideRecordSecure('sys_user');
    if (user.get(userSysid)) {
      gs.info('Creating new user for {0} since auto-provisioning is enabled', user.getDisplayValue());
      var pdp = new x_pd_integration.PagerDutyProvisioning();
      return pdp.provisionUser(user);
    }
  },

  /**
   * Update ServiceNow user record with PagerDuty ID, using import table
   * @param {GlideRecordSecure} user record
   * @param {String} PagerDuty ID for user
   * @return void
   */
  _updateUser: function (userSysId, id) {
    var me = '_updateUser';
    // update user through import set for tracking purposes
    var gr = new GlideRecordSecure('x_pd_integration_pagerduty_user_import');
    gr.setValue('user_sysid', userSysId);
    gr.setValue('id', id);
    gr.insert();
    gs.debug('{0} added import for for user {1} with id:{2}', me, userSysId, id);
  },

  /**
   * Get PagerDuty URL
   * @param {String} PagerDuty endpoint feature
   * @param {String} PagerDuty ID for feature record
   * @return {String} url
   **/
  getPdIncidentUrl: function (feature, id) {
    var baseUrl = gs.getProperty('x_pd_integration.instance_url');
    var url = baseUrl + '/' + feature + '/' + id;
    return url;
  },

  /**
   * Track error
   * @param {String} method reporting error
   * @param {String} error message
   * @return void
   */
  _setError: function (method, msg) {
    this._errorMsg = method + ' error: ' + msg;
    this._hasError = true;
    gs.error('{0} error: {1}', method, msg);
  },

  /**
   * Does class have an error
   * @return {Boolean} has error
   */
  hasError: function () {
    return this._hasError;
  },

  /**
   * Get last error message
   * @return {String} error message
   */
  getError: function () {
    if (!gs.nil(this._errorMsg)) {
      return this._errorMsg;
    }
  },

  /**
   * Get Impact and Urgency via PagerDuty Priority Id
   * @param {String} priority id
   * @return {Object} impact and urgency and priority
   */
  getImpactUrgencyById: function (priorityId) {
    var me = 'getImpactUrgencyById';
    var gr = new GlideRecordSecure('x_pd_integration_pagerduty_priority');
    gr.addQuery('pagerduty_priority_id', priorityId);
    gr.query();
    if (gr.next()) {
      var impact = gr.impact;
      var urgency = gr.urgency;
      var priority = gr.priority;
      var priority_display = gr.priority.getDisplayValue();
      return {
        impact: impact,
        urgency: urgency,
        priority: priority,
        priority_display: priority_display
      };
    }
  },

  /**
   * get Escalation Policy PagerDuty ID
   * @param {GlideRecord} incident
   */
  getEscalationPolicyPdId: function (incident) {
    var epHelper = new x_pd_integration.EscalationPolicyHelper();
    epHelper.setIncidentId(incident.sys_id);
    var snPriorityId = epHelper.getIncidentSnPriorityId();
    return epHelper.getPDEscalationPolicyIdWithPriority(incident.getValue('assignment_group'), snPriorityId);
  },

  // CUSTOM HERE - GET INFO FROM PD
  isValidPDUserID: function(pdUserID) {
		var me = "isValidPDUserID";
		gs.debug("{0} for user {1}", me, pdUserID);

		var feature = 'users/' + pdUserID;
		var rest = new x_pd_integration.PagerDuty_REST();

		var response = rest.getREST(feature, {});
		var responseBody = response.haveError() ? rest.extractPagerDutyErrorResponse(response) : response.getBody();
		var status = response.getStatusCode();
		gs.debug("{0} response: {1}:{2}", me, status, responseBody);

		if (status == 200) {
			return true;
		}
		return false;
	},
	// END OF CUSTOM HERE - GET INFO FROM PD

  handleUnsetEscalationPolicy: function (fn, incident) {
    var display = this.displayIncidentReassignmentNote();
    var notes;
    var taskHelper = new x_pd_integration.TaskEntityHelper(incident);
    if (this.closeOnUnknownUserGroup === 'true') {
      notes = incident.getDisplayValue() + ' assignment group \'' + incident.getDisplayValue('assignment_group') +
        '\' does not have a PagerDuty policy. PagerDuty incident will be closed and the reference removed.';
      // remove reference to the PagerDuty incident. This will also resolve the PagerDuty incident
      taskHelper.setPdId('---unlinked---');
      this._addIncidentWorkNote(incident, notes, display);
    } else {
      notes = incident.getDisplayValue() + ' assignment group \'' + incident.getDisplayValue('assignment_group') +
        '\' does not have a PagerDuty policy. Failed to reassign policy.';
      this._setError(fn, notes);
      this._addIncidentWorkNote(incident, notes, display);
    }
  },

  handleNilAssigneePdId: function (fn, incident) {
    var display = this.displayIncidentReassignmentNote();
    var notes = 'Could not find a PagerDuty user for the assignee "' +
      incident.assigned_to.name + '". The incident will not be assigned to the user in PagerDuty,';

    this._setError(fn, notes);
    this._addIncidentWorkNote(incident, notes, display);
  },

  /**
   * Builds the message channel client name from the client data received in the webhook event.
   * If the client is the current ServiceNow instance, the name will be "ServiceNow", otherwise it will be
   * either "&lt;name&gt; (&lt;url&gt;)" or undefined.
   * @param {String} name - Name of the client that originated the webhook event
   * @param {String} url - URL of the client that originated the webhook event
   * @returns {String} "ServiceNow" if the client is the current ServiceNow instance, otherwise "&lt;name&gt; (&lt;url&gt;)" or undefined
   */
  getMessageChannelClient: function (name, url) {
    if (!gs.nil(name) &amp;&amp; !gs.nil(url)) {
      // eslint-disable-next-line es5/no-es6-methods
      if (name.startsWith(this.clientName) &amp;&amp; url.startsWith(this.baseUrl)) {
        return this.clientName;
      }
      return name + ' (' + url + ')';
    }
  },

  /**
   * Verifies if the client that originated the webhook event is the current ServiceNow instance.
   * @param {String} messageClient - Information about the client that originated the webhook event
   * @returns {Boolean} true if the client is the current ServiceNow instance
   */
  isClientServiceNow: function (messageClient) {
    return !gs.nil(messageClient) &amp;&amp; messageClient === this.clientName;
  },

  /**
   * Clear the PagerDuty incident field
   * @param {GlideRecordSecure} incident
   */
  _clearPDIncident: function (entry) {
    x_pd_integration.TaskEntityHelper.setPdId(entry, '');
    entry.update();
  },

  /**
   * Set the PagerDuty incident field to ---error---
   * @param {GlideRecordSecure} incident
   */
  _errorPDIncident: function (entry) {
    x_pd_integration.TaskEntityHelper.setPdId(entry, '---error---');
    entry.update();
  },

  /**
   * Generate internal error message
   * @param {String} source function name
   * @param (String) status code
   * @param (String) error message
   * @return (String) conmposed message
   */
  _generateInternalErrorMessage: function (source, status, errorMessage) {
    return gs.getMessage('{0} response status:{1}, error:{2}', [source, status, errorMessage]);
  },

  /**
   * Generate work note error message
   * @param (String) custom note
   * @param (String) error message
   * @return (String) conmposed message
   */
  _generateNoteErrorMessage: function (note, errorMessage) {
    if (note === '') {
      note = 'PagerDuty REST failed: ';
    }
    return gs.getMessage(note + errorMessage);
  },

  displayIncidentTriggeringNote: function () {
    return gs.getProperty('x_pd_integration.show_incident_triggering_note');
  },

  displayIncidentAssignmentNote: function () {
    return gs.getProperty('x_pd_integration.show_incident_assignment_note');
  },

  displayIncidentReassignmentNote: function () {
    return gs.getProperty('x_pd_integration.show_incident_reassignment_note');
  },

  type: 'PagerDuty'
};
]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;PagerDuty_v8.1&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2015-10-22 14:47:01&lt;/sys_created_on&gt;&lt;sys_id&gt;e4398d454f9f8e00dd657bb28110c794&lt;/sys_id&gt;&lt;sys_mod_count&gt;810&lt;/sys_mod_count&gt;&lt;sys_name&gt;PagerDuty&lt;/sys_name&gt;&lt;sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="PagerDuty Incident Resolution Platform"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_e4398d454f9f8e00dd657bb28110c794&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-03-31 02:15:50&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;sys_es_latest_script action="INSERT_OR_UPDATE"&gt;&lt;id&gt;e4398d454f9f8e00dd657bb28110c794&lt;/id&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2025-02-18 19:00:27&lt;/sys_created_on&gt;&lt;sys_id&gt;57c32361c3fb121040d0becdd4013137&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-02-18 19:00:27&lt;/sys_updated_on&gt;&lt;table&gt;sys_script_include&lt;/table&gt;&lt;use_es_latest&gt;false&lt;/use_es_latest&gt;&lt;/sys_es_latest_script&gt;&lt;/record_update&gt;</payload>
<payload_hash>-578718225</payload_hash>
<remote_update_set display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Child">2dd0afe2c3ac221040d0becdd40131d1</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-03-31 04:08:31</sys_created_on>
<sys_id>69d0afe2c3ac221040d0becdd40131d7</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>195e9fbd7590000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-03-31 04:08:31</sys_updated_on>
<table />
<target_name>PagerDuty</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>4307cb226b2c221076e87035881decb9</update_guid>
<update_guid_history>4307cb226b2c221076e87035881decb9:-578718225,37d4cb66e3e8221015d27555e5ed0cb0:1949963270,6524cbeaf7e82210c5ee9010e273f73d:1123332703,ff1ff2e299e8221024572139a6b7b5e5:-842098334,58aac9d585ac62106f8b25590a99250d:2123954726,86e90995b560a2107d2d84bc3454f6af:-918118914,edc84dd17560a210af4c9a662feccb6b:-1553014398,4baf04d5482c6210c478d55dc0076678:-764976510,9d0f84d5292c621066ad75226ebf4eb1:1908011276,c7ae84d5e32c6210f0d53d0887447fc9:-602286298,f69c8c5dcba862109a5e7a614f7d7568:-1156104821,36db0895f12c6210362f191f282104fb:1909270942,a0c8bf4d83a8621051cbb2774d8e3160:-1693451375,c867b30d74a862103f479d6708fea10f:2130833703,23557b05166862103a46d7d88e7675ca:322836391,ad80b3c9a4686210a60a8cee54d61e58:1544769149,228fa3c9bb686210fb8b6c7a059b4a8b:1303283389,6b0b07c146812010e9f6d042254b2f39:346355725,b85b1a41f1012010fa051080572aa6e7:-1572586562,bac54ff8f20520108e5d57d88347f007:-1000097142,b5b9793093812010cc6e8259bb7a4ef0:-2071067404,1bc8b5bcff4120102fe982ec4ba1dc1c:1736505980,f1e3f93c734120104a6cb2a648939255:-537168375,44a03978e2412010cac2be929c4035e8:-1171175574,16f77a6abc0c2010e2952a568890a7c6:-1335994,383f9f965704201093660f2d48f51124:1207570158,b9375f1aec042010ea190c952943a560:-1504867263,38651fd6450420105d94e8ff551a8449:233084279,7c459bd68a042010acd9fbddf069f3ef:1320564593,589dcf92aa04201085fe4898f85a7f41:1108453138,d78ac35229042010a6aa2c4c7682fa1d:-1419222324,321acb1285042010e916cca4f61b1642:-1508929928,3bb9cb12e1042010cde1202cfe3ed23c:772473203,4287839e17c020108157ebfcf138b61d:1108453138,f8d68f9e45c02010b80519ac9db4e525:-1031344888,34c68f9ee4c020103943c6456e28a43c:-1605980217,8a65cf5ed1c02010998fcc3ce896bff3:-1513120874,10654f5ef0c020100e7da77d397e3942:-1449724588,5e150fde6680201015626d4fc7a15d8f:-280338535,533ea29e23802010b40454d649792d4f:-2097791593,f6cdaedef6802010e7b3f6748e5ebab6:1966287511,4715fa4c5c802010d7816a4c808a74a1:-1006469837,0ea6ca1c60631010c72764a89a590100:-1724331167,f5660e1c33631010a9dc45393937a7bc:-1735915001,a146ca1cab6310105f5c8c67185dbc39:-229599417,1046821c6c6310109e3d867a747e585c:-667893561,59d44ed8fc6310100aba57da6109a007:1469400177,e6048e98a0631010dac2875d44605409:237228455,a4b342982e631010f6b62d4c881b8330:2103167981,e7424e586f6310105f2200914501958b:135678385,cc424e5869631010f4d3f4e55cb01285:1550631359,9d124e5826631010378ec2b978e31877:135678385,f0d18618cf6310108dcf2bcc10fff450:1017234837,e6b14e58e763101026d0a2bd44ce8b80:-1418664113,aba10e5800631010561554c4e951708e:843491049,80a10e581e6310101a06e91864fd9f89:-2026948619,e8710618c863101013cd81f42013bfe4:843491049,cef00a180f63101087a0fba0a8301032:-1670429955,d67f391888631010a6389041ed20ea2d:1626165323,490f7118796310105043d013bad1d005:-350731901,d6eeb1189f631010b36a61db72b7c1c7:-680608113,72de7118b3631010a9791fc434569500:-1996182809,e8ce7dd417631010343f158dfd1297c5:31512203,65be7dd4d3631010831a4067f643f8cd:740704739,367ebdd497631010ef0421a5adfcff5c:-1996182809,5e6e7dd4cc6310108a0b4fc3f3a2fbc7:-1058619463,9f4eb1d4386310106162b5e8194d4ed3:-1996182809,e4bdbd945a6310106669d3a1387ed41b:-636712213,0a4db1d4c9631010082b215443bd84cc:-243942321,284df554f3631010e2f6296f75e767f5:-480460550,feccbd94fd63101060d45af61426b015:-1419435322,b83c3994f26310106528938846c24827:2113300305,361b2fba660710107fa1a49680774c23:2017383683,e5faabba180710102e43834d7a98ee4d:1006185603,6124bd3e4c2250100f6d58a73f5bd327:1990103057,59390ab93c2e901014235dd27b8cc932:784332102,a709cebd252e901028f8d65fafa68eb7:1016372586,3b89eebb92861010e723690b98efd919:770902363,3b89eebb92861010e723690b98efd919:770902363,8927627b0e86101023d2380fcbbc4765:1849913764,18afc3626e751010b038afc8ba62ffb4:530020552,077e43628a75101004cf78cbdd89ff34:-96976273,c02e4322d7751010ef6e1dd667595e1c:770902363,f67c4faeff35101092dafbdceff6ed34:-96976273,1c9b7f341e711010f3840f4b0bf078f0:770902363,d1a87b706d711010cf35d4260a9c81b1:-44074517,83d67ff84b311010d940a8a38a566422:574642548,b8b2bbb831311010d6cd71b80f0d3c74:-1808161212,69c0d3e40171101055bb96ffbfcbe5f3:574642548,4bd7c987d96d1010d1eaa0d0cedb6d60:995364901,2dd49bc69a6510109871f96163b978f4:-1165356875,23adbe866b25101015cf7b871ecdce0d:1823315057,d966bece84e110106a393102585fa197:342173728,e4e536ce52e11010f4c08aa4177bce0c:236839627,78a20b3c40291010e933fb0096c58fa6:255730117,ec54a93758151010cbc276edf0de7e9b:-2366419,d52ebc9064519010a0e54a8232a4a9fb:1342748141,276338d46b11901052fed9413f7fce0d:1074061284,f831b0d01711901075a38dda3e55de37:1342748141,eefad5488c1550107d83e0a22a8006df:-1888893231,dad0d88464115010e3cc7ce90c76012c:98922314,de1f80445b1150104b9bb2b2cd08228a:-1996661236,376ec004c6115010866dc6d430e4577e:-563966067,7cccc480a611501053d7cb218f555200:-1888893231,5b9b4c409f115010d370f3d2b8945bd2:-13572001,c6adcd7f53181010e35e7ed148699656:1832526962,2a7ef5ba8b18101098832c96b8685e14:1330181999,669246bcc9101010a7924f0c521f449d:-945225648,775d2cd431d4501044a65aae34c2f26d:1493874082,c9f6d490af9450101a93c6b5ebb9faae:-1130479831,53861c90449450107866e5fb91e3f715:-254930328,7d54f5e326cc10108c9691c29b3a6118:-1075234500,5032f96365cc1010f43d8ff3cbc81f83:-1072100757,b91f6d23b5cc10101798c0a925890dc6:-1846293649,89fd6d23b8cc1010ea78ef187d665c8d:108780900,14dd692388cc10108a14aa8ffb840bd3:-1472489467,8b9de523a2cc101085ee792f440b9fd5:-2093481844,98fca12385cc1010c8bdbc5e07e96151:1957013709,6e1c69effc8c10100c5e16172997dab8:-2059610278,57372debab8c1010faa70e00a8f5727e:-1472489467,4786e12f848c1010463ef27c52a6ec76:-1055980147,6fc5706fd20c101094f4cef6c199767e:-100121684,9d4d6892064c10100882f2d37b4b4c41:-1985236605,cf80d5e09bf3001066d6c890e9ec77ad:-904621084,37f0c124dc730010df6e76dbe1ce2069:-942504718,be80c524db730010b3fc96b5bd925f78:1719343601,f99e70e0c17300103431cdf2c970e58d:-805366357,758e466be1ab401074cc89c786ecc389:-665152006,a81b0ee7adab401065e7b0d1867e1100:111490851,53694aa768ab401088d3d9e1fc0a2999:-942504718,64f8ce2757ab40109a85c8e4874f3954:1217415879,4e85cae331ab40104fe773b330b3b097:-1783871421,dbf48ae3f5ab4010a2114f4b470efa02:1217415879,ea9486634aab4010807aed17bc197f7b:-1592496253,85a0c62360ab40102c8a0588186733c5:-2243000,8f6002631bab4010567951ebf8054658:-1332166174,c2108eef6f6b401017aeb5c790bb7123:1450040040,9d7cf5af7c6b4010d607d5c9e018d0c7:691519074,451cf5af2e6b40102d584b55b7565954:-789916150,2229f92f546b4010db13c02f7be9f901:1064716144,72e7b5eb3a6b4010acfc38fdb11e1549:-1368591835,df97b5eb206b401016a8e19b90c81cb5:-2095428990,781099200ef300107f92d7849dfa05a7:-904621084,15594be3e8ab001049d0926818fc4e14:-816876748,33a53364f06b4010afe14242d73c27e2:-76988475,64bd4facf2a74010adf5418108abec24:-59657657,df7b65e977c300105a0746d837b7196f:-559656778,4bd7e5a547c3001088b9c12187f72487:74716154,e7f5a565d8c3001029cac6bd80a9700b:-776147446,8a933c95d807001086b92324812a370f:-1299435187,97f6e499d6c300109920c2da872bb4a2:-1011469374,e851e891ebc300106212bc5ffa318fe1:2124492764,5d5e9cdd3e830010a9a9ae6d3533e7ca:-1011469374,16ac1cdd08830010fed3d5a72ab2d072:2124492764,ddb75c9974830010087cb9de43fdbac2:850447642,c0f61019b28300105c6bb609c5a6eb13:2124492764,83b3d4d51c8300100d225339b5a5fd3d:1300592224,16e29895fc83001084c1aecf2b94c9fc:-2077001552,2de018d178830010482780676c1f2a04:1300592224,ed2fc4d13c830010eeb5852493bb453c:-2077001552,03ee84d1a8830010c8500eba27717036:1861773970,69bd845194830010ae06c6f5720d9fd9:-2077001552,a58530d04d83001039ae9db0404e58e0:1252718163,3260745406430010e866007df97d7a19:1427382406,ce796a5654213300d6880b2a4cba8d2a:-787274105,ce796a5654213300d6880b2a4cba8d2a:-787274105,ddd8ea16b22133000c065d80a9027483:-1017287311,3867aad239213300fd25aa21068aefdf:539128874,c786aed2c82133005b7b576c9cb93094:-2100497845,bed56a12ab21330051b7a2d935779bb2:-2089983890,c996f4c6d5e133006414167e72ade67c:508993286,5c40ae094851330093ab5915c6d9ee80:202286526,277e5ec5fb5133007a62be60865986c6:-1915436782,aead1a4532513300e919ae18280ececa:202286526,43a75efb134133002fd12f25097bbc13:514302238,0bd65efff54133008a90cefe8008748f:1461120811,37b59efb3d41330058b85bf06f0ecbc4:279495722,2c355ebf72413300fe9abfcce11f7d78:-601517017,66848c899c01330043b2a3540c551b9a:-1948716023,96dc23de14b0330092c942fecedd5cab:1528961047,cd61eecee7b033004179b346f1ad916e:491324439,d60e968a44b03300ae6ab5b85789c12c:-985864553,de97520a73b0330000283050a3a1b60c:-2054624816,28cb0876e022a7002a5bcd636ac806db:-630938969,fa2856e0d5a033007ace633028cd4413:-986560310,28cb0876e022a7002a5bcd636ac806db:-630938969,28cb0876e022a7002a5bcd636ac806db:-630938969,fe5b48760c22a70054bc27c446e737dc:1941556607,32bac4769f22a700b21eb0f59e36a301:-2117085883,7044c17032eaa30066476c2072e5fed7:-1660071188,bde3cb0ca36a6300e871dab0517347b0:-620581952,c1c2c7889a6a630076ec4f04d1f4c390:1632858924,aa0efa082f6a63000f89d94d8c901f4c:-131462795,d59ab6845a6a6300ced124a86a5dcf7d:0,b429360cd32a63003ff2aff6280a3e14:1703866264,c633311c458ce3005ded7c48c8065839:655367124,390d525a9fbb1300b616bf9cee8b6466:-1864927376,2f9b906a18002300a9d3ae0be284132b:-1067271124</update_guid_history>
<update_set display_value="" />
<view />
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</application>
<category>customer</category>
<comments />
<name>sys_properties_f35e83804f329200dd657bb28110c78b</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_properties"&gt;&lt;sys_properties action="INSERT_OR_UPDATE"&gt;&lt;choices/&gt;&lt;description&gt;Resolve PagerDuty incident if ServiceNow incident is assigned to a group that doesn't exist in PagerDuty (default=true)&lt;/description&gt;&lt;ignore_cache&gt;false&lt;/ignore_cache&gt;&lt;is_private&gt;false&lt;/is_private&gt;&lt;name&gt;x_pd_integration.close_incident_on_unknown&lt;/name&gt;&lt;read_roles&gt;x_pd_integration.admin&lt;/read_roles&gt;&lt;suffix&gt;close_incident_on_unknown&lt;/suffix&gt;&lt;sys_class_name&gt;sys_properties&lt;/sys_class_name&gt;&lt;sys_created_by&gt;PagerDuty_v7.9&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2016-04-10 21:36:59&lt;/sys_created_on&gt;&lt;sys_id&gt;f35e83804f329200dd657bb28110c78b&lt;/sys_id&gt;&lt;sys_mod_count&gt;24&lt;/sys_mod_count&gt;&lt;sys_name&gt;x_pd_integration.close_incident_on_unknown&lt;/sys_name&gt;&lt;sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="PagerDuty Incident Resolution Platform"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_properties_f35e83804f329200dd657bb28110c78b&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-03-26 20:29:40&lt;/sys_updated_on&gt;&lt;type&gt;boolean&lt;/type&gt;&lt;value&gt;false&lt;/value&gt;&lt;write_roles&gt;x_pd_integration.admin&lt;/write_roles&gt;&lt;/sys_properties&gt;&lt;sys_translated_text action="delete_multiple" query="documentkey=f35e83804f329200dd657bb28110c78b"/&gt;&lt;/record_update&gt;</payload>
<payload_hash>201928701</payload_hash>
<remote_update_set display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Child">2dd0afe2c3ac221040d0becdd40131d1</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-03-31 04:08:31</sys_created_on>
<sys_id>6dd0afe2c3ac221040d0becdd40131d3</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>195d4257dd50000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-03-31 04:08:31</sys_updated_on>
<table />
<target_name>x_pd_integration.close_incident_on_unknown</target_name>
<type>System Property</type>
<update_domain>global</update_domain>
<update_guid>e5719511e5a0a2108b1ed25ba08b98dc</update_guid>
<update_guid_history>e5719511e5a0a2108b1ed25ba08b98dc:201928701,ed6292e1a837121025273ad754039905:-580097104</update_guid_history>
<update_set display_value="" />
<view />
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</application>
<category>customer</category>
<comments />
<name>sys_script_include_37c32361c3fb121040d0becdd401315c</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;public&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_pd_integration.PagerDutyCustom&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description&gt;/*** Changes made to this script are not supported by PagerDuty ***/&amp;#13;
PagerDuty integration methods&lt;/description&gt;&lt;mobile_callable&gt;false&lt;/mobile_callable&gt;&lt;name&gt;PagerDutyCustom&lt;/name&gt;&lt;sandbox_callable&gt;false&lt;/sandbox_callable&gt;&lt;script&gt;&lt;![CDATA[/*** Changes made to this script are not supported by PagerDuty ***/
/* eslint no-underscore-dangle: 0 */
var PagerDutyCustom = Class.create();
PagerDutyCustom.prototype = {
	initialize: function () {
		this.pd = new x_pd_integration.PagerDuty();
		this.baseUrl = gs.getProperty('glide.servlet.uri');
	},

	/**
	 * Updates the PagerDuty incident on CI change
	 * @param {GlideRecord} grIncident - incident record
	 * @param {String} currentUserSysId - current user sys_id
	 * @param {String} pdIncidentId - PagerDuty incident ID to resolve on unlink
	 */
	updateOnCIChange: function (grIncident, currentUserSysId, pdIncidentId) {
		var fn = 'updateOnCIChange';
		var snIncidentNumber = grIncident.getDisplayValue();
		var snIncidentId = grIncident.getValue('sys_id');
		var ciName = grIncident.getDisplayValue('cmdb_ci');

		gs.debug('{0} {1}', fn, snIncidentNumber);

		var currentUserEmail = this.pd.getValidEmail(currentUserSysId);

		var currentUser = new GlideRecordSecure('sys_user');
		var currentUserName;
		if (currentUser.get(currentUserSysId)) {
			currentUserName = currentUser.getValue('user_name');
		} else {
			currentUserName = currentUserSysId;
		}

		var pdNote = 'Service updated since the linked incident was changed to a different mapped Configuration Item.';
		this.pd.postIncidentNote(
			pdIncidentId,
			pdNote,
			currentUserName,
			false,
			snIncidentId
		);

		var feature = 'incidents/' + pdIncidentId;

		var body = {
			incident: {
				type: 'incident',
				service: {
							"id": grIncident.cmdb_ci.x_pd_integration_pagerduty_service.toString(),
							"type": "service_reference"
						}
				}
		};

		var rest = new x_pd_integration.PagerDuty_REST();
		var clientUrl = this.baseUrl + grIncident.getLink();
		var response = rest.putREST(feature, body, currentUserEmail, clientUrl);

		var responseBody = response.getBody();

		var status = response.getStatusCode();
		gs.debug('{0} response: {1}:{2}', fn, status, responseBody);

		if (response.haveError()) {
			this.pd._setError(this.pd._generateInternalErrorMessage(fn, status, this.pd._extractPDIncidentError(response)));
			// Starting custom code - Reprocess in case of missing privileges
			var customErrorMessage = this.pd._extractPDIncidentError(response);
			if (customErrorMessage.contains('not authorized') || customErrorMessage.contains('User Not Found')) {
				this.updateOnCIChange(grIncident, 'system');
				return;
			}
			// End of custom code
			this.pd._addIncidentWorkNote(grIncident, this.pd._generateNoteErrorMessage('PagerDuty error during update: ', this.pd._extractPDIncidentError(response)));
			return;
		}

		if (status === 200) {
			gs.info('{0}: PagerDuty incident {1} has been resolved since the linked ServiceNow incident was reassigned to a non-mapped group', fn, pdIncidentId);
		} else {
			this.pd._setError(this.pd._generateInternalErrorMessage(fn, status, this.pd._extractPDIncidentError(response)));
			// Starting custom code - Reprocess in case of missing privileges
			var customErrorMessage2 = this.pd._extractPDIncidentError(response);
			if (customErrorMessage2.contains('not authorized') || customErrorMessage2.contains('User Not Found')) {
				this.updateOnCIChange(grIncident, 'system');
				return;
			}
			// End of custom code
			this.pd._addIncidentWorkNote(grIncident, this.pd._generateNoteErrorMessage('PagerDuty error during resolve: ', this.pd._extractPDIncidentError(response)));
		}
	},

	type: 'PagerDutyCustom'
};
]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2025-02-18 19:00:29&lt;/sys_created_on&gt;&lt;sys_id&gt;37c32361c3fb121040d0becdd401315c&lt;/sys_id&gt;&lt;sys_mod_count&gt;3&lt;/sys_mod_count&gt;&lt;sys_name&gt;PagerDutyCustom&lt;/sys_name&gt;&lt;sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="PagerDuty Incident Resolution Platform"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_37c32361c3fb121040d0becdd401315c&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-02-18 19:22:22&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;sys_es_latest_script action="INSERT_OR_UPDATE"&gt;&lt;id&gt;37c32361c3fb121040d0becdd401315c&lt;/id&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2025-02-18 19:13:12&lt;/sys_created_on&gt;&lt;sys_id&gt;cab62361c3fb121040d0becdd4013138&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-02-18 19:13:12&lt;/sys_updated_on&gt;&lt;table&gt;sys_script_include&lt;/table&gt;&lt;use_es_latest&gt;false&lt;/use_es_latest&gt;&lt;/sys_es_latest_script&gt;&lt;/record_update&gt;</payload>
<payload_hash>1661061302</payload_hash>
<remote_update_set display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Child">2dd0afe2c3ac221040d0becdd40131d1</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-03-31 04:08:31</sys_created_on>
<sys_id>6dd0afe2c3ac221040d0becdd40131d6</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1951a82eb9c0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-03-31 04:08:31</sys_updated_on>
<table />
<target_name>PagerDutyCustom</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>d0d8efe5bafb12100c9bcb420bf25591</update_guid>
<update_guid_history>d0d8efe5bafb12100c9bcb420bf25591:1661061302,cdf7a7a57afb121059c218b89032c911:916270592,56b6a361d6fb12100ce32b854d5c3e3c:550169762,b3c3236153fb1210d0b4c4ac5772365f:-340011513</update_guid_history>
<update_set display_value="" />
<view />
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</application>
<category>customer</category>
<comments />
<name>sys_script_a3785c914f221200dd657bb28110c7f2</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;&lt;sys_script action="INSERT_OR_UPDATE"&gt;&lt;abort_action&gt;false&lt;/abort_action&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;action_delete&gt;false&lt;/action_delete&gt;&lt;action_insert&gt;true&lt;/action_insert&gt;&lt;action_query&gt;false&lt;/action_query&gt;&lt;action_update&gt;true&lt;/action_update&gt;&lt;active&gt;true&lt;/active&gt;&lt;add_message&gt;false&lt;/add_message&gt;&lt;advanced&gt;true&lt;/advanced&gt;&lt;change_fields&gt;false&lt;/change_fields&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;collection&gt;incident&lt;/collection&gt;&lt;condition&gt;gs.isLoggedIn() &amp;amp;&amp;amp; gs.isInteractive()&lt;/condition&gt;&lt;description/&gt;&lt;execute_function&gt;true&lt;/execute_function&gt;&lt;filter_condition table="incident"&gt;x_pd_integration_incidentISNOTEMPTY^x_pd_integration_incidentNOT LIKE---^work_notesVALCHANGES^EQ&lt;item endquery="false" field="x_pd_integration_incident" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/&gt;&lt;item endquery="false" field="x_pd_integration_incident" goto="false" newquery="false" operator="NOT LIKE" or="false" value="---"/&gt;&lt;item endquery="false" field="work_notes" goto="false" newquery="false" operator="VALCHANGES" or="false" value=""/&gt;&lt;item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/&gt;&lt;/filter_condition&gt;&lt;is_rest&gt;false&lt;/is_rest&gt;&lt;message/&gt;&lt;name&gt;PD Copy worknote to PagerDuty incident&lt;/name&gt;&lt;order&gt;50&lt;/order&gt;&lt;priority&gt;100&lt;/priority&gt;&lt;rest_method/&gt;&lt;rest_method_text/&gt;&lt;rest_service/&gt;&lt;rest_service_text/&gt;&lt;rest_variables/&gt;&lt;role_conditions/&gt;&lt;script&gt;&lt;![CDATA[function onAfter(current, previous) {
	//This function will be automatically called when this rule is processed.
	var eventName = "x_pd_integration.post_worknote";
	gs.debug("Firing event {0} for {1}", eventName, current.getDisplayValue());
	gs.eventQueue(eventName, current, gs.getUserName());
}]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;PagerDuty_v8.1&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2016-04-01 19:19:43&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;a3785c914f221200dd657bb28110c7f2&lt;/sys_id&gt;&lt;sys_mod_count&gt;29&lt;/sys_mod_count&gt;&lt;sys_name&gt;PD Copy worknote to PagerDuty incident&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="PagerDuty Incident Resolution Platform"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_a3785c914f221200dd657bb28110c7f2&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;PagerDuty_v8.1&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2018-04-20 13:42:48&lt;/sys_updated_on&gt;&lt;template/&gt;&lt;when&gt;after&lt;/when&gt;&lt;/sys_script&gt;&lt;sys_translated_text action="delete_multiple" query="documentkey=a3785c914f221200dd657bb28110c7f2"/&gt;&lt;/record_update&gt;</payload>
<payload_hash>1772988059</payload_hash>
<remote_update_set display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Child">2dd0afe2c3ac221040d0becdd40131d1</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-03-31 04:08:31</sys_created_on>
<sys_id>a1d0afe2c3ac221040d0becdd40131d5</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1951a5333650000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-03-31 04:08:31</sys_updated_on>
<table>incident</table>
<target_name>PD Copy worknote to PagerDuty incident</target_name>
<type>Business Rule</type>
<update_domain>global</update_domain>
<update_guid>74ec5f25bbbb1210d4741ded46035a20</update_guid>
<update_guid_history>74ec5f25bbbb1210d4741ded46035a20:1772988059,ec94accca8136300bdb71e56f600342c:1772988059,ec94accca8136300bdb71e56f600342c:1772988059,ec94accca8136300bdb71e56f600342c:1772988059,ec94accca8136300bdb71e56f600342c:1772988059</update_guid_history>
<update_set display_value="" />
<view />
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</application>
<category>customer</category>
<comments />
<name>sys_script_4e2fa26197d301106115bbc3f153af3a</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;&lt;sys_script action="INSERT_OR_UPDATE"&gt;&lt;abort_action&gt;false&lt;/abort_action&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;action_delete&gt;false&lt;/action_delete&gt;&lt;action_insert&gt;true&lt;/action_insert&gt;&lt;action_query&gt;false&lt;/action_query&gt;&lt;action_update&gt;true&lt;/action_update&gt;&lt;active&gt;true&lt;/active&gt;&lt;add_message&gt;false&lt;/add_message&gt;&lt;advanced&gt;true&lt;/advanced&gt;&lt;change_fields&gt;false&lt;/change_fields&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;collection&gt;incident&lt;/collection&gt;&lt;condition&gt;gs.isLoggedIn()&lt;/condition&gt;&lt;description/&gt;&lt;execute_function&gt;false&lt;/execute_function&gt;&lt;filter_condition table="incident"&gt;x_pd_integration_incidentISEMPTY^ORx_pd_integration_incident=---reopened---^ORx_pd_integration_incident=---unlinked---^priorityIN1,2^assignment_group.x_pd_integration_pagerduty_escalationISNOTEMPTY^stateNOT IN7,8^priorityVALCHANGES^ORassignment_groupVALCHANGES^ORstateVALCHANGES^ORcmdb_ciVALCHANGES^cmdb_ci.x_pd_integration_pagerduty_serviceISNOTEMPTY^ORassignment_group.x_pd_integration_pagerduty_serviceISNOTEMPTY^cmdb_ci.nameISNOTEMPTY^NQx_pd_integration_incidentISEMPTY^ORx_pd_integration_incident=---reopened---^ORx_pd_integration_incident=---unlinked---^priorityIN3,4,5^assignment_group.x_pd_integration_pagerduty_escalationISNOTEMPTY^stateNOT IN7,8^assignment_group.name=NOC^ORassignment_group.name=CRE^cmdb_ci.nameISNOTEMPTY^priorityVALCHANGES^ORassignment_groupVALCHANGES^ORstateVALCHANGES^ORcmdb_ciVALCHANGES^NQstateVALCHANGES^x_pd_integration_incident=---reopened---^assignment_group.x_pd_integration_pagerduty_escalationISNOTEMPTY^stateNOT IN7,8^EQ&lt;item endquery="false" field="x_pd_integration_incident" goto="false" newquery="false" operator="ISEMPTY" or="false" value=""/&gt;&lt;item endquery="false" field="x_pd_integration_incident" goto="false" newquery="false" operator="=" or="true" value="---reopened---"/&gt;&lt;item endquery="false" field="x_pd_integration_incident" goto="false" newquery="false" operator="=" or="true" value="---unlinked---"/&gt;&lt;item display_value="1,2" endquery="false" field="priority" goto="false" newquery="false" operator="IN" or="false" value="1,2"/&gt;&lt;item endquery="false" field="assignment_group.x_pd_integration_pagerduty_escalation" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/&gt;&lt;item display_value="7,8" endquery="false" field="state" goto="false" newquery="false" operator="NOT IN" or="false" value="7,8"/&gt;&lt;item display_value="-- None --" endquery="false" field="priority" goto="false" newquery="false" operator="VALCHANGES" or="false" value=""/&gt;&lt;item endquery="false" field="assignment_group" goto="false" newquery="false" operator="VALCHANGES" or="true" value=""/&gt;&lt;item endquery="false" field="state" goto="false" newquery="false" operator="VALCHANGES" or="true" value=""/&gt;&lt;item endquery="false" field="cmdb_ci" goto="false" newquery="false" operator="VALCHANGES" or="true" value=""/&gt;&lt;item endquery="false" field="cmdb_ci.x_pd_integration_pagerduty_service" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/&gt;&lt;item endquery="false" field="assignment_group.x_pd_integration_pagerduty_service" goto="false" newquery="false" operator="ISNOTEMPTY" or="true" value=""/&gt;&lt;item endquery="false" field="cmdb_ci.name" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/&gt;&lt;item endquery="false" field="x_pd_integration_incident" goto="false" newquery="true" operator="ISEMPTY" or="false" value=""/&gt;&lt;item endquery="false" field="x_pd_integration_incident" goto="false" newquery="false" operator="=" or="true" value="---reopened---"/&gt;&lt;item endquery="false" field="x_pd_integration_incident" goto="false" newquery="false" operator="=" or="true" value="---unlinked---"/&gt;&lt;item display_value="3,4,5" endquery="false" field="priority" goto="false" newquery="false" operator="IN" or="false" value="3,4,5"/&gt;&lt;item endquery="false" field="assignment_group.x_pd_integration_pagerduty_escalation" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/&gt;&lt;item display_value="7,8" endquery="false" field="state" goto="false" newquery="false" operator="NOT IN" or="false" value="7,8"/&gt;&lt;item endquery="false" field="assignment_group.name" goto="false" newquery="false" operator="=" or="false" value="NOC"/&gt;&lt;item endquery="false" field="assignment_group.name" goto="false" newquery="false" operator="=" or="true" value="CRE"/&gt;&lt;item endquery="false" field="cmdb_ci.name" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/&gt;&lt;item display_value="-- None --" endquery="false" field="priority" goto="false" newquery="false" operator="VALCHANGES" or="false" value=""/&gt;&lt;item endquery="false" field="assignment_group" goto="false" newquery="false" operator="VALCHANGES" or="true" value=""/&gt;&lt;item endquery="false" field="state" goto="false" newquery="false" operator="VALCHANGES" or="true" value=""/&gt;&lt;item endquery="false" field="cmdb_ci" goto="false" newquery="false" operator="VALCHANGES" or="true" value=""/&gt;&lt;item endquery="false" field="state" goto="false" newquery="true" operator="VALCHANGES" or="false" value=""/&gt;&lt;item endquery="false" field="x_pd_integration_incident" goto="false" newquery="false" operator="=" or="false" value="---reopened---"/&gt;&lt;item endquery="false" field="assignment_group.x_pd_integration_pagerduty_escalation" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/&gt;&lt;item display_value="7,8" endquery="false" field="state" goto="false" newquery="false" operator="NOT IN" or="false" value="7,8"/&gt;&lt;item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/&gt;&lt;/filter_condition&gt;&lt;is_rest&gt;false&lt;/is_rest&gt;&lt;message/&gt;&lt;name&gt;PD Incident Set Waiting&lt;/name&gt;&lt;order&gt;50&lt;/order&gt;&lt;priority&gt;100&lt;/priority&gt;&lt;rest_method/&gt;&lt;rest_method_text/&gt;&lt;rest_service/&gt;&lt;rest_service_text/&gt;&lt;rest_variables/&gt;&lt;role_conditions/&gt;&lt;script&gt;&lt;![CDATA[(function executeRule(current, previous /*null when async*/) {

	// Add your code here

})(current, previous);
]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;PagerDuty_v8.1&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2022-05-06 13:52:04&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;4e2fa26197d301106115bbc3f153af3a&lt;/sys_id&gt;&lt;sys_mod_count&gt;8&lt;/sys_mod_count&gt;&lt;sys_name&gt;PD Incident Set Waiting&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="PagerDuty Incident Resolution Platform"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_4e2fa26197d301106115bbc3f153af3a&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-02-18 18:06:14&lt;/sys_updated_on&gt;&lt;template&gt;x_pd_integration_incident=---waiting---^EQ&lt;/template&gt;&lt;when&gt;before&lt;/when&gt;&lt;/sys_script&gt;&lt;sys_translated_text action="delete_multiple" query="documentkey=4e2fa26197d301106115bbc3f153af3a"/&gt;&lt;sys_es_latest_script action="INSERT_OR_UPDATE"&gt;&lt;id&gt;4e2fa26197d301106115bbc3f153af3a&lt;/id&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2025-02-18 18:03:35&lt;/sys_created_on&gt;&lt;sys_id&gt;1ac61be9c37b121040d0becdd40131e1&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-02-18 18:03:35&lt;/sys_updated_on&gt;&lt;table&gt;sys_script&lt;/table&gt;&lt;use_es_latest&gt;false&lt;/use_es_latest&gt;&lt;/sys_es_latest_script&gt;&lt;/record_update&gt;</payload>
<payload_hash>-368292267</payload_hash>
<remote_update_set display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Child">2dd0afe2c3ac221040d0becdd40131d1</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-03-31 04:08:31</sys_created_on>
<sys_id>a5d0afe2c3ac221040d0becdd40131d4</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1951a3d37ca0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-03-31 04:08:31</sys_updated_on>
<table>incident</table>
<target_name>PD Incident Set Waiting</target_name>
<type>Business Rule</type>
<update_domain>global</update_domain>
<update_guid>cd671be9e87b12106ef1394cbe80bae5</update_guid>
<update_guid_history>cd671be9e87b12106ef1394cbe80bae5:-368292267,e6c69bed8c7b1210c104bca899f75050:-1355946931,aa881b61a7570110ad35c3266a8ccea0:-1326946787,8282572dfc1701106b59aa8cfd497769:958487002,a381d7e9d3170110e79a3a6133d209f5:1201920337,6c01dfa9df1701108ccd03ec999cf5a8:2091727271,e4f0dba94b17011075b868bff5ee1b7d:-2124084867,ab72f6e11fd30110117be7a48627b349:2134752964,ee213261a3d30110f8a26594d1ece0dd:-356560520</update_guid_history>
<update_set display_value="" />
<view />
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</application>
<category>customer</category>
<comments />
<name>sys_script_include_a4f7a99e47722110309973d7826d434a</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_pd_integration.PdWebhookTransformAction&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description&gt;Transformation script for Workflow actions&lt;/description&gt;&lt;mobile_callable&gt;false&lt;/mobile_callable&gt;&lt;name&gt;PdWebhookTransformAction&lt;/name&gt;&lt;sandbox_callable&gt;false&lt;/sandbox_callable&gt;&lt;script&gt;&lt;![CDATA[/*** Changes made to this script are not supported by PagerDuty ***/
var PdWebhookTransformAction = (function () {
  var taskHelper = new x_pd_integration.TaskEntityHelper(target, source.getValue('target_table'));

  function tryTransform () {
    try {
      if (action === 'insert') {
        webhookTransform();
        runInboundFieldRules();
        runCustomFieldsDataSynchronization();
      } else {
        ignore = true;
      }
    } catch (err) {
      gs.error('Error in PdWebhookTransformAction: ' + err);
    }
  }

  function webhookTransform () {
    try {
      var assignmentsSummary = parseAssignmentsSummary(source);
      var newGroupSysId;

      gs.debug('Transform: {0} {1} action on incident {2}', source.getValue('message_type'), action, target.getDisplayValue());
      var assignOnAckOnly = gs.getProperty('x_pd_integration.assign_on_ack_only');
      gs.debug('assignOnAckOnly=' + assignOnAckOnly);

      if (source.getValue('message_type') === 'incident.action.trigger') {
        gs.debug('webhookTransform incident.action.trigger insert for incident {0}', source.getValue('id'));

        taskHelper.setPdId(source.getValue('id'));

        target.short_description = 'PagerDuty: ' + source.getValue('subject');
        if (showIncidentTriggeringNote()) {
          target.work_notes = x_pd_integration.WorkNotesHelper.build('PagerDuty incident was triggered for nonexistent incident, new incident created');
        }
        target.x_pd_integration_incident_key = source.getValue('incident_key');

        newGroupSysId = getGroupSysIdFromEscalationPolicyId(source);
        if (!gs.nil(newGroupSysId)) {
          target.setValue('assignment_group', newGroupSysId);
        }

        if (!gs.nil(source.getValue('service_id')) &amp;&amp; gs.nil(source.getValue('ci_sys_id'))) {
          target.setValue('cmdb_ci', getCISysID(source.getValue('service_id')));
        }

        if (!gs.nil(source.getValue('ci_sys_id'))) {
          target.setValue('cmdb_ci', source.getValue('ci_sys_id'));
        }

		// // CUSTOM HERE - Set On Behalf Of
		// gs.debug("webhookTransformAction - Setting On Behalf Of");
		// var payload = JSON.parse(source.getValue('payload'));
		// // On Behalf Of
		// var assigneePDID = payload.data &amp;&amp; payload.data.assignments &amp;&amp; payload.data.assignments[0] &amp;&amp; payload.incident.assignments[0].assignee;
		// if (assigneePDID) {
		// 	var assigneeSN = new GlideRecord('sys_user');
		// 	assigneeSN.get('x_pd_integration_pagerduty_id', assigneePDID.id);
		// 	target.u_on_behalf_of = assigneeSN.getUniqueValue();
		// }
		// gs.debug("webhookTransformAction - On Behalf Of Set {0}", assigneeSN.getUniqueValue());
		// // END OF CUSTOM HERE
		
        gs.debug("webhookTransformAction - Running Sync Priority");
		syncIncPriority();

		// CUSTOM HERE for NOC and CRE Configuration Item
		gs.debug("webhookTransformAction - Setting NOC and CRE cmdb_ci");
		if ((source.service_name == 'NOC') || (source.service_name == 'CRE')) {

			// Get Custom Fields for NOC / CRE - Get Device CI Name
			var deviceName = '';
			gs.debug("webhookTransform - NOC / CRE device name custom field customization = {0} {1}", source.id, deviceName);
			deviceName = getCustomFieldValue(source.id, 'device_ci_name');
			if (deviceName) {
				var deviceNameGR = new GlideRecord('cmdb_ci');
				if (deviceNameGR.get('name', deviceName)) {
					target.cmdb_ci = deviceNameGR.getUniqueValue();
				} else {
					gs.debug("webhookTransform - NOC / CRE device name custom field customization = {0} {1} not found", source.id, deviceName);
				}
			}
			
			if (payload.data &amp;&amp; payload.data.first_trigger_log_entry &amp;&amp; payload.data.first_trigger_log_entry.channel &amp;&amp; payload.data.first_trigger_log_entry.channel.cef_details &amp;&amp; payload.data.first_trigger_log_entry.channel.cef_details.details &amp;&amp; payload.data.first_trigger_log_entry.channel.cef_details.details.Host) { 
				var client = payload.data &amp;&amp; payload.data.first_trigger_log_entry &amp;&amp; payload.data.first_trigger_log_entry.channel &amp;&amp; payload.data.first_trigger_log_entry.channel.cef_details &amp;&amp; payload.data.first_trigger_log_entry.channel.cef_details.source_origin;
				if ((client.contains('LogicMonitor')) || (client.contains('Kibana,Type:Hardware'))  || (client.contains('Dynatrace'))) {
					var hostname = payload.data.first_trigger_log_entry.channel.cef_details.details.Host;
					var hostnameSN = new GlideRecord('cmdb_ci');
					if (hostnameSN.get('name', hostname)) {
						target.cmdb_ci = hostnameSN.getUniqueValue();
					} else {
						gs.debug("webhookTransform - CI customization = {0} {1} not found", source.id, hostname);
					}
				}
			}
			var client2 = payload.data &amp;&amp; payload.data.first_trigger_log_entry &amp;&amp; payload.data.first_trigger_log_entry.channel &amp;&amp; payload.data.first_trigger_log_entry.channel.cef_details &amp;&amp; payload.data.first_trigger_log_entry.channel.cef_details.source_origin;
			if ((client2.contains('Kibana:Application')) || (client2.contains('Kibana')) &amp;&amp; !(client2.contains('Kibana,Type:Hardware'))) {
				var appName = payload.data.first_trigger_log_entry.channel.cef_details.source_origin;
				if (appName.split("CI:")[1])  {
					appName = appName.split("CI:")[1].split(",")[0];
					var appNameSN = new GlideRecord('cmdb_ci');
					if (appNameSN.get('name', appName)) {
						target.cmdb_ci = appNameSN.getUniqueValue();
					} else {
						gs.debug("webhookTransform - CI customization = {0} {1} not found", source.id, appName);
					}
				}
			}
		}
		// END OF CUSTOM

        // If the status is acknowledged or someone is assigned and acknowledge flag is false,
        // set the Assigned To field to incident
        if (!gs.nil(source.getValue('assigned_to_pd_id')) &amp;&amp; (source.getValue('status') === 'acknowledged' || assignOnAckOnly === 'false')) {
          var assignToUser = getUserByPDID(source.getValue('assigned_to_pd_id'));
          if (gs.nil(assignToUser)) {
            gs.debug(
              'PagerDuty incident {0} was assigned to {1}, but could not find user by PagerDuty ID {2}',
              target.getDisplayValue(), assignmentsSummary, source.getValue('assigned_to_pd_id')
            );
            if (showIncidentAssignmentNote()) {
              target.work_notes = x_pd_integration.WorkNotesHelper.build('PagerDuty incident was assigned to ' + assignmentsSummary +
                ', but ServiceNow could not locate user with PagerDuty ID \'' + source.getValue('assigned_to_pd_id') + '\' to assign the incident to them');
            }
            return;
          }
          // We have a valid user but we need to check if the user belongs to the assignment group of the incident
          // Or ServiceNow will throw an error due to system Business Rule
          if (!gs.nil(newGroupSysId)) {
            var newGroupName = getGroupName(newGroupSysId);
            var allGroupMembersIds = getGroupMemberIds(newGroupSysId);
            if (!allGroupMembersIds.hasOwnProperty(assignToUser.getUniqueValue())) {
            // CUSTOM HERE - DO NOT CLEAR ASSIGNED TO
			//   target.assigned_to = '';
              gs.debug(
                'PagerDuty incident {0} was assigned to {1}, but this user does not belong to the assignment group {2} of the incident',
                target.getDisplayValue(), assignToUser.getDisplayValue(), newGroupName
              );
              if (showIncidentAssignmentNote()) {
                target.work_notes = x_pd_integration.WorkNotesHelper.build('PagerDuty incident was assigned to the ' + newGroupName +
                ' assignment group');
              }
              return;
            }
          }
          gs.debug(
            'PagerDuty incident {0} was assigned to {1}',
            target.getDisplayValue(), assignToUser.getDisplayValue()
          );
          if (showIncidentAssignmentNote()) {
            target.work_notes = x_pd_integration.WorkNotesHelper.build('PagerDuty incident was assigned to the user ' +
            assignToUser.getValue('name'));
          }
          // CUSTOM HERE - Set Assigned to only if it is not default user
          if (source.assigned_to_pd_id != gs.getProperty("x_pd_integration.default_user")) {
            target.assigned_to = assignToUser.getUniqueValue();
          }
        }
        return;
      }
    } catch (e) {
      gs.error('PdWebhookTransformAction, webhookTransform error: {0}', e);
    }
  }

  function getGroupName (sysId) {
    if (!sysId) {
      return '';
    }
    var gr = new GlideRecordSecure('sys_user_group');
    if (gr.get(sysId)) {
      return gr.getValue('name');
    }
    return '';
  }

  /**
   * @param {String} groupId a sys_id of an assignment group
   * @returns {Object} a hash of group member sys_ids
   */
  function getGroupMemberIds (groupId) {
    var ids = {};
    var gr = new GlideRecordSecure('sys_user_grmember');
    gr.addQuery('group', groupId);
    gr.query();
    while (gr.next()) {
      ids[String(gr.user)] = true;
    }
    return ids;
  }

  function runInboundFieldRules () {
    var eventMap = {
      'incident.action.trigger': 'trigger'
    };
    var event = eventMap[source.getValue('message_type')];

    if (event) {
      var pifr = new x_pd_integration.PagerDutyInboundFieldRule();
      pifr.setTargetFieldValuesFromPayload(event, source, target);
    }
  }

	// CUSTOM HERE - New function to get Custom Fields Values
	function getCustomFieldValue(incidentId, customFieldName){
		var me = "getCustomFieldValue";
		gs.debug("{0} Called for PagerDuty Incident Id \"{1}\" Custom Field Name {2}", me, incidentId, customFieldName);
		var customFieldValue = '';
		var feature = 'incidents/' + incidentId + '/custom_fields/values';
		var response = new x_pd_integration.PagerDuty_REST().getREST(feature);
		var responseBody = response.getBody();
		var status = response.getStatusCode();
		if (status == 200) {
			gs.debug("{0} Called for PagerDuty Incident Id \"{1}\" returned 200", me, incidentId);
			var customFields = JSON.parse(response.getBody()).custom_fields;
		}

		for (var i = 0; i &lt; customFields.length; i++){
			if (customFields[i].name == customFieldName) {
				customFieldValue = customFields[i].value;
			}
		}
		gs.debug("{0} Called for PagerDuty Incident Id \"{1}\" Custom Field Value {2}", me, incidentId, customFieldValue);
		return customFieldValue;
	}
	// CUSTOM HERE

  function runCustomFieldsDataSynchronization () {
    var processor = new x_pd_integration.PagerDutyCustomFieldsInboundSync();

    // decode payload and get custom fields
    var decodedPayload = JSON.parse(source.getValue('payload'));
    var customFields = decodedPayload.data.custom_fields || [];
    var event = {
      data: {
        incident: {id: decodedPayload.data.id},
        custom_fields: customFields,
        changed_custom_fields: customFields
      }
    };

    var result = processor.processCustomFieldValuesUpdated(target, event);
    gs.info('Run CustomFields data synchronization for PagerDuty incident {0} with result {1}', target.getDisplayValue(), result);
  }

  function getUserByPDID (pd_id) {
    var gr = new GlideRecordSecure('sys_user');
    if (gr.get('x_pd_integration_pagerduty_id', pd_id)) {
      gs.debug('Webhook transform found user {0} for PageDuty ID {1}', gr.getDisplayValue(), pd_id);
      return gr;
    }
    gs.debug('Webhook transform could not find user for PagerDuty ID {0}', pd_id);
    return null;
  }

  function getCISysID (serviceID) {
    var gr = new GlideRecordSecure('cmdb_ci');
    if (gr.get('x_pd_integration_pagerduty_service', serviceID)) {
      return gr.getValue('sys_id');
    }
    return null;
  }

  function getIncidentPriority (inc_id) {
    var gr = new GlideRecordSecure(source.getValue('target_table'));
    gr.addQuery(taskHelper.getPdIdField(), inc_id);
    gr.query();
    if (gr.next()) {
      return gr.priority;
    }
    return null;
  }

  function getGroupSysIdFromEscalationPolicyId (source) {
    if (gs.nil(source.getValue('escalation_policy_id'))) {
      return null;
    }

    var epHelper = new x_pd_integration.EscalationPolicyHelper();
    return epHelper.getAssignmentGroupIdWithPriority(source.getValue('escalation_policy_id'), source.getValue('priority_id'));
  }

  function syncIncPriority (checkPriorityChanges) {
    gs.info("webhookTransformAction - syncIncPriority (Insert)");
	// Gets P4 from PD integration table
	var gr = new GlideRecordSecure("x_pd_integration_pagerduty_priority");
	gr.addQuery('priority', '4');
	gr.query();
	if (gr.next()) {
		var impact = gr.impact;
		var urgency = gr.urgency;
		var priority = gr.priority;
		var priority_display = gr.priority.getDisplayValue();
		iuObj = {
			impact: impact,
			urgency: urgency,
			priority: priority,
			priority_display: priority_display
		};
	}
	taskHelper.setPriority(iuObj);
	gs.info("webhookTransformAction - syncIncPriority (Insert) - Impact: {0}, Urgency: {1}, Priority: {3}", iuObj.impact, iuObj.urgency, iuObj.priority);

	gs.info("webhookTransformAction - syncIncPriority - Starting send back to PD");
	var eventName = "x_pd_integration.update_priority_only";
	var currentUserSysid = gs.getUser().getID();

	gs.info("webhookTransformAction - syncIncPriority - Priority is different on PD");
	gs.info("webhookTransformAction - syncIncPriority - Firing event {0} for {1}", eventName, target.getDisplayValue());
	gs.eventQueue(eventName, gr, currentUserSysid, source.id);
  }

  function showIncidentTriggeringNote () {
    return gs.getProperty('x_pd_integration.show_incident_triggering_note') === 'true';
  }

  function showIncidentAssignmentNote () {
    return gs.getProperty('x_pd_integration.show_incident_assignment_note') === 'true';
  }

  function parseAssignmentsSummary (source) {
    var payload = JSON.parse(source.getValue('payload'));
    var assignments = payload.data &amp;&amp; payload.data.assignments;
    var assignmentsSummary = [];
    if (assignments) {
      assignments.forEach(function (item) {
        assignmentsSummary.push(item.assignee.summary);
      });
    }
    assignmentsSummary.splice(-2, 2, assignmentsSummary.slice(-2).join(' and '));
    return assignmentsSummary.join(', ');
  }

  return {tryTransform: tryTransform};
})();
]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;PagerDuty_v8.1&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2023-05-16 12:19:50&lt;/sys_created_on&gt;&lt;sys_id&gt;a4f7a99e47722110309973d7826d434a&lt;/sys_id&gt;&lt;sys_mod_count&gt;11&lt;/sys_mod_count&gt;&lt;sys_name&gt;PdWebhookTransformAction&lt;/sys_name&gt;&lt;sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="PagerDuty Incident Resolution Platform"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_a4f7a99e47722110309973d7826d434a&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-03-31 04:04:54&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;sys_es_latest_script action="INSERT_OR_UPDATE"&gt;&lt;id&gt;a4f7a99e47722110309973d7826d434a&lt;/id&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2025-03-31 03:38:15&lt;/sys_created_on&gt;&lt;sys_id&gt;5ae91366c36c221040d0becdd40131d1&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-03-31 03:38:15&lt;/sys_updated_on&gt;&lt;table&gt;sys_script_include&lt;/table&gt;&lt;use_es_latest&gt;false&lt;/use_es_latest&gt;&lt;/sys_es_latest_script&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1368253915</payload_hash>
<remote_update_set display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Child">2dd0afe2c3ac221040d0becdd40131d1</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-03-31 04:08:31</sys_created_on>
<sys_id>a5d0afe2c3ac221040d0becdd40131d7</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>195ea5fb16b0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-03-31 04:08:31</sys_updated_on>
<table />
<target_name>PdWebhookTransformAction</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>f800e7aec06c22109eb2c08620b2a767</update_guid>
<update_guid_history>f800e7aec06c22109eb2c08620b2a767:-1368253915,fe9fd3620aac2210e514e2d864331ee4:-569702269,a54f5f6263ac22100da087e90bf77234:-510754240,dcfed7ae0d6c221000f529343ef36f61:555625772,62ae97227aac2210533a8b21eb9f5f88:1926958112,a43e9722a4ac22100017f9734c80141e:186208376,defd9fea4d6c2210aa3c5acfbc03133b:-1969575391,f7db9f2ec36c221098f75a83b5a7fd30:447927214,018b93ea6e6c2210d579ca4358cf649e:337375432,2ee9d7263b6c221036a67e741956d142:770378629,74cb5b7a3a4a9e103446302e79a61697:509298247,7f3825162b722110b05f28f6baa909eb:1795482597</update_guid_history>
<update_set display_value="" />
<view />
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</application>
<category>customer</category>
<comments />
<name>sys_properties_68da7b86975031108bc07f5e6253afad</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_properties"&gt;&lt;sys_properties action="INSERT_OR_UPDATE"&gt;&lt;choices/&gt;&lt;description&gt;Controls whether the app should fetch the first_trigger_log_entry part of the incident object from PagerDuty API when receiving a webhook or not.&lt;/description&gt;&lt;ignore_cache&gt;false&lt;/ignore_cache&gt;&lt;is_private&gt;false&lt;/is_private&gt;&lt;name&gt;x_pd_integration.fetch_first_trigger_log_entry&lt;/name&gt;&lt;read_roles/&gt;&lt;suffix&gt;fetch_first_trigger_log_entry&lt;/suffix&gt;&lt;sys_class_name&gt;sys_properties&lt;/sys_class_name&gt;&lt;sys_created_by&gt;PagerDuty_v8.1&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2023-07-29 18:00:30&lt;/sys_created_on&gt;&lt;sys_id&gt;68da7b86975031108bc07f5e6253afad&lt;/sys_id&gt;&lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;&lt;sys_name&gt;x_pd_integration.fetch_first_trigger_log_entry&lt;/sys_name&gt;&lt;sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="PagerDuty Incident Resolution Platform"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_properties_68da7b86975031108bc07f5e6253afad&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-03-31 02:57:26&lt;/sys_updated_on&gt;&lt;type&gt;boolean&lt;/type&gt;&lt;value&gt;true&lt;/value&gt;&lt;write_roles/&gt;&lt;/sys_properties&gt;&lt;sys_translated_text action="delete_multiple" query="documentkey=68da7b86975031108bc07f5e6253afad"/&gt;&lt;/record_update&gt;</payload>
<payload_hash>1814101397</payload_hash>
<remote_update_set display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Child">2dd0afe2c3ac221040d0becdd40131d1</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-03-31 04:08:31</sys_created_on>
<sys_id>a9d0afe2c3ac221040d0becdd40131d3</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>195ea21effc0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-03-31 04:08:31</sys_updated_on>
<table />
<target_name>x_pd_integration.fetch_first_trigger_log_entry</target_name>
<type>System Property</type>
<update_domain>global</update_domain>
<update_guid>e4909b6e702c22102ae39e196315761d</update_guid>
<update_guid_history>e4909b6e702c22102ae39e196315761d:1814101397,c96252e1c8371210f992d4c1bad56943:2120289818</update_guid_history>
<update_set display_value="" />
<view />
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</application>
<category>customer</category>
<comments />
<name>sys_script_include_3175a14b4f570240dd657bb28110c736</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;public&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_pd_integration.PagerDutyProvisioning&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description&gt;*** Changes made to this script are not supported by PagerDuty ***&amp;#13;
PagerDuty methods for creating users, group services, and service escalation policies&lt;/description&gt;&lt;mobile_callable&gt;false&lt;/mobile_callable&gt;&lt;name&gt;PagerDutyProvisioning&lt;/name&gt;&lt;sandbox_callable&gt;false&lt;/sandbox_callable&gt;&lt;script&gt;&lt;![CDATA[/*** Changes made to this script are not supported by PagerDuty ***/
var PagerDutyProvisioning = Class.create();
PagerDutyProvisioning.prototype = {
  initialize: function () {
    this._errorMsg = '';
    this._errors = [];
    this._hasError = false;
    this._currentUserEmail = null;
    this.JSON = new global.JSON();
    this.maxBSDescription = 255;
    this.autoCreateSchedule = gs.getProperty('x_pd_integration.auto_provision_group_schedules');
    this.autoCreationPdTeams = gs.getProperty('x_pd_integration.auto_creation_pd_teams');
    this.autoProvisionGrmembers = gs.getProperty('x_pd_integration.auto_provision_grmembers');
    this.autoProvisionUsers = gs.getProperty('x_pd_integration.auto_provision_users');
    this.sn2pdMapping = gs.getProperty('x_pd_integration.sn2pd_mapping');
    this.snAuthUser = gs.getProperty('x_pd_integration.sn_auth_user');
    this.snAuthUserPwd = gs.getProperty('x_pd_integration.sn_auth_userpwd');
    this.defaultLicense = gs.getProperty('x_pd_integration.default_user_license');
    this.provTable = 'x_pd_integration_pagerduty_service_provisioning';
    this.rest = new x_pd_integration.PagerDuty_REST();
    this.servicesProvisioningPage = 'x_pd_integration_services_provisioning';
  },

  /**
   * Provision ServiceNow user into PagerDuty.
   * When in PagerDuty already exists a user with the matching email,
   * update the form with the PagerDuty user ID.
   * @param {GlideRecordSecure} User record
   * @return void
   */
  provisionUser: function (user, role, showMessage) {
    var me = 'provisionUser';
    var pd = new x_pd_integration.PagerDuty();
    var id = pd.getUserIdByEmail(user.getValue('email'));
    gs.debug('{0} user lookup for {1}, id = {2}', me, user.getDisplayValue(), id);

    if (!user.getValue('email')) {
      gs.debug('{0} user {1} has email {2}', me, user.getDisplayValue(), user.getValue('email'));
      gs.addErrorMessage('User [' + user.getValue('name') + '] has not been provisioned. E-mail cannot be empty.');
      return id;
    }

    if (user.getValue('active') === '0') {
      gs.debug('{0} user {1} not active', me, user.getDisplayValue());
      gs.addErrorMessage('User [' + user.getValue('name') + '] has not been provisioned. User is not active.');
      return id;
    }

    if (gs.nil(id)) {
      gs.debug('{0} no PagerDuty user found for {1}, creating user', me, user.getDisplayValue());

      if (gs.nil(role)) {
        role = this._getDefaultUserRole();
      }

      if (gs.nil(showMessage)) {
        showMessage = true;
      }

      // create a new user
      id = this._createPDUser(user, role);

      // create contact method for user's phones
      var phoneFields = ['phone', 'mobile_phone'];
      // TODO - add support for E164 fields
      for (var i = 0; i &lt; phoneFields.length; i++) {
        var field = phoneFields[i];
        var type = 'phone_contact_method'; // default
        if (field === 'mobile_phone') {
          type = 'sms_contact_method';
        }

        var number = user.getValue(field);
        if (!gs.nil(number)) {
          var onlyNumbers = number.match(/[0-9]+/g).join('');
          var countryCode = this._getCountryCode(onlyNumbers);
          if (!gs.nil(countryCode)) {
            var phoneNumber = onlyNumbers.substring(countryCode.length, onlyNumbers.length);
            var contactObj = this._createContactMethod(id, type, phoneNumber, countryCode);
            if (!gs.nil(contactObj)) {
              var contactId = contactObj[0];
              var contactType = contactObj[1];
              gs.debug('{0} Ready to create notification rule contactId{1}, contactType:{2}', me, contactId, contactType);
              if (!gs.nil(contactId)) {
                // create notification rules
                this._createNotificationRule(id, contactId, contactType);
              }
            }
          }
        }
      }

    } else {
      gs.debug('{0} found PagerDuty user for {1}, id = {2}', me, user.getDisplayValue(), id);
      this._updateUser(user, id);
    }

    var message;
    if (this._hasError) {
      var errors = '&lt;br/&gt;' + this._errors.join('&lt;br/&gt;');
      // eslint-disable-next-line es5/no-es6-methods
      if (errors.includes('_createPDUser')) {
        message = 'The user [' + user.getValue('name') + '] has not been provisioned into PagerDuty.' + errors;
        gs.addErrorMessage(message);
      }
    } else {
      message = 'The user [' + user.getValue('name') + '] has been provisioned into PagerDuty.';
      if (showMessage) {
        gs.addInfoMessage(message);
      }
    }

    return id;
  },

  /**
   * Creates PagerDuty service used by default in ServiceNow
   * @param {String} userPdId - PagerDuty user ID to be added as a target
   * in the escalation policy
   * @returns {String} PagerDuty service ID
   */
  provisionDefaultService: function (userPdId) {
    var me = 'provisionDefaultService';
    var serviceName = 'SN:' + this._removeInvalidCharacters('ServiceNow Paging');

    if (!userPdId) {
      this._setError(me, 'Please supply a user PagerDuty id');
      return;
    }

    var provisioned = this.provisionDefaultPolicy(userPdId);
    var policyPdId = provisioned.id;
    if (provisioned.status === 400) {
      this.clearErrors();
      this._setError('The service [' + serviceName + '] already exists in the PagerDuty account');
      return;
    }

    var feature = 'services';
    var postBody = {
      service: {
        type: 'service',
        name: serviceName,
        escalation_policy: {
          id: policyPdId,
          type: 'escalation_policy_reference'
        },
        alert_creation: 'create_alerts_and_incidents',
		incident_urgency_rule: {
          type: 'constant',
          urgency: 'severity_based'
        },
        alert_grouping_parameters: {
          type: 'intelligent'
        },
        auto_pause_notifications_parameters: {
          enabled: true,
          timeout: 300
        }
      }
    };

    var pd = new x_pd_integration.PagerDuty();
    var userEmail = pd.getValidEmail(gs.getUserID());
    var response = this.rest.postREST(feature, postBody, userEmail);
    var status = response.getStatusCode();
    var body = this.JSON.decode(response.getBody());
    gs.debug('{0} response: {1}:{2}', me, status, response.getBody());

    if (response.haveError()) {
      var errorMessage = 'Failed to create [' + serviceName + '] service: ' + this._extractErrorMessage(response);
      this._setError(errorMessage);
      return;
    }

    if (status &lt; 200 || status &gt;= 300) {
      this._setError(me, 'unknown error, status: ' + status + ', body: ' + response.getBody());
      return;
    }

    var serviceId = body.service.id;
    gs.debug(me + '.id = {0}', serviceId);
    this.createServiceWebhook(serviceId);

    return serviceId;
  },

  /**
   * Creates PagerDuty escalation policy to be used for the default service
   * @param {String} userPdId - PagerDuty user ID to be used as a target
   * in the escalation policy
   * @returns {{status: String, id: String}}
   */
  provisionDefaultPolicy: function (userPdId) {
    var me = 'provisionDefaultPolicy';
    var epName = 'SN:' + this._removeInvalidCharacters('ServiceNow Paging EP');

    if (!userPdId) {
      this._setError(me, 'Please supply a user PagerDuty id');
      return;
    }

    var feature = 'escalation_policies';
    var postBody = {
      escalation_policy: {
        type: 'escalation_policy',
        name: epName,
        escalation_rules: [{
          escalation_delay_in_minutes: 30,
          targets: [{
            id: userPdId,
            type: 'user_reference'
          }]
        }]
      }
    };

    var pd = new x_pd_integration.PagerDuty();
    var userEmail = pd.getValidEmail(gs.getUserID());
    var response = this.rest.postREST(feature, postBody, userEmail);
    var status = response.getStatusCode();
    var body = this.JSON.decode(response.getBody());
    gs.debug('{0} response: {1}:{2}', me, status, response.getBody());

    if (response.haveError()) {
      var errorMessage = 'Failed to create [' + epName + '] escalation policy: ' + this._extractErrorMessage(response);
      this._setError(errorMessage);
      return {status: status, id: null};
    }

    if (status &lt; 200 || status &gt;= 300) {
      this._setError(me, 'unknown error, status: ' + status + ', body: ' + response.getBody());
      return {status: status, id: null};
    }
    var id = body.escalation_policy.id;
    return {status: status, id: id};
  },

  /**
   * Provision a default user from ServiceNow to PagerDuty, use an email of the current user
   * @param {String} userId - ServiceNow current user sys id
   * @return {String} userPdId - PagerDuty id of the created user
   */
  provisionDefaultUser: function (userId) {
    var me = 'provisionDefaultUser';
    var userName = 'ServiceNow User';

    if (!userId) {
      this._setError(me, 'Please supply user sys id');
      return;
    }

    var user = new GlideRecordSecure('sys_user');
    if (!user.get(userId)) {
      this._setError(me, 'Could not find a user with sys id: ' + userId);
      return;
    }

    var userEmail = user.getValue('email');
    if (!userEmail) {
      this._setError(me, 'Could not find an email for a user with sys id: ' + userId);
      return;
    }

    var postBody = {
      user: {
        type: 'user',
        name: userName,
        email: userEmail,
        role: 'user'
      }
    };

    var feature = 'users';
    var response = this.rest.postREST(feature, postBody, userEmail);
    var body = this.JSON.decode(response.getBody());
    var status = response.getStatusCode();
    gs.debug('{0} response: {1}:{2}', me, status, response.getBody());

    if (response.haveError()) {
      var errors = body.error.errors.toString();
      if (status === 400) {
        if (errors === 'License error: Bad Request') {
          var upgradeLink = '&lt;a href="https://support.pagerduty.com/docs/billing-invoices-payments" ' +
            'target="_blank" rel="noopener noreferrer"&gt;upgrade your plan&lt;/a&gt;';
          var errorMessage = 'Your PagerDuty account plan has reached the maximum number of users. ' +
            'In order to add a default user, you will need to ' + upgradeLink + '.';

          this._setError(errorMessage);
        } else {
          this._setError('The user [' + userName + '] already exists in the PagerDuty account');
        }
      } else {
        this._setError(this._extractErrorMessage(response));
      }
      return;
    }

    if (status &lt; 200 || status &gt;= 300) {
      this._setError(me, 'unknown error, status: ' + status + ', body: ' + response.getBody());
      return;
    }

    gs.debug('{0} body.user = {1}', me, this.JSON.encode(body.user));
    var userPdId = body.user.id;
    gs.debug('{0} userId = {1}', me, userPdId);
    return userPdId;
  },
  /**
   * Ensure a valid Workflow connection is provisioned
   * @param {Boolean} forceUpdate - If existing, force update with latest configuration
   * @return {String} connId - PagerDuty's Workflow connection ID
   */
  ensureWorkflowConnection: function (forceUpdate) {
    var currentConnectionId = gs.getProperty('x_pd_integration.connection_id');
    // Check first if the connection id is still valid
    var existingConnection = this.searchWorkflowConnectionForCurrentInstance(currentConnectionId);
    if (this._hasError) {
      return null;
    }
    if (!existingConnection) {
      // Not a valid connection, create new one
      return this.provisionWorkflowConnection();
    } else if (forceUpdate) {
      // Update connection is required.
      this.updateWorkflowConnection(existingConnection.id);
    }
    return existingConnection.id;
  },
  /**
   * Provision a Workflow connection from configuration properties
   * @return {String} connId - PagerDuty's Workflow Connection Id
   */
  provisionWorkflowConnection: function () {
    var me = 'provisionWorkflowConnection';
    var baseUrl = gs.getProperty('glide.servlet.uri');
    var webhookRestApi = gs.getProperty('x_pd_integration.webhook_restapi');
    var snUrl = baseUrl + webhookRestApi;
    var instanceName = gs.getProperty('instance_name');
    var rest = new x_pd_integration.PagerDuty_REST();
    var connName = 'ServiceNow instance ' + instanceName;
    var postBody = {
      integrationActionId: 'pagerduty.com:servicenow:integration:1',
      name: connName,
      authenticationSecrets: {
        'ServiceNow User ID': this.snAuthUser,
        'ServiceNow User Password': this.snAuthUserPwd,
        'Connection Name': connName
      },
      serviceUrl: snUrl,
      scopes: ['read', 'write']
    };
    var feature = 'actions/v1/connections';

    gs.debug('[{0}] About to provision connection with name: {1}', me, connName);
    rest.customHeaders += '\nX-EARLY-ACCESS: flex-actions-early-access';
    var response = rest.postREST(feature, postBody);
    if (response.haveError()) {
      this._setError(me, this._extractErrorMessage(response));
      return null;
    }
    var status = response.getStatusCode();
    var body = response.getBody();
    if (status &lt; 201 || status &gt;= 300) {
      this._setError(me, 'Failed to provision workflow connection. Status: ' + status + ', body: ' + body);
      return null;
    }
    var data = this._safeJSONDecode(body);
    return data.id;
  },

  /**
    * Update provisioned Workflow connection
    * @param {String} connectionId - Workflow connection Id to update
    * @return {String} connectionId - Workflow connection Id that was updated
    */
  updateWorkflowConnection: function (connectionId) {
    var me = 'updateWorkflowConnection';
    var instanceName = gs.getProperty('instance_name');
    var baseUrl = gs.getProperty('glide.servlet.uri');
    var webhookRestApi = gs.getProperty('x_pd_integration.webhook_restapi');
    var snUrl = baseUrl + webhookRestApi;
    var rest = new x_pd_integration.PagerDuty_REST();
    var connName = 'ServiceNow instance ' + instanceName;
    var postBody = {
      health: {
        isHealthy: true
      },
      name: connName,
      authenticationSecrets: {
        'ServiceNow User ID': this.snAuthUser,
        'ServiceNow User Password': this.snAuthUserPwd,
        'Connection Name': connName
      },
      serviceUrl: snUrl
    };
    var feature = 'actions/v1/connections/' + connectionId;

    gs.debug('[{0}] About to update connection with name: {1}', me, connName);
    rest.customHeaders += '\nX-EARLY-ACCESS: flex-actions-early-access';
    var response = rest.patchREST(feature, postBody);
    if (response.haveError()) {
      this._setError(me, this._extractErrorMessage(response));
    }
    var status = response.getStatusCode();
    if (status &lt; 200 || status &gt;= 300) {
      this._setError(me, 'Failed to update workflow connection. Status: ' + status + ', body: ' + response.getBody());
    }
    return connectionId;
  },

  /**
  * Search for existing Workflow connections
  * @param {String} connectionId - Workflow connection Id to search for
  * @return {Object} connection - Workflow connection if found or NULL
  */
  searchWorkflowConnectionForCurrentInstance: function (connectionId) {
    var me = 'searchWorkflowConnectionForCurrentInstance';
    var rest = new x_pd_integration.PagerDuty_REST();
    var instanceName = gs.getProperty('instance_name');
    var postBody = {
      integrationActionID: {
        isEqualTo: 'pagerduty.com:servicenow:integration:1'
      }
    };
    var feature = 'actions/v1/connections/search';

    gs.debug('[{0}] About to search for servicenow connections.', me);
    rest.customHeaders += '\nX-EARLY-ACCESS: flex-actions-early-access';
    var response = rest.postREST(feature, postBody);
    if (rest.hasError()) {
      this._setError(me, rest.getError());
      return null;
    }
    // Consider a bad request as an invalid Id
    if (status === 400) {
      return null;
    }
    if (response.haveError()) {
      this._setError(me, this._extractErrorMessage(response));
      return null;
    }
    var body = response.getBody();
    var status = response.getStatusCode();

    if (status &lt; 200 || status &gt;= 300) {
      this._setError(me, 'Failed to search for workflow connections. Status: ' + status + ', body: ' + body);
      return null;
    }

    var data = this._safeJSONDecode(body);
    if (data &amp;&amp; data.count &gt; 0) {
      if (data.total &gt;= 100) {
        gs.warn('[{0}] Search resulted in more than 100 results.', me);
      }
      var i;
      // Always try to find by connectionId first
      if (!gs.nil(connectionId)) {
        for (i = 0; i &lt; data.Connections.length; i++) {
          if (data.Connections[i].id === connectionId) {
            return data.Connections[i];
          }
        }
      }
      // If not found by connectionId, try to find by instance name
      for (i = 0; i &lt; data.Connections.length; i++) {
        if (data.Connections[i].name.indexOf(instanceName) &gt;= 0) {
          return data.Connections[i];
        }
      }
    }
    return null;
  },

  /**
  * Query PD to get all licenses
  * @return {Object} license - has the value and respective id and type as an option string
  */
  getLicenses: function () {
    var me = 'getLicenses';
    var licenses = {
      values: [],
      options: [],
    };
    var feature = '/licenses';
    var rest = new x_pd_integration.PagerDuty_REST();
    var response = rest.getREST(feature);
    if (response !== null) {
      var responseBody = response.haveError() ? response.getErrorMessage() : response.getBody();
      var status = response.getStatusCode();
      gs.debug(feature + ' response: {0}:{1}', status, responseBody);

      if (status === 200) {
        try {
          var parsedData = JSON.parse(responseBody);
          var allLicenses = parsedData.licenses;
          for (var i = 0; i &lt; allLicenses.length; i++) {
            var licenseRoles = allLicenses[i].valid_roles;
            if (licenseRoles.indexOf('admin') &gt;= 0 || licenseRoles.indexOf('user') &gt;= 0 || licenseRoles.indexOf('limited_user') &gt;= 0 || licenseRoles.indexOf('observer') &gt;= 0) {
              licenses.values.push(allLicenses[i].id + ',' + allLicenses[i].type);
              licenses.options.push(allLicenses[i].name);
            }
          }

          return licenses;
        } catch (e) {
          this._setError(me, e.message);
          return licenses;
        }
      } else {
        error = 'PagerDuty licenses could not be fetched.';
        gs.error(error);
        return licenses;
      }
    }
  },

  _getDefaultUserRole: function () {
    var defaultRoleLabel = gs.getProperty('x_pd_integration.default_user_role');

    switch (defaultRoleLabel) {
      case 'Global Admin': return 'admin';
      case 'Manager': return 'user';
      case 'Responder': return 'limited_user';
      case 'Observer': return 'observer';
      default: {
        gs.debug('Failed to resolve Role for label {0}. defaulting to {1}.', defaultRoleLabel, 'user');
        return 'limited_user';
      }
    }
  },

  /**
   * Provisions group members to PagerDuty
   * If user with target email already exists, sets relevant PagerDuty ID
   * @param {GlideRecordSecure} grGroupMember - sys_user_grmember object
   * @returns {Array} users' PagerDuty IDs
   */
  provisionGroupMembers: function (grGroupMember) {
    grGroupMember.addNotNullQuery('user');
    grGroupMember.query();
    var userPdId;
    var usersPdIds = [];
    while (grGroupMember.next()) {
      userPdId = this.provisionUser(grGroupMember.user.getRefRecord(), null, false);
      usersPdIds.push(userPdId);
    }

    return usersPdIds;
  },

  /**
   * Initiates PagerDuty team creation and adds event to the queue for further escalation policy addition,
   * along with group members and manager
   * @param {GlideRecordSecure} grGroup - sys_user_group object
   * @param {String} epId - PagerDuty escalation policy ID
   * @returns {String} PagerDuty team ID
   */
  createPdTeam: function (grGroup, epId) {
    var me = 'createPdTeam';
    gs.debug('{0} group:{1}, epId:{2}', me, grGroup.getValue('name'), epId);

    var teamId = this._createTeam(grGroup);
    if (gs.nil(teamId)) {
      return null;
    }

    if (!epId) {
      epId = grGroup.getValue('x_pd_integration_pagerduty_escalation');
    }

    if (gs.nil(epId)) {
      this._setError(me, 'Failed to get escalation policy');
      return null;
    }

    gs.eventQueueScheduled(
      'x_pd_integration.add_users_to_pd_team',
      grGroup,
      teamId,
      epId,
      new GlideDateTime().addSeconds(1)
    );

    return teamId;
  },

  /**
   * Adds to escalation policy, users, and manager to the PagerDuty team
   * @param {GlideRecordSecure} grGroup - sys_user_group object
   * @param {String} teamId - PagerDuty team ID
   * @param {String} epId - PagerDuty escalation policy ID
   */
  addEpAndUsersToPdTeam: function (grGroup, teamId, epId) {
    this._addEpToTeam(epId, teamId);

    var usersPdIds = this._getGroupMembersPdIds(grGroup);

    usersPdIds.forEach(function (userPdId) {
      this.addUserToPdTeam(userPdId, teamId);
    }, this);

    if (grGroup.getValue('manager')) {
      var grUser = grGroup.manager.getRefRecord();
      var managerPdId =
        grUser.getValue('x_pd_integration_pagerduty_id') ||
        this.provisionUser(grUser, 'observer');
      this.addUserToPdTeam(managerPdId, teamId, {manager: true});
    }
  },

  /**
   * Adds user to the PagerDuty team
   * @param {String} pdUserId - PagerDuty user ID
   * @param {String} teamId - PagerDuty team ID
   * @param {Object} opts - additional options (e.g., {manager: true})
   */
  addUserToPdTeam: function (pdUserId, teamId, opts) {
    var me = 'addUserToPdTeam';
    var payload = {};
    if (opts &amp;&amp; opts.manager) {
      payload.role = 'manager';
    }
    var feature = 'teams/' + teamId + '/users/' + pdUserId;
    var response = this.rest.putREST(feature, payload, this._getCurrentUserEmail());
    var status = response.getStatusCode();
    gs.debug('{0} response: {1}:{2}', me, status, response.getBody());

    if (status !== 204) {
      this._setError(me, 'User with PagerDuty ID ' + pdUserId + ' has not been added to the team with ID ' + teamId + '.');
    }
  },

  removeUserFromPdTeam: function (pdUserId, teamId, group) {
    var me = 'removeUserFromPdTeam';
    gs.debug('{0} pdUserId:{1}, teamId:{2}', me, pdUserId, teamId);
    var response = this.rest.deleteREST('teams/' + teamId + '/users/' + pdUserId);
    var status = response.getStatusCode();
    gs.debug('{0} response: {1}:{2}', me, status, response.getBody());

    if (status !== 204) {
      this._setError(me, 'Failed remove user from team, ' + pdUserId);
      var pd = new x_pd_integration.PagerDuty();
      var errorMessage = pd.getUserNameByPDID(pdUserId) + ' could not removed from the ' + pd.getTeamNameByPDID(teamId) +
        ' Team in PagerDuty. This is likely due to the user still being on a corresponding Escalation Policy in PagerDuty. You can remove the user from the team manually in PagerDuty.';
      group.x_pd_integration_pd_error_message = errorMessage;
      group.update();
    }
  },

  /**
   * Creates PagerDuty team based on ServiceNow group
   * @param {GlideRecordSecure} grGroup - sys_user_group object
   * @returns {String} PagerDuty team ID
   */
  _createTeam: function (grGroup) {
    var me = '_createTeam';
    gs.debug('{0} group:{1}', me, grGroup.getDisplayValue());
    var postBody = {
      team: {
        type: 'team',
        name: this._removeInvalidCharacters(grGroup.getValue('name')),
        description: grGroup.getValue('description') || ''
      }
    };
    var response = this.rest.postREST('teams', postBody, this._getCurrentUserEmail());

    var status = response.getStatusCode();
    gs.debug('{0} response: {1}:{2}', me, status, response.getBody());

    if (status === 402) {
      this._setError(me, 'PagerDuty account does not have the "teams" feature.');
      return null;
    } else if (status !== 201) {
      var message = this._extractErrorMessage(response);
      this._setError(me, message);
      gs.addErrorMessage('Team for the group [' + grGroup.getValue('name') + '] has not been created. ' + message);
      return null;
    }

    var body = JSON.parse(response.getBody());
    var teamId = body.team.id;
    gs.addInfoMessage('Team for the group [' + grGroup.getValue('name') + '] has been created.');

    return teamId;
  },

  /**
   * Adds escalation policy to the PagerDuty team
   * @param {String} epId - PagerDuty escalation policy ID
   * @param {String} teamId - PagerDuty team ID
   */
  _addEpToTeam: function (epId, teamId) {
    var me = '_addEpToTeam';
    gs.debug('{0} epId:{1} teamId:{2}', me, epId, teamId);
    var feature = 'teams/' + teamId + '/escalation_policies/' + epId;
    var response = this.rest.putREST(feature, {}, this._getCurrentUserEmail());
    var status = response.getStatusCode();
    gs.debug('{0} response: {1}:{2}', me, status, response.getBody());

    if (status === 402) {
      this._setError(me, 'PagerDuty account does not have the "teams" feature.');
    } else if (status !== 204) {
      this._setError(me, 'Failed to add escalation policy to the team with PagerDuty ID ' + teamId + '.');
    }
  },

  /**
   * Gets group members' PagerDuty IDs
   * @param {GlideRecordSecure} grGroup - sys_user_group object
   * @returns {Array} users' PagerDuty IDs
   */
  _getGroupMembersPdIds: function (grGroup) {
    var usersPdIds = [];
    var grGroupMember = new GlideRecordSecure('sys_user_grmember');
    grGroupMember.addQuery('group', grGroup.getValue('sys_id'));
    grGroupMember.addNotNullQuery('user.x_pd_integration_pagerduty_id');
    grGroupMember.query();
    while (grGroupMember.next()) {
      usersPdIds.push(String(grGroupMember.user.x_pd_integration_pagerduty_id));
    }

    return usersPdIds;
  },

  _getGroupManagerPdId: function(group) {
    var groupManagerSysId = group.manager.sys_id.toString();
    var user = new GlideRecordSecure('sys_user');
    user.get(groupManagerSysId);
	// CUSTOM HERE - Check if user is already created
    if (group.manager.x_pd_integration_pagerduty_id) {
      groupManagerPdId = group.manager.x_pd_integration_pagerduty_id.toString();
	} else {
      groupManagerPdId = this.provisionUser(user, 'observer');
	}
    // user roles
    /*
      admin                   Global Admin
      limited_user            Responder
      observer                Observer
      owner                   Owner
      read_only_user          Stakeholder
      restricted_access       Restricted Access
      read_only_limited_user  Limited Stakeholder
      user                    Manager
    */
    return groupManagerPdId;
  },

  /**
   * Get country code from provided phone number
   * @param {String} phone number
   * @return {String} country code
   */
  _getCountryCode: function (phoneNumber) {
    var COUNTRY_CODES = [880, 32, 226, 359, 387, 1246, 681, 590, 1441, 673, 591, 973, 257, 229, 975, 1876, 267, 685, 599, 55, 1242, 441534, 375, 501, 7, 250, 381, 670, 262, 993, 992, 40, 690, 245, 1671, 502, 30, 240, 590, 81, 592, 441481, 594, 995, 1473, 44, 241, 503, 224, 220, 299, 350, 233, 968, 216, 962, 385, 509, 36, 852, 504, 58, 1787, 970, 680, 351, 47, 595, 964, 507, 689, 675, 51, 92, 63, 870, 48, 508, 260, 212, 372, 20, 27, 593, 39, 84, 677, 251, 252, 263, 966, 34, 291, 382, 373, 261, 590, 212, 377, 998, 95, 223, 853, 976, 692, 389, 230, 356, 265, 960, 596, 1670, 1664, 222, 441624, 256, 255, 60, 52, 972, 33, 246, 290, 358, 679, 500, 691, 298, 505, 31, 47, 264, 678, 687, 227, 672, 234, 64, 977, 674, 683, 682, 225, 41, 57, 86, 237, 56, 61, 242, 236, 243, 420, 357, 61, 506, 599, 238, 53, 268, 963, 599, 996, 254, 211, 597, 686, 855, 1869, 269, 239, 421, 82, 386, 850, 965, 221, 378, 232, 248, 7, 1345, 65, 46, 249, 1809, 1767, 253, 45, 1284, 49, 967, 213, 598, 262, 961, 1758, 856, 688, 886, 1868, 90, 94, 423, 371, 676, 370, 352, 231, 266, 66, 228, 235, 1649, 218, 379, 1784, 971, 376, 1268, 93, 1264, 1340, 354, 98, 374, 355, 244, 1684, 54, 61, 43, 297, 91, 35818, 994, 353, 62, 380, 974, 258, 1];

    for (var i = 4; i &gt;= 1; i--) {
      var countryCode = phoneNumber.substr(0, i);
      for (var j = 0; j &lt; COUNTRY_CODES.length; j++) {
        if (COUNTRY_CODES[j] === parseInt(countryCode, 10)) {
          return countryCode;
        }
      }
    }
    return null;
  },

  /**
   * Create user contact methods from user phone number
   * @param {String} User PagerDuty ID
   * @param {String} contact type [email_contact_method, phone_contact_method, push_notification_contact_method, sms_contact_method]
   * @param {String} address
   * @return {String} contact method ID
   */
  _createContactMethod: function (userID, type, address, countryCode) {
    var me = '_createContactMethod';
    gs.debug('{0} creating contact method for userID {1}, type:{2}, address:{3}', me, userID, type, address);

    var postBody = {
      contact_method: {
        type: type,
        address: address,
        country_code: countryCode
      }
    };

    var pd = new x_pd_integration.PagerDuty();
    var userEmail = pd.getValidEmail(gs.getUserID());
    var feature = 'users/' + userID + '/contact_methods';
    var response = this.rest.postREST(feature, postBody, userEmail);
    var body = this.JSON.decode(response.getBody());
    var status = response.getStatusCode();
    gs.debug('{0} response: {1}:{2}', me, status, response.getBody());

    if (response.haveError()) {
      var errCode = body.error.code;
      var errors = body.error.errors.toString();
      var errorMessage = 'error: ' + body.error.message;
      this._setError(me, errCode + ':' + errorMessage + ':' + errors);
      return;
    }

    if (status === 200 || status === 201) {
      gs.debug('{0} body.contact_method= {1}', me, this.JSON.encode(body.contact_method));
      var contactID = body.contact_method.id;
      var contactType = body.contact_method.type;
      gs.debug('{0} userId = {1}, contactID = {2}, contactType = {3}', me, userID, contactID, contactType);
      return [contactID, contactType];
    }
    this._setError(me, 'unknown error, (' + status + ') body:' + response.getBody());
  },

  /**
   * Create notification rules for user phone number
   * @param {String} contact method ID
   * @return void
   */
  _createNotificationRule: function (userID, contactID, contactType) {
    var me = '_createNotificationRule';
    gs.debug('{0} creating notifcation rule for contactID {1}', me, contactID);

    if (gs.nil(contactID)) {
      this._setError(me, 'Missing required contactID');
      return;
    }

    var postBody = {
      notification_rule: {
        type: 'assignment_notification_rule',
        start_delay_in_minutes: 0,
        contact_method: {
          id: contactID,
          type: contactType
        },
        urgency: 'high'
      }
    };

    var pd = new x_pd_integration.PagerDuty();
    var userEmail = pd.getValidEmail(gs.getUserID());
    var feature = 'users/' + userID + '/notification_rules';
    var response = this.rest.postREST(feature, postBody, userEmail);
    var body = this.JSON.decode(response.getBody());
    var status = response.getStatusCode();
    gs.debug('{0} response: {1}:{2}', me, status, response.getBody());

    if (response.haveError()) {
      var errCode = body.error.code;
      var errors = body.error.errors.toString();
      var errorMessage = 'error: ' + body.error.message;

      this._setError(me, errCode + ':' + errorMessage + ':' + errors);
      return;
    }

    if (status === 200 || status === 201) {
      gs.debug('{0} body.notification_rule= {1}', me, this.JSON.encode(body.notification_rule));
    } else {
      this._setError(me, 'unknown error, (' + status + ') body:' + response.getBody());
    }
  },

  /**
   * Update ServiceNow user record with PagerDuty ID, using import table
   * @param {GlideRecordSecure} user record
   * @param {String} PagerDuty ID for user
   * @return void
   */
  _updateUser: function (user, id) {
    var me = '_updateUser';
    // update user through import set for tracking purposes
    var gr = new GlideRecordSecure('x_pd_integration_pagerduty_user_import');
    gr.setValue('user_sysid', user.getUniqueValue());
    gr.setValue('id', id);
    gr.insert();
    gs.debug('{0} added import for for user {1} with id:{2}', me, user.getDisplayValue(), id);
  },

  /**
   * Create a new PagerDuty user
   * @param {GlideRecordSecure} user record
   * @param {String} PagerDuty role level
   * (admin|limited_user|observer|owner|read_only_user|restricted_access|
   * read_only_limited_user|user)
   * @return void / userid
   */
  _createPDUser: function (user, role) {
    var me = '_createPDUser';
    gs.debug('{0} creating user for {1} with {2} role', me, user.getDisplayValue(), role);

    var postBody = {
      user: {
        type: 'user',
        name: user.getDisplayValue(),
        email: user.getValue('email'),
        role: role
      }
    };

    var title = user.getValue('title');
    if (!gs.nil(title)) {
      postBody.user.job_title = title;
    }

    if (!gs.nil(this.defaultLicense)) {
      var idTypeList = this.defaultLicense.split(',');
      postBody.user.license = {
        id: idTypeList[0],
        type: idTypeList[1]
      };
    }

    var pd = new x_pd_integration.PagerDuty();
    var userEmail = pd.getValidEmail(gs.getUserID());
    var feature = 'users';
    var response = this.rest.postREST(feature, postBody, userEmail);
    var body = this.JSON.decode(response.getBody());
    var status = response.getStatusCode();
    gs.debug('{0} response: {1}:{2}', me, status, response.getBody());

    if (response.haveError()) {
      var errCode = body.error.code;
      var errors = body.error.errors.toString();
      var errorMessage = 'error: ' + body.error.message;

      this._setError(me, errCode + ':' + errorMessage + ':' + errors);
      return;
    }

    if (status === 200 || status === 201) {
      gs.debug('{0} body.user = {1}', me, this.JSON.encode(body.user));
      var userId = body.user.id;
      gs.debug('{0} userId = {1}', me, userId);

      this._updateUser(user, userId);
      return userId;
    }
    this._setError(me, 'unknown error, (' + status + ') body:' + response.getBody());
  },

  _getCurrentOrDefaultUserPdId: function () {
    var me = '_getCurrentOrDefaultUserPdId';
    var grUser = new GlideRecordSecure('sys_user');
    var userPdId;
    if (grUser.get(gs.getUserID())) {
      userPdId = grUser.getValue('x_pd_integration_pagerduty_id');
      gs.debug('{0} found userPdId {1} in user record', me, userPdId);

      if (gs.nil(userPdId)) {
        if (this.autoProvisionUsers === 'true') {
          gs.debug('{0} auto-provisioning enabled, creating PagerDuty user for ID:{1}', me, userPdId);
          gs.info(
            '{0} current user \'{1}\' does not have a PagerDuty ID, auto-provisioning enabled, attempting to create it',
            me, userPdId
          );

          userPdId = this.provisionUser(grUser);
          gs.debug('{0} provisioned new user {1}:{2}', me, grUser.getDisplayValue(), userPdId);
        } else {
          // attempt to use default user from property
          var defaultUserId = gs.getProperty('x_pd_integration.default_user');
          if (gs.nil(defaultUserId)) {
            gs.error('{0} attempting to use default user property but it is empty, aborting group provisioning', me);
          } else {
            userPdId = defaultUserId;
          }
        }
      }
    }

    return userPdId;
  },

  /**
   * Creates PagerDuty escalation policy (and optionally provisions group members),
   * depending on configuration settings also creates schedule, team, service, and webhook
   * @param {GlideRecordSecure} grGroup - sys_user_group object
   * @param {String} userPdId - PagerDuty user ID
   * @param {Object} opts - additional options (e.g., {reduce_targets: 'true'})
   * @returns {Object} object with saved PagerDuty IDs
   */
  provisionGroupService: function (grGroup, userPdId, opts) {
    var me = 'provisionGroupService';

    if (grGroup.getValue('x_pd_integration_pagerduty_service')) {
      gs.error('{0} group {1} already has a service ID, aborting provisioning', me, grGroup.getDisplayValue());
      gs.addErrorMessage('[' + grGroup.getValue('name') + '] group already has a PagerDuty service ID. Provisioning has been cancelled.');
      return;
    }

    var scheduleId;
    if (this.autoCreateSchedule === 'true') {
      scheduleId = this.createSchedule(grGroup);
    }

    var epId;
    var mappedGroupMembersPdIds = this._getGroupMembersPdIds(grGroup);

    if (this.autoProvisionGrmembers === 'true') {
      var grGroupMember = new GlideRecordSecure('sys_user_grmember');
      if (grGroupMember.get('group', grGroup.getValue('sys_id'))) {
        var groupMembersPdIds = this.provisionGroupMembers(grGroupMember);
        if (opts &amp;&amp; opts.reduce_targets === 'true') {
          groupMembersPdIds = groupMembersPdIds.slice(0, 49);
        }
        epId = this._createPolicy(grGroup, groupMembersPdIds, scheduleId &amp;&amp; [scheduleId]);
      } else {
        return gs.addErrorMessage('"Provision Assignment Group members into PagerDuty" option is checked, but the group does not contain members. Provisioning has been canceled.');
      }
    } else {
    //   epId = this._createPolicy(grGroup, mappedGroupMembersPdIds, scheduleId &amp;&amp; [scheduleId]);
	// CUSTOM HERE - Provision the manager and adds to the array
      if (!gs.nil(grGroup.manager)) {
        var groupManagerPdId = this._getGroupManagerPdId(grGroup);
      }
      //provisionedGroupMembers.push(groupManagerPdId);
      if (groupManagerPdId) {
        epId = this._createPolicy(grGroup, [groupManagerPdId], scheduleId &amp;&amp; [scheduleId]);
      } else {
		epId = this._createPolicy(grGroup, [userPdId], scheduleId &amp;&amp; [scheduleId]);
      }
	}

    if (!epId) {
      gs.error('{0} failed to create escalation policy, cannot create group service', me);
      return;
    }

    var teamId;
    if (this.autoCreationPdTeams === 'true') {
      teamId = this.createPdTeam(grGroup, epId);
    }

    var serviceId;
    var webhookId;
    var message = 'The group [' + grGroup.getValue('name') + '] has been provisioned into PagerDuty. ';
    if (this.sn2pdMapping === 'Assignment Groups map to PagerDuty') {
      serviceId = this._createPdService(grGroup, epId);
      if (!serviceId) {
        gs.error('{0}: failed to create service', me);
        return;
      }

      webhookId = this.createServiceWebhook(serviceId, grGroup);
      message += gs.nil(teamId)
        ? 'The service and an escalation policy were created.'
        : 'The service, an escalation policy, and the team were created.';
      gs.addInfoMessage(message);
    } else {
      message += 'The escalation policy was created.';
      gs.addInfoMessage(message);
    }

    return this.updateGroupPdIds(grGroup, {
      escalation_id: epId,
      schedule_id: scheduleId,
      service_id: serviceId,
      webhook_id: webhookId,
      team_id: teamId
    });
  },

  /**
   * Creates PagerDuty service, webhook subscription, and
   * escalation policy if Change Group (assignment_group column)
   * in the Configuration Item (CI) form is not set to the mapped Group [sys_user_group]
   * @param {GlideRecordSecure} grCi - cmdb_ci object
   * @param {String} userPdId - PagerDuty user ID
   * @param {Object} opts - additional options (e.g., {reduce_targets: true}
   * on Group provisioning, when the number of group members more than 49)
   * @returns {String} PagerDuty service ID
   */
  provisionCIService: function (grCi, userPdId, opts) {
    var me = 'provisionCIService';
    var fnDesc = 'Failed to provision the service for the CI [' + grCi.name + ']';

    gs.debug('{0} ci:{1}, userPdId:{2}', me, grCi.getDisplayValue(), userPdId);

    if (!userPdId) {
      userPdId = this._getCurrentOrDefaultUserPdId();
    }

    if (!gs.nil(grCi.x_pd_integration_pagerduty_service)) {
      this._setError(fnDesc, 'the configuration item already has the service id');
      return;
    }

    var policyId;
    if (!gs.nil(grCi.support_group)) {
      var grGroup = grCi.support_group.getRefRecord();
      if (!gs.nil(grGroup.sys_id)) {
        var epHelper = new x_pd_integration.EscalationPolicyHelper();
        policyId = epHelper.getPDEscalationPolicyId(grGroup.sys_id);
        if (!policyId) {
          policyId = this.provisionGroupService(grGroup, userPdId, opts).escalation_id;
        }
      } else {
        this._setError(fnDesc, 'group [' + grGroup.name + '] does not exist');
        return;
      }
    } else {
      policyId = this._createPolicy(grCi, [userPdId]);
    }

    if (gs.nil(policyId)) {
      this._setError(fnDesc, 'escalation policy was not created');
      return;
    }

    var serviceId = this._createPdService(grCi, policyId);
    if (gs.nil(serviceId)) {
      this._setError(fnDesc, 'failed to create service');
      return;
    }

    var webhookId = this.createServiceWebhook(serviceId, grCi);

    this._updateCI(grCi, serviceId, webhookId);

    return serviceId;
  },

  /**
   * Creates PagerDuty Schedule
   * @param {GlideRecord} sys_user_group object
   * @returns {String} PagerDuty Schedule ID
   */
  createSchedule: function (grGroup) {
    var me = 'createSchedule';
    var pdScheduleId;
    gs.debug('{0} group:{1}', me, grGroup.getDisplayValue());
    var feature = 'schedules';
    var currentDate = new Date();
    var inOneMonth = new Date();
    var numberOfDaysToAdd = 30;
    inOneMonth = new Date(inOneMonth.setDate(inOneMonth.getDate() + numberOfDaysToAdd));
    var zoneName = 'America/Los_Angeles';
    var pdUserId;
    if (gs.nil(grGroup.manager)) {
      var firstGroupMemberSysId = this._getFirstGroupMemberSysId(grGroup);
      var snUserId = firstGroupMemberSysId || gs.getUserID();
      var grUser = new GlideRecordSecure('sys_user');
      if (!grUser.get(snUserId)) {
        gs.addErrorMessage('The schedule can\'t be created since there are no users for the scheduling layer.');
        return;
      }
      pdUserId = this.provisionUser(grUser);
    } else {
      pdUserId = this.provisionUser(grGroup.manager.getRefRecord());
    }
    var groupName = this._removeInvalidCharacters(grGroup.getDisplayValue());
    var postBody = {
      schedule: {
        type: feature,
        time_zone: zoneName,
        name: 'SN-' + groupName,
        description: 'Schedule was created by ServiceNow',
        schedule_layers: [
          {
            name: 'ServiceNow default schedule layer',
            start: currentDate.toISOString(),
            end: null,
            rotation_virtual_start: currentDate.toISOString(),
            rotation_turn_length_seconds: 86400,
            users: [
              {
                id: pdUserId,
                type: 'user'
              }
            ]
          }
        ]
      }
    };
    var pd = new x_pd_integration.PagerDuty();
    var userEmail = pd.getValidEmail(gs.getUserID());
    var response = this.rest.postREST(feature, postBody, userEmail);
    var status = response.getStatusCode();
    gs.debug('_createSchedule response: {0}:{1}', status, response.getBody());

    if (status === 200 || status === 201) {
      var body = this.JSON.decode(response.getBody());
      pdScheduleId = body.schedule.id;
      gs.addInfoMessage('Schedule for the group [' + groupName + '] has been created.');
      gs.debug('schedule.id = {0}', pdScheduleId);
    } else {
      this._setError(me, this._extractErrorMessage(response));
      gs.addErrorMessage('Schedule for the group [' + groupName + '] has not been created. ' + this._extractErrorMessage(response));
      gs.error('Error in _createSchedule: ' + response.getErrorMessage());
    }

    return pdScheduleId;
  },

  /**
   * Creates a webhook subscription
   * @param {String} pdServiceId - PagerDuty service ID
   * @param {GlideRecordSecure} grRec - record from a table (e.g., cmdb_ci, sys_user_group),
   * used to populate x_pd_integration_pagerduty_webhook column with ID
   * overrides task_type from global settings
   * @returns {String} PagerDuty webhook ID
   */
  createServiceWebhook: function (pdServiceId, grRec) {
    var me = 'createServiceWebhook';
    var webhookId;

    try {
      var v3wh = new x_pd_integration.v3webhook();
      webhookId = v3wh.create(pdServiceId, grRec);
    } catch (e) {
      this._setError(me, e.message);
    }

    return webhookId;
  },

  /**
   * Update ServiceNow group record with PagerDuty ids from props object
   * @param {GlideRecordSecure} group record
   * @param {Object} props - object with keys &amp; values for update ServiceNow group record
   * @return {Object} - object with only saved ids;
   */
  updateGroupPdIds: function (group, props) {
    var me = '_updateGroupPdIds';
    gs.debug('{0} try to update pd ids for group:{1}', me, group.getDisplayValue());
    var gr = new GlideRecordSecure('x_pd_integration_pagerduty_group_import');
    gr.setValue('group_sysid', group.getUniqueValue());

    Object.keys(props).forEach(function (key) {
      if (props[key]) {
        gr.setValue(key, props[key]);
      } else {
        delete props[key];
      }
    });

    gr.insert();
    gs.debug('{0} added import for for group {1} with {2}', me, group.getDisplayValue(), this.JSON.encode(props));
    return props;
  },

  /**
   * @deprecated since version 5.0, left for backward compatibility
   * Update ServiceNow group record with PagerDuty service, policy ID and webhook ID, using import table
   * @param {GlideRecordSecure} group record
   * @param {String} PagerDuty service ID
   * @param (String) PagerDuty escalation policy ID
   * @param (String) PagerDuty webhook ID
   * @return void
   */
  _updateGroup: function (group, serviceID, escalationID, webhookID, scheduleID) {
    var me = '_updateGroup';
    // update user through import set for tracking purposes
    var gr = new GlideRecordSecure('x_pd_integration_pagerduty_group_import');
    gr.setValue('group_sysid', group.getUniqueValue());
    gr.setValue('escalation_id', escalationID);
    gr.setValue('service_id', serviceID);
    gr.setValue('webhook_id', webhookID);
    if (scheduleID) {
      gr.setValue('schedule_id', scheduleID);
    }
    gr.insert();
    gs.debug(
      '{0} added import for for group {1} with service:{2}, policy:{3}, schedule:{4} and webhook:{5}', me, group.getDisplayValue(),
      serviceID,
      escalationID,
      scheduleID,
      webhookID
    );
  },

  /**
   * @deprecated since version 5.0, left for backward compatibility
   * Update ServiceNow group record with PagerDuty policy ID using import table
   * @param {GlideRecordSecure} group record
   * @param (String) PagerDuty escalation policy ID
   * @return void
   */
  _updateGroupEP: function (group, escalationID) {
    var me = '_updateGroupEP';
    // update group through import set for tracking purposes
    var gr = new GlideRecordSecure('x_pd_integration_pagerduty_group_import');
    gr.setValue('group_sysid', group.getUniqueValue());
    gr.setValue('escalation_id', escalationID);
    gr.insert();
    gs.debug('{0} added import for for group {1} with policy:{2}', me, group.getDisplayValue(), escalationID);
  },

  /**
   * Update ServiceNow ci record with PagerDuty service, policy ID and webhook ID, using import table
   * @param {GlideRecordSecure} ci record
   * @param {String} PagerDuty service ID
   * @param (String) PagerDuty webhook ID
   * @return void
   */
  _updateCI: function (ci, serviceID, webhookID) {
    var me = '_updateCI';
    // update CI through import set for tracking purposes
    var gr = new GlideRecordSecure('x_pd_integration_pagerduty_ci_import');
    gr.setValue('cmdb_ci_sysid', ci.getUniqueValue());
    gr.setValue('service_id', serviceID);
    gr.setValue('webhook_id', webhookID);
    gr.insert();
    gs.debug('{0} added import for ci {1} with service:{2} and webhook:{3}', me, ci.getDisplayValue(), serviceID, webhookID);
  },

  /**
   * Creates PagerDuty service
   * @param {GlideRecordSecure} grRec - record of a table (e.g., cmdb_ci, sys_user_group)
   * @param {String} epId - PagerDuty escalation policy ID
   * @returns {String} PagerDuty service ID
   */
  _createPdService: function (grRec, epId) {
    var me = '_createPdService';
    var serviceName = 'SN:' + this._removeInvalidCharacters(grRec.getDisplayValue());

    var feature = 'services';
    var postBody = {
      service: {
        type: 'service',
        name: serviceName,
        status: 'active',
        escalation_policy: {
          id: epId,
          type: 'escalation_policy_reference'
        },
        alert_creation: 'create_alerts_and_incidents',
		incident_urgency_rule: {
          type: 'constant',
          urgency: 'severity_based'
        },
        alert_grouping_parameters: {
          type: 'intelligent'
        },
        auto_pause_notifications_parameters: {
          enabled: true,
          timeout: 300
        }
      }
    };

    var pd = new x_pd_integration.PagerDuty();
    var userEmail = pd.getValidEmail(gs.getUserID());
    var response = this.rest.postREST(feature, postBody, userEmail);

    var body = this.JSON.decode(response.getBody());
    var status = response.getStatusCode();
    gs.debug('{0} response: {1}:{2}', me, status, response.getBody());

    if (response.haveError()) {
      var errorMessage = 'Failed to create [' + serviceName + '] service: ' + this._extractErrorMessage(response);
      this._setError(errorMessage);
      return;
    }

    if (status &lt; 200 || status &gt;= 300) {
      this._setError(me, 'unknown error, status: ' + status + ', body: ' + response.getBody());
      return;
    }

    return body.service.id;
  },

  /**
   * Create a PagerDuty escalation policy for a group
   * @param {GlideRecordSecure} sys_user_group record
   * @param {Array} pdUserIds users PagerDuty IDs, used as policy target
   * @return {String} new policy ID
   */
  _createPolicy: function (group, pdUserIds, pdScheduleIds) {
    var me = '_createPolicy';

    var userTargets = pdUserIds.reduce(function (filtered, pdUserId) {
      if (!pdUserId) {
        gs.debug('{0} skipping user with undefined pdUserId - likely a user we could not provision due to empty email', me);
      } else {
        filtered.push({
          id: pdUserId,
          type: 'user_reference'
        });
      } return filtered;
    }, []);

    var scheduleTargets = [];
    if (pdScheduleIds) {
      scheduleTargets = pdScheduleIds.map(function (scheduleId) {
        return {
          id: scheduleId,
          type: 'schedule_reference'
        };
      });
    }

    var targets = scheduleTargets.concat(userTargets);
    var epName = 'SN:' + this._removeInvalidCharacters(group.getDisplayValue());

    var postBody = {
      escalation_policy: {
        type: 'escalation_policy',
        name: epName,
        escalation_rules: [
          {
            escalation_delay_in_minutes: 30,
            targets: targets
          }
        ]
      }
    };

    var pd = new x_pd_integration.PagerDuty();
    var userEmail = pd.getValidEmail(gs.getUserID());
    var feature = 'escalation_policies';
    var response = this.rest.postREST(feature, postBody, userEmail);
    var status = response.getStatusCode();
    var body = this.JSON.decode(response.getBody());

    if (response.haveError()) {
      var errCode = body.error.code;
      var errorMessage = body.error.errors[0].toString();
      this._setError(me, '[' + epName + ']' + errCode + ':' + errorMessage + '.');
      gs.addErrorMessage('Escalation policy [' + epName + '] has not been created. ' + errorMessage + '.');
      return;
    }

    if (status === 200 || status === 201) {
      var id = body.escalation_policy.id;
      gs.debug('createPolicy.id = {0}', id);
      return id;
    }
  },

  _getFirstGroupMemberSysId: function (group) {
    var grs = new GlideRecordSecure('sys_user_grmember');
    grs.addQuery('group', group.sys_id);
    grs.setLimit(1);
    grs.query();
    if (grs.next()) {
      return grs.getValue('user').toString();
    }
    return null;
  },

  // not in use
  addScheduleToEscalationPolicy: function (escalationID, scheduleID) {
    var me = 'addScheduleToEscalationPolicy';
    gs.debug('{0} escalationID:{1} scheduleID:{2}', me, escalationID, scheduleID);
    var feature = 'escalation_policies/' + escalationID;
    var putBody = {
      escalation_policy: {
        escalation_rules: [
          {
            escalation_delay_in_minutes: 1,
            targets: [
              {
                id: scheduleID,
                type: 'schedule_reference'
              }
            ]
          }
        ]
      }
    };
    var pd = new x_pd_integration.PagerDuty();
    var userEmail = pd.getValidEmail(gs.getUserID());
    var response = this.rest.putREST(feature, putBody, userEmail);
    var status = response.getStatusCode();
    gs.debug('_createSchedule response: {0}:{1}', status, response.getBody());

    if (status !== 200 || status !== 201) {
      gs.error('Error in _createSchedule: ' + response.getErrorMessage());
    }
  },

  /**
   * Does class have an error?
   * @return {Boolean}
   */
  hasError: function () {
    return this._hasError;
  },

  /**
   * Get last error message
   * @return {String} error message
   */
  getError: function () {
    if (!gs.nil(this._errorMsg)) {
      return this._errorMsg;
    }
  },

  /** Services Provisioning module */

  /**
   * Initiates CIs provisioning along with dependencies,
   * which are represented in the provisioning table as relationships.
   * The table is populated based on the configuration
   * in the Services Provisioning module
   */
  customProvisioning: function () {
    this.clearAssociatingFlag();

    var grs = new GlideRecordSecure(this.provTable);
    grs.addQuery('provisioned', false);
    grs.query();
    var relationships = [];
    while (grs.next()) {
      relationships.push({
        parent_type: String(grs.parent_type),
        parent_ci_sys_id: String(grs.parent_ci.sys_id),
        child_type: String(grs.child_type),
        child_ci_sys_id: String(grs.child_ci.sys_id),
        rel_sys_id: String(grs.sys_id)
      });
    }

    var dependencies = relationships.reduce(function (acc, rel) {
      var key = rel.parent_ci_sys_id + ':' + rel.parent_type;
      if (acc.hasOwnProperty(key)) {
        acc[key].children.push({
          ci_sys_id: rel.child_ci_sys_id,
          service_type: rel.child_type,
          rel_sys_id: rel.rel_sys_id
        });
      } else {
        acc[key] = {
          children: [
            {
              ci_sys_id: rel.child_ci_sys_id,
              service_type: rel.child_type,
              rel_sys_id: rel.rel_sys_id
            }
          ]
        };
      }

      return acc;
    }, {});

    Object.keys(dependencies).forEach(function (key) {
      dependencies[key].children.forEach(function (child) {
        this.clearProvisioningErrors(child.rel_sys_id);
      }, this);

      var relSysId = dependencies[key].children[0].rel_sys_id;

      var parentSysId = key.split(':')[0];
      var parentType = key.split(':')[1];

      if (gs.nil(parentSysId)) {
        return;
      }

      var grParentCi = new GlideRecordSecure('cmdb_ci');
      if (!grParentCi.get(parentSysId)) {
        return;
      }

      var parentPdId;
      if (parentType === 'business_service') {
        parentPdId = this.searchBsPdId(grParentCi);
        if (!gs.nil(parentPdId)) {
          this.setBsPdIds(grParentCi, parentPdId);
        } else {
          parentPdId = this.provisionWrapErrors(grParentCi, 'parent', relSysId, 'provisionCiBs');
          this.setPdId(grParentCi, parentPdId, 'parent', 'business_service');
        }

        this.provisionRelationships({
          parent_ci_pd_id: parentPdId,
          parent_ci_type: 'business_service',
          dependencies: dependencies,
          key: key
        });
      } else {
        // parentType === 'technical_service'
        parentPdId = grParentCi.getValue('x_pd_integration_pagerduty_service');
        if (gs.nil(parentPdId)) {
          parentPdId = this.provisionWrapErrors(grParentCi, 'parent', relSysId, 'provisionCiTs');
        }
        this.setPdId(grParentCi, parentPdId, 'parent', 'technical_service');

        this.provisionRelationships({
          parent_ci_pd_id: parentPdId,
          parent_ci_type: 'service',
          dependencies: dependencies,
          key: key
        });
      }
    }, this);
  },

  /**
   * Provisions parent/child CIs relationships
   * @param {Object} args
   * @param {String} args.parent_ci_pd_id - Parent CI's PagerDuty ID
   * @param {String} args.parent_ci_type - CI's type (service, business_service)
   * @param {Object} args.dependencies - Object with CI's chlildren (array of objects)
   * @param {String} args.key - Unique key identifying parent CI (sys_id:type)
   */
  provisionRelationships: function (args) {
    var parentPdId = args.parent_ci_pd_id;
    var parentType = args.parent_ci_type;
    var dependencies = args.dependencies;
    var key = args.key;

    dependencies[key].children.forEach(function (child) {
      if (gs.nil(child.ci_sys_id)) {
        this.setProvisionedFlag(child.rel_sys_id);
        return;
      }

      var grChildCi = new GlideRecordSecure('cmdb_ci');
      if (!grChildCi.get(child.ci_sys_id)) {
        return;
      }

      var childPdId;
      var relationship;
      if (child.service_type === 'business_service') {
        childPdId = this.searchBsPdId(grChildCi);
        if (!gs.nil(childPdId)) {
          this.setBsPdIds(grChildCi, childPdId);
        } else {
          childPdId = this.provisionWrapErrors(grChildCi, 'child', child.rel_sys_id, 'provisionCiBs');
          this.setPdId(grChildCi, childPdId, 'child', 'business_service');
        }
        relationship = {
          supporting_service: {
            id: childPdId,
            type: 'business_service'
          },
          dependent_service: {
            id: parentPdId,
            type: parentType
          }
        };
        this.enqueueAssociation(grChildCi, JSON.stringify(relationship), child.rel_sys_id);
      } else {
        // child.service_type === 'technical_service'
        childPdId = grChildCi.getValue('x_pd_integration_pagerduty_service');
        if (gs.nil(childPdId)) {
          childPdId = this.provisionWrapErrors(grChildCi, 'child', child.rel_sys_id, 'provisionCiTs');
        }
        this.setPdId(grChildCi, childPdId, 'child', 'technical_service');
        relationship = {
          supporting_service: {
            id: childPdId,
            type: 'service'
          },
          dependent_service: {
            id: parentPdId,
            type: parentType
          }
        };
        this.enqueueAssociation(grChildCi, JSON.stringify(relationship), child.rel_sys_id);
      }
    }, this);
  },

  /**
   * Retrieves statistics from the provisioning table
   * of how many CIs being successfully provisioned and how many was skipped due to errors
   * @returns {Object.&lt;string, number&gt;}
   */
  getProvisioningStats: function () {
    var provisioned = {};
    var skipped = {};
    var grs = new GlideRecordSecure(this.provTable);
    grs.query();
    while (grs.next()) {
      if (grs.parent_ci) {
        if (grs.parent_service_pagerduty_id &amp;&amp; !grs.provisioning_errors) {
          provisioned[makeKey(grs, 'parent')] = true;
        } else {
          skipped[makeKey(grs, 'parent')] = true;
        }
      }
      if (grs.child_ci) {
        if (grs.child_service_pagerduty_id &amp;&amp; !grs.provisioning_errors) {
          provisioned[makeKey(grs, 'child')] = true;
        } else {
          skipped[makeKey(grs, 'child')] = true;
        }
      }
    }

    return {
      provisioned: Object.keys(provisioned).length,
      skipped: Object.keys(skipped).length
    };

    function makeKey (grs, role) {
      return String(grs[role + '_type'] + '_' + grs[role + '_service_pagerduty_id']);
    }
  },

  /**
   * Queries association status of the parent/child services being provisioned
   * @returns {Object} stats
   * @returns {Number} stats.max
   * @returns {Number} stats.value
   * @returns {Array} stats.services (parent_ci_name, child_ci_name)
   */
  queryAssociationStatus: function () {
    var stats = {
      max: 0,
      value: 0,
      services: []
    };
    var ga = new GlideAggregate(this.provTable);
    ga.addNotNullQuery('parent_ci');
    ga.addNotNullQuery('parent_service_pagerduty_id');
    ga.addNotNullQuery('child_ci');
    ga.addNotNullQuery('child_service_pagerduty_id');
    ga.addNullQuery('provisioning_errors');
    ga.addAggregate('COUNT');
    ga.query();
    if (ga.next()) {
      stats.max = ga.getAggregate('COUNT');
    }

    ga = new GlideAggregate(this.provTable);
    ga.addNotNullQuery('parent_ci');
    ga.addNotNullQuery('parent_service_pagerduty_id');
    ga.addNotNullQuery('child_ci');
    ga.addNotNullQuery('child_service_pagerduty_id');
    ga.addNullQuery('provisioning_errors');
    ga.addQuery('provisioned', true);
    ga.addAggregate('COUNT');
    ga.query();
    if (ga.next()) {
      stats.value = ga.getAggregate('COUNT');
    }

    var assocRecord = this.getAssociatingRecord();
    if (assocRecord &amp;&amp; assocRecord.services) {
      stats.services = assocRecord.services;
    }

    return stats;
  },

  /**
   * Resets relationship provisioning errors in the table
   * @param {String} relSysId - relationship sys_id
   */
  clearProvisioningErrors: function (relSysId) {
    var fn = 'clearProvisioningErrors';
    var grs = new GlideRecordSecure(this.provTable);
    if (!grs.get(relSysId)) {
      gs.error('{0} There is no relationship with sys_id {1} in the provisioning table', fn, relSysId);
      return;
    }
    grs.provisioning_errors = '';
    grs.update();
  },

  /**
   * Retrieves relationship provisioning errors
   * @param {String} relSysId - relationship sys_id
   * @returns {String} provisioning errors
   */
  getProvisioningError: function (relSysId) {
    var fn = 'getProvisioningError';
    var grs = new GlideRecordSecure(this.provTable);
    if (!grs.get(relSysId)) {
      gs.error('{0} There is no relationship with sys_id {1} in the provisioning table', fn, relSysId);
      return;
    }

    return String(grs.provisioning_errors);
  },

  /**
   * Initiates CI provisioning into PagerDuty as a service or business service
   * and registers any errors occured along the way in the provisioning table
   * @param {GlideRecord} grCi - cmdb_ci object
   * @param {String} role - Role in the relationship (parent, child)
   * @param {String} relSysId - Relationship sys_id
   * @param {String} fnName - Function name responsible for provisioning
   * @returns {String} PagerDuty service or business service ID
   */
  provisionWrapErrors: function (grCi, role, relSysId, fnName) {
    this.clearErrors();

    // remember errors
    var oldError = this.getProvisioningError(relSysId);

    // fetch new errors
    var result = null;
    if (fnName === 'provisionCiBs') {
      result = this.provisionCiBs(grCi, role);
    } else {
      result = this.provisionCiTs(grCi, role);
    }

    // merge errors
    var ciName = '';
    if (grCi.name) {
      ciName = '[' + grCi.name + ']: ';
    }
    var newErrors = this.getErrors().join('. ');
    if (newErrors.length) {
      newErrors = ciName + newErrors;
    }
    var allErrors = [oldError].concat(newErrors).filter(Boolean);

    // write new errors
    var grs = new GlideRecordSecure(this.provTable);
    if (!grs.get(relSysId)) {
      gs.error('No record with sys_id [' + relSysId + '] in [' + this.provTable + ']');
      return;
    }
    grs.provisioning_errors = allErrors.join('. \n');
    grs.update();
    this.clearErrors();

    return result;
  },

  /**
   * Creates PagerDuty business service with a name
   * taken from the provisioning table
   * POST business_services
   * @param {GlideRecord} grCi - cmdb_ci object
   * @param {String} role - Role in the relationship (parent, child)
   * @returns {String} PagerDuty business service ID
   */
  provisionCiBs: function (grCi, role) {
    var fn = 'provisionCiBs';
    var fnDesc = 'Error during Business Service creation';
    var pdBusinessServiceId;
    grCi.name = this.getCiName(grCi, role);
    if (!grCi.name) {
      this._setError(fnDesc, 'there is no CI name for CI [' + grCi.sys_id + ']');
      return;
    }

    var name = 'SN:' + this._removeInvalidCharacters(grCi.name);
    var description = String(grCi.short_description);
    if (description.length &gt; this.maxBSDescription) {
      var replacement = '...';
      description = description.substring(0, this.maxBSDescription - replacement.length) + replacement;
    }
    var owner = {
      name: String(grCi.owned_by.name),
      email: String(grCi.owned_by.email)
    };
    var contact = owner.name &amp;&amp; owner.email
      ? owner.name + ', ' + owner.email
      : owner.name || owner.email;

    var teamId = String(grCi.support_group.x_pd_integration_pagerduty_team);
    var teamObj = {};
    if (!gs.nil(teamId)) {
      teamObj = {id: teamId};
    }

    var feature = 'business_services';
    var postBody = {
      business_service: {
        name: name,
        description: description,
        point_of_contact: contact,
        team: teamObj
      }
    };

    var pd = new x_pd_integration.PagerDuty();
    var userEmail = pd.getValidEmail(gs.getUserID());
    var response = this.rest.postREST(feature, postBody, userEmail);
    var body = this.JSON.decode(response.getBody());
    var status = response.getStatusCode();
    gs.debug('{0} response: {1}:{2}', fn, status, response.getBody());

    if (response.haveError()) {
      this._setError(fnDesc, this._extractErrorMessage(response));
      return;
    }

    if (status === 200) {
      pdBusinessServiceId = body.business_service.id;
    } else {
      this._setError(fnDesc, 'status: ' + status + ', response: ' + response.getBody());
    }

    return pdBusinessServiceId;
  },

  /**
   * Creates PagerDuty service for the provided CI with a name
   * taken from the provisioning table
   * @param {GlideRecord} grCi - cmdb_ci object
   * @param {String} role - Role in the relationship (parent, child)
   * @returns {String} PagerDuty service ID
   */
  provisionCiTs: function (grCi, role) {
    var fnDesc = 'Error during Technical Service creation';

    grCi.name = this.getCiName(grCi, role);
    if (!grCi.name) {
      this._setError(fnDesc, 'there is no CI name for CI [' + grCi.sys_id + ']');
      return;
    }
    var serviceId = this.provisionCIService(grCi, null, null);

    return serviceId;
  },

  /**
   * Retrieves provided CI's name from the provisioning table
   * @param {GlideRecord} grCi - cmdb_ci record
   * @param {String} role - Role in the relationship (parent, child)
   * @returns {String} CI's name
   */
  getCiName: function (grCi, role) {
    var name = grCi.name;
    var grs = new GlideRecordSecure(this.provTable);
    if (role === 'parent') {
      grs.addQuery('parent_ci', grCi.sys_id);
    } else {
      grs.addQuery('child_ci', grCi.sys_id);
    }
    grs.query();
    if (grs.next()) {
      if (role === 'parent') {
        name = String(grs.parent_ci_name);
      } else {
        name = String(grs.child_ci_name);
      }
    }

    return name;
  },

  /**
   * Queues an event in the event manager.
   * Scheduled for processing after 1 second of the current date/time
   * to increase chances that all the PagerDuty entities with the corresponding IDs
   * are actually created
   * @param {GlideRecord} grCi - cmdb_ci object
   * @param {String} relationshipJSON - Stringified JSON with relationship data
   * @param {String} relSysId - Relationship sys_id
   */
  enqueueAssociation: function (grCi, relationshipJSON, relSysId) {
    gs.eventQueueScheduled(
      'x_pd_integration.associate_dependencies',
      grCi,
      relationshipJSON,
      relSysId,
      new GlideDateTime().addSeconds(1)
    );
  },

  /**
   * Initiates services dependencies association
   * Invoked by Script Action 'Associate Dependencies' triggered by event
   * x_pd_integration.associate_dependencies
   * @param {GlideRecord} cmdb_ci object
   * @param {String} relationshipJSON - Stringified JSON with relationship data
   * @param {String} relSysId - relationship sys_id
   * @returns {Boolean}
   */
  associateServiceDependencies: function (grCi, relationshipJSON, relSysId) {
    this.clearErrors();
    this.clearAssociatingFlag();
    this.setAssociatingFlag(relSysId);

    var result = this.associateServiceDependenciesImpl(grCi, relationshipJSON, relSysId);
    var errorStr = this.getErrors().join('. ');

    var grs = new GlideRecordSecure(this.provTable);
    if (!grs.get(relSysId)) {
      gs.error('No record with sys_id [' + relSysId + '] in [' + this.provTable + ']');
      return;
    }
    grs.provisioning_errors = errorStr;
    if (result) {
      grs.provisioning_errors = '';
    }
    grs.update();
    this.clearErrors();

    return result;
  },

  /**
   * Establishes association between services
   * POST service_dependencies/associate
   * @param {GlideRecord} grCi - cmdb_ci object
   * @param {String} relationshipJSON - Stringified JSON with relationship data
   * @param {String} relSysId - Relationship sys_id
   * @returns {Boolean}
   */
  associateServiceDependenciesImpl: function (grCi, relationshipJSON, relSysId) {
    var fn = 'associateServiceDependenciesImpl';
    var fnDesc = 'Failed to associate service dependency';

    var relationship = JSON.parse(relationshipJSON);

    if (!relationship.supporting_service.id) {
      this._setError(fnDesc, 'there is no supporting service id for the CI [' + grCi.name + '].');
      return;
    }
    if (!relationship.dependent_service.id) {
      this._setError(fnDesc, 'there is no dependent service id for the CI [' + grCi.name + '].');
      return;
    }

    var feature = 'service_dependencies/associate';
    var postBody = {
      relationships: [relationship]
    };

    var pd = new x_pd_integration.PagerDuty();
    var userEmail = pd.getValidEmail(gs.getUserID());
    var response = this.rest.postREST(feature, postBody, userEmail);
    var status = response.getStatusCode();
    gs.debug('{0} response: {1}:{2}', fn, status, response.getBody());

    if (response.haveError()) {
      this._setError(fnDesc, '[' +
        relationship.supporting_service.id + ':' + relationship.supporting_service.type +
        '-&gt;' +
        relationship.dependent_service.id + ':' + relationship.dependent_service.type +
        ']. ' + this._extractErrorMessage(response));
      return;
    }

    if (status === 200) {
      this.setProvisionedFlag(relSysId);
    } else {
      this._setError(fnDesc, 'status: ' + status + ', response: ' + response.getBody());
      return;
    }

    return true;
  },

  /**
   * Resets the association flag to false
   */
  clearAssociatingFlag: function () {
    var grs = new GlideRecordSecure(this.provTable);
    grs.addQuery('associating', true);
    grs.query();
    while (grs.next()) {
      grs.associating = false;
      grs.update();
    }
  },

  /**
   * Sets flag indicating initiation of the service dependencies association
   * @param {String} relSysId - Relationship sys_id
   */
  setAssociatingFlag: function (relSysId) {
    var grs = new GlideRecordSecure(this.provTable);
    if (!grs.get(relSysId)) {
      throw new Error('No record in ' + this.provTable + ' with sys_id: ' + relSysId);
    }
    grs.associating = true;
    grs.update();
  },

  /**
   * Retrieves data about the relationship being in the association process
   * @returns {Object} record
   * @returns {Array} record.services (parent_ci_name, child_ci_name)
   * @returns {String} record.sys_id
   */
  getAssociatingRecord: function () {
    var grs = new GlideRecordSecure(this.provTable);
    grs.addQuery('associating', true);
    grs.query();
    if (grs.next()) {
      return {
        services: [String(grs.parent_ci_name), String(grs.child_ci_name)],
        sys_id: String(grs.sys_id)
      };
    }
  },

  /**
   * Sets the flag to true when an association between services is established
   * @param {String} relSysId - Relationship sys_id
   */
  setProvisionedFlag: function (relSysId) {
    var provError = this.getProvisioningError(relSysId);
    if (provError.length) {
      return;
    }
    var grs = new GlideRecordSecure(this.provTable);
    grs.addQuery('sys_id', relSysId);
    grs.query();
    if (grs.next()) {
      grs.provisioned = true;
      grs.update();
    }
  },

  /**
   * Sets PagerDuty ID for the provided CI in the provisioning table
   * @param {GlideRecord} grCi - cmdb_ci object
   * @param {String} pdId - PagerDuty ID
   * @param {String} role - Role in the relationship (parent, child)
   * @param {String} type - PagerDuty service type (business_service, technical_service)
   */
  setPdId: function (grCi, pdId, role, type) {
    var grs = new GlideRecordSecure(this.provTable);
    grs.addQuery(role + '_ci', grCi.sys_id);
    grs.addQuery(role + '_type', type);
    grs.query();
    while (grs.next()) {
      grs[role + '_service_pagerduty_id'] = pdId;
      grs.update();
    }
  },

  /**
   * Searches for PagerDuty business service ID for the GlideRecord object provided.
   * Since we do not store business service IDs in individual CIs, unlike technical service IDs,
   * the data source is the provisioning table
   * @param {GlideRecord} grCi - cmdb_ci object
   * @returns {String} PagerDuty business service ID
   */
  searchBsPdId: function (grCi) {
    return this._searchBsPdId(grCi, 'parent') || this._searchBsPdId(grCi, 'child');
  },

  /**
   * Helper function to search for PagerDuty business service ID
   * in the provisioning table
   * @param {GlideRecord} grCi - cmdb_ci object
   * @param {String} role - Role in the relationship (parent, child)
   * @returns {String} PagerDuty business service ID
   */
  _searchBsPdId: function (grCi, role) {
    var bsPdId;
    var grs = new GlideRecordSecure(this.provTable);
    grs.addQuery(role + '_ci', grCi.sys_id);
    grs.addQuery(role + '_type', 'business_service');
    grs.addNotNullQuery(role + '_service_pagerduty_id');
    grs.query();
    if (grs.next()) {
      bsPdId = '' + grs[role + '_service_pagerduty_id'];
    }

    return bsPdId;
  },

  /**
   * Sets PagerDuty IDs in the provisioning table
   * for parent and child CIs of type business_service
   * @param {GlideRecord} grCi - cmdb_ci object
   * @param {String} bsPdId - PagerDuty business service ID
   */
  setBsPdIds: function (grCi, bsPdId) {
    this._setParentBsPdIds(grCi, bsPdId);
    this._setChildBsPdIds(grCi, bsPdId);
  },

  /**
   * Helper function - sets PagerDuty IDs in the provisioning table
   * for parent CIs of type business_service
   * @param {Gliderecord} grCi - cmdb_ci object
   * @param {String} bsPdId - PagerDuty business service ID
   */
  _setParentBsPdIds: function (grCi, bsPdId) {
    var grs = new GlideRecordSecure('x_pd_integration_pagerduty_service_provisioning');
    grs.addQuery('parent_ci', grCi.sys_id);
    grs.addQuery('parent_type', 'business_service');
    grs.addNullQuery('parent_service_pagerduty_id');
    grs.query();
    while (grs.next()) {
      grs.parent_service_pagerduty_id = bsPdId;
      grs.update();
    }
  },

  /**
   * Helper function - sets PagerDuty IDs in the provisioning table
   * for child CIs of type business_service
   * @param {Gliderecord} grCi - cmdb_ci object
   * @param {String} bsPdId - PagerDuty business service ID
   */
  _setChildBsPdIds: function (grCi, bsPdId) {
    var grs = new GlideRecordSecure('x_pd_integration_pagerduty_service_provisioning');
    grs.addQuery('child_ci', grCi.sys_id);
    grs.addQuery('child_type', 'business_service');
    grs.addNullQuery('child_service_pagerduty_id');
    grs.query();
    while (grs.next()) {
      grs.child_service_pagerduty_id = bsPdId;
      grs.update();
    }
  },

  /** Common helper functions */

  _setError: function (func, msg) {
    this._hasError = true;
    gs.error('[{0}] {1}', func, msg);
    this._errorMsg = !msg ? func : func + ': ' + msg;
    this._errors.push(this._errorMsg);
  },

  getErrors: function () {
    return this._errors;
  },

  clearErrors: function () {
    this._errors = [];
  },

  _extractErrorMessage: function (response) {
    var body = response.getBody();
    var errorMessage = response.getErrorMessage();
    if (!gs.nil(body)) {
      errorMessage = errorMessage + '. Response: ' + body;
    }
    var errorBody = this._safeJSONDecode(body);
    if (errorBody &amp;&amp; errorBody.error &amp;&amp; errorBody.error.errors) {
      var errors = errorBody.error.errors;
      if (Array.isArray(errors)) {
        errorMessage = errors.join('.\n') + '.';
      } else if (typeof errors === 'object') {
        if (Object.keys(errors).length) {
          errorMessage = '';
          Object.keys(errors).forEach(function (key) {
            errorMessage += ' ' + key + ' ' + errors[key] + '.';
          });
        }
      }
    }
    return errorMessage;
  },

  _removeInvalidCharacters: function (name) {
    return name.replace(/[`~!@#$%^&amp;*()|+=?;:'",&lt;&gt;{}[\]\\/]/gi, '');
  },

  _getCurrentUserEmail: function () {
    // For performance reasons, we cache resolving the current user PD email (after mapping)
    if (this._currentUserEmail === null) {
      var pd = new x_pd_integration.PagerDuty();
      this._currentUserEmail = pd.getValidEmail(gs.getUserID());
    }
    return this._currentUserEmail;
  },

  _safeJSONDecode: function (jsonString) {
    try {
      return this.JSON.decode(jsonString);
    } catch (e) {
      return {};
    }
  },

  type: 'PagerDutyProvisioning'
};
]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;PagerDuty_v8.1&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2015-10-28 21:59:18&lt;/sys_created_on&gt;&lt;sys_id&gt;3175a14b4f570240dd657bb28110c736&lt;/sys_id&gt;&lt;sys_mod_count&gt;517&lt;/sys_mod_count&gt;&lt;sys_name&gt;PagerDutyProvisioning&lt;/sys_name&gt;&lt;sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="PagerDuty Incident Resolution Platform"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_3175a14b4f570240dd657bb28110c736&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-03-25 19:24:36&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;sys_es_latest_script action="INSERT_OR_UPDATE"&gt;&lt;id&gt;3175a14b4f570240dd657bb28110c736&lt;/id&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2025-03-25 18:04:15&lt;/sys_created_on&gt;&lt;sys_id&gt;119667bcc3e0221040d0becdd401312b&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-03-25 18:04:15&lt;/sys_updated_on&gt;&lt;table&gt;sys_script_include&lt;/table&gt;&lt;use_es_latest&gt;false&lt;/use_es_latest&gt;&lt;/sys_es_latest_script&gt;&lt;/record_update&gt;</payload>
<payload_hash>402663126</payload_hash>
<remote_update_set display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Child">2dd0afe2c3ac221040d0becdd40131d1</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-03-31 04:08:31</sys_created_on>
<sys_id>a9d0afe2c3ac221040d0becdd40131d6</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>195cec38cf40000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-03-31 04:08:31</sys_updated_on>
<table />
<target_name>PagerDutyProvisioning</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>92f83370cba42210593e322dcaacb68d</update_guid>
<update_guid_history>92f83370cba42210593e322dcaacb68d:402663126,15e53fb8a764221095bd6fe1b8f6ae69:-1094279143,a5962bb4d024221024448694d30d7500:699893556,e5014e04b4512010dc0c67aab050309b:1631813715,1b5df713d0012010d07dabb82b7bc96b:266305740,c6ecb71342012010b77acdf6eaa8ce71:331226497,c0618153d70560107614be0c49fcfd48:-1869296784,85d4fc1f34c1601088bb3a8a212b92fa:-163166783,7374f81f9cc160101f1c01299d93acd9:-1072376331,b2f3bc97e9c1601027f3b2ce217faa66:1555107752,6983f8db9ec16010e5bb74020e278f75:1021189312,5c33f8dbc9c160105347e4a5aa8da66f:503325409,879bac9767c160100fb5f6df4a0e1e60:-638517661,d87a20d33dc1601060f03d9de3ef0381:-163166783,3eb9a45762c1601004a9eb04b3b120a6:-927629627,0059a45708c160105f06ee1d505450a1:1793201154,0b029497d5816010801da774ff8b7dc5:-163166783,f0029893d3816010908ac6b317f34681:-1436184342,cb490b8fe08d2010f75d770d43f0b9b3:-163166783,9cb70b0bb7cd20104965aa4a9f5561b3:835317103,d076834fd58d2010fcdff0c9341fa1b0:70854259,905107c7538d201051928210a4f15149:1956472599,52343e07258d201047b2bfd331af3ec0:-415598662,c46fb5471b0d2010c2726c11f0771a24:348864182,32afe5cf63c92010fabc00f283277a30:-57250799,b04fa1cfe9c9201091e436068dcc5b9f:-920457832,ecee25c7cbc92010616ffe8703d7fdaa:743604387,748ea94f6dc92010e4a7f2aa6cabdfbb:-1896154932,865de50fafc92010fccc77558970bc01:516526241,bf1d25c777c92010947b0b56d13dea45:-1673611710,7b6ca50f48c92010a56dc11ff75100fb:348736061,42abe5cb6dc92010372ec64b98848a30:-1629066913,78862d87f8c920101527de3abd8ea3ff:-1828870139,1b762d8795c9201001359c99900721f9:797997284,7e6e5d4372c92010410844816e4a4548:88664961,e1e3914be3892010be7b53b0841c5e63:2056596309,ab5a1ef207c1201061a3ce50360c4dcd:-320835887,55d9d6724dc1201078e1caeb41b186ff:-2122222983,76951ebeeb812010cf8c1d32b0f7e2f6:-459977516,ea3ecababd812010dd6f738b4f567bd9:1409988604,e9685d2cfd4d2010706dddeb9c1a03f4:611754484,a31811ac190d201091638e1d5400fbbd:-2045147689,def7d52c324d20104cdcd42c14b99437:53018651,4ac795a8600d201091d26721b7b7c469:-2020175262,71cbb4a85e0d20107f86d34694900162:425929100,9fabf0a0d1c92010156f532579e825ae:740260420,448bf868810d201076fcf42bf7a9dbe8:425929100,f10bf8687b0d201006c01af20c5fd9d9:-392308248,68daf868580d2010203f01dc19fe2fe2:-1313375016,2a9a78687b0d201028dda5e961e0b697:-2034238338,91d7f0a05dc92010384a8444b64971a9:-105026074,0887f4e4db0d201070ad8c0fc1e392b6:368487690,1e57f4e4300d20102e233d262da41eb0:-1704754901,e1b630e4e50d2010f0f4dadaaadabaa6:2086972957,9ca1ec6494c9201094dd8367ba78cbc2:-1844376162,f92898a09cc920104c0ed37be5b9671a:393272162,5787d0a0b0c920104e62a4f652a87ea3:581406715,b8cda4d86e4520102cfefd88efe5a4eb:-1024407582,04a8ac54ef4520109152171171097553:1114836695,23519b36d6b860106c3d0c06e951069f:-1573300467,e2f01bb623786010fc5566e03c663208:1082945099,e4aec73256f86010ef6148897be76718:-222311231,8b7dba3685b8601061dbc547e3282c95:-229980155,20272762897060107d2fcb32b6389ebf:2087356326,2b042bea33706010807f4a31d85d2c11:1650783046,f298536686706010b63f9ee12eb91989:-330529422,95659722d570601022de652052c77bf3:-954777564,dab21762bd706010f4edca14d6129bb7:-1656644973,8de11f22a7706010631418a6d06b9975:67483076,2c619722597060108012a7477c4e18eb:-2038263476,496d036e87306010b0d062f93cc86e85:67483076,406dc72a91306010b837d021b794969b:-419547924,4c6c036ef530601053d9f31b961ce97f:-1602642628,df0bc32e50306010665104fa47f17879:-423195604,9505c72a87306010c3da82abfb126293:-1264549181,5da203663d306010ea6e8077223e83a5:-1913427091,49d14b624530601078db1a65fcf7a469:1640242282,1380c766c53060107a1aa99a8e69b026:-831651333,9dfffe227d30601052910e5f07e94c51:979732673,586ab2664ffc201091aceac8ae7c0779:-545844293,d169fe22983060105e1866c514e9a44a:-491593098,a7d87a2292306010280b0fc4122ad7d5:-1804891670,eb083eaa31fc201085e5ecca2551dd17:979639171,b846a26632fc201038c5d33468d9ce6d:-1199358501,dd991ee6443c2010aa48ff7c6f06c39d:1800409560,c329126e34bc2010575dfb1ccf3a1590:339259566,d7e81aa2ee7c20104f6e998c1d4f2829:-425737717,28a999aefaf82010084a2a331b84333e:1239278247,c4d71926703c201075dc383067ee9c2d:1431409647,74765da26b3c201002eb56f08357f7f7:1442353131,65e55da2103c201046ef7dc6d6c587f0:-46426135,e42359ea7ef820108b441d2ac31672c0:803317436,f01159ea3df82010ec8310fbd4e2e1cf:388970119,fc2f01eac3f820107187a60c8ffdf329:-1407008507,38cc49ea71f82010832f7bb424b96ac7:-1663508561,d5fb8522fcf8201049468eb6992ee27c:898882013,9379856295f820109fb682bc581fbfdb:169158375,f49cb46237f82010eda69eb47a232ad4:-1128622799,f22bf8e619382010acdedd5dc587365c:-1054099524,1c9afe564434201058f2ca9cb687a89d:742370121,b968b6de4c7420100b4a6c5e40840f88:2005458638,52e4e51ebab02010baf910aa8f2e6487:315005979,2ad4e5d2fbb0201064f1597207ee1329:-94993303,ac24eddab0b020109f2cf9f1d58e6aa8:450644216,320469daacb0201053a39269c89a01d7:211215666,d1a369da0cb02010f2b8ba84bc350cd1:852457840,0ac02d5aceb02010ab36fa4d5cd5703d:1296590787,e4013d457ef8e01034657af998c7f020:-737872397,abaf694565f8e010a76cae043bc963f0:-1342211197,f8af2d45bff8e010d5065ec5a617461a:893161301,e57f2145ccf8e010ec4197006bbdc531:-1342211197,830fe145c8f8e0103bc5a60dc747b76d:593895425,ebee2145a0f8e010fb43ed98675b372b:788294812,8eaea50507f8e0104f486883d38f2e3a:-284012068,387ee905f1f8e01002f0d61ba7a6ecdd:-1099394140,3c5ee905a0f8e010af581a45d08a31d7:874113488,522d2dc1eaf8e0101e84241d78a07438:-1568371843,750d2dc1a3f8e0103be1c3ed1657dd32:600766793,fa672d8dd4b8e01043f8c43cb45e4f86:810643265,cc952d8db1b8e010139d30c0525380c0:1711273378,a8f4a58d46b8e010300bfa1b2e75ad7e:-1938976412,6b6e9dc504b8e010a295a5a5043af628:-832201618,038c114985b8e0106ac8ceca47563e74:251704013,2edb510993b8e0107d2d02784c0c57ed:420213316,aa845dc15db8e0104b50a4bfebd2b553:-25801287,4b2459c18fb8e010c116e60546bca615:443321659,1643d10183b8e0104c0ad04c1b1e8279:251704013,4089dcb0c67ca010299dd0227248e3ef:2028517476,3e9153ecaeb8a010ac6d3160e665fc33:-912310001,4089dcb0c67ca010299dd0227248e3ef:2028517476,601980703b7ca010e6cc92ffae0a8f02:445263207,0ce8c0704c7ca0104a920e94b6539e13:-1205223016,0058ccb0de7ca0102c0b8717891f5de6:282189920,fb954470ee7ca010f67d27d686cb0e6f:-137737278,06650cbcf13ca010d22b82ecc135df5c:-937308270,645540703e7ca010a7e3456ee41586fc:-702511620,2b720cbc803ca0104061e0904ecbbc56:29163509,60e148f8963ca01033cb92aee3fba932:-1370034114,d7a188bc723ca0105701076a88acee96:1476661582,20814c30af3ca010bbfb6d06df361df2:490088673,d37c7be89b3ca010784e5265b5e9dc29:-15704238,3ebb37a8b93ca0106f042f70d42ac74b:-306142538,317a37a8a53ca010ee68256024d72a46:469525928,f05ab3a8c33ca010b82bc46d697879c5:220987044,e0fb63600b3ca010ed32ca293f245441:-1724507490,25ab2b20be3ca01076ca1ca221672301:-315412154,e95ba320b83ca010cdcf4c4e344287f5:-1479279553,352be720c53ca0105c10acce488e8dfb:1231525225,e2ca6328f9f8a01013b0bd8aca076713:1029552776,61bae320233ca0103fffcb9b77ee7e0d:-1967676026,40bae320653ca010e68d9b3efda97b07:1029552776,352aa760dff8a01028ff86033049b34f:-1035383350,1c69a76000f8a010ac69548a0532bc8b:620178762,f0d4d76014f8a0103a08805bdee9d9e0:-912310001,03b4532c94b8a01081d293046bc49d25:1021687631,3e9153ecaeb8a010ac6d3160e665fc33:-912310001,04cd3fd041702010c960aee504d7ee45:-1799614274,a6cd0f161aec20100a7ecd930981f2d0:1580170574,82b5758a496020108bb7e8db18eeb9c9:1960882785,8675f14abe6020103715cef0931510c7:-1825851327,8645758afb60201010c1a3f0a245abc3:-1932613546,2ec4b54af1602010f20ce8410691f030:-1816941275,34c3f5c637602010ce9d8364b5fb73d8:361313668,bef1f10a4760201019b7f4bcd718f319:667287051,80f1f10a04602010e7371342cd890814:-1742847714,68e0f5c68160201079cddfe48c21b8cc:-2080948910,c1ee29069260201047755a878eb89247:-1938552634,878aad42266020109b5d71887e9287fa:2085882764,6ac9ad0214602010743770ab06b8b107:-907473279,a187a542cc602010557086bcf487ee7f:-544185086,bd276102d86020102cb4004972605330:-1272949132,a033ad4e19202010b03e41610c1fb25a:1634765297,92126d0edc202010302b944e977301cd:-1881304289,1e51654eb120201093177c96e924b1d1:1448602995,6d335502ae202010c0f3c6d1d455b070:1916318733,1074b18e60e42010f99251c83e1c9ba3:1916318733,7b010a6905902010f5934ed21ddb5435:-107597626,2bdd3125c1902010f1ef83a77966022e:-1737646466,0a0c8521071020103a4f5b3464101d64:519753744,47757c5177142010f7cb45b576007189:1275871991,793430d1001420103fc634ec4d398262:-59676207,7e8230d1b8142010c3778f788c97985c:1217553688,cba07c51781420105eb44ff2848dca7f:-1075887131,7060b0998dd020102bd623e0cf994016:320910666,e9ffa051261420106adfa107eac6b9c9:-1341654742,efafa05147142010e34a40899986b2c3:1217553688,7d6fa0ddc8d0201025f2fdd79d88a96d:822397196,befea41d11d020102ae8ed105f7e2a76:1217553688,e03828514dd02010c48c9210d5bdd3d4:-236128729,f575be4cfb802010c9c72277e6f457ce:523013256,0fafc3c2f97b1010336bd7491c3fa831:2143823735,2466ea26f8a3101039f5b8d60afacc04:-1011349705,caef8952cdaf10104c8d63ae14c559d4:-1900057800,ac86451ebd6f1010c1f2310c4d682ee2:1477878328,3d24499a4a6f10109760a5296ca1af01:1545901403,0023c55adb6f10102ba09cb85e6c41c3:-1767608821,b272895a586f10104427369e9110b18d:1481865477,de12415a9d6f1010c4faaa065f106996:794038966,2fd0491a216f1010fe48665150ec7843:1589906648,1bbf3cd6066f1010c96d24a98b368162:1012394784,fdfdb8966c6f101038dea7d7af79b992:1995323745,f6cdb896e66f1010dff54438bd0ceb8d:-1413278443,e0feac1e2d2f101077cbcd2ff2a72ec3:-1685234614,995f9cdef1ab1010cb876b12146d5b2a:245065572,88fdce4ea6a710101ece48f989521743:304038120,c9ec828e29a710103c7f0aaca4d507b9:1384870632,d4dc0a4eaaa7101096ad5a029d28e421:2040335550,dfbc028ee2a71010e514427c61d91690:1277438920,c7ac028e33a71010e0c11d1d8f29438b:1384870632,813cca4e3fa710104705dfe940009279:677851598,9b2cca4ef9a7101078c24d2ed649b073:1093419119,43fa0e4a9ba7101032bc251503d0b9c9:1384870632,92674e0a9ba7101039d98c8f36e66c5a:1232849608,d0574e8ac0a71010e30b3345b84ec856:1671148782,ee864e0a74a7101071818b66e03bc63f:-1948577792,26150a4a51a7101075e55538ffd0a61a:1205113812,2c524ac600a710103d13f58dd8b73bdd:-2033776382,a5b18eca98671010120c105ba7705731:886190216,6d7182c61aa710102307f36fc6b1fc15:2104279268,c231864678a71010e127525a62b13c44:807952516,b15eb546b6a71010752fa710f6ce1738:6339578,bfed6dcad6671010ee1f9ff75dad6ccf:343285248,3abd65cae96710102a832786cf9efcb9:-660126907,ef1d25caf9671010ba4b3130804ccdfe:225986204,fa2bad4a9c671010d1b4479a1beafabd:870596942,b5eaad4a88671010ea63ea948dbb14c8:1795791552,72a1918a6027101053efc2478697205c:1088344921,3b70918ab5271010f579dd8241be8856:219383939,aaea450e41e31010aaf95c5c87ddb6bd:-1849687138,51f9418672271010fd31128bdba9fe99:-1643514272,74f8740e9ce310101649e33c9111dae6:-22684970,d827bc8abfe31010b5a8636c6c3afabe:1448727878,0ee670caace3101067f33b468ebe475a:15125207,0546f88abfe3101004f1fc103d6b991d:1573891428,0c46f88ae9e310100c0a1429a342bc17:1825144647,39f5f48af8e31010b66030d99e1e0c04:-680041473,db25308a76e310100e8bb1ce9b986e9a:-1811941089,75cae406e2631010a9ee52f172b03f28:-1927495900,b8ddeffd4623101070d739e873f1efff:79456074,f9ac27fd7823101049ecfbe9f3b3e592:-2013081544,0968383b55171010205f3a89355d35cd:286936243,d5b5bcb786171010986962cf147437fa:-1438252356,3f7470b712171010d9abfa3f6a237153:286936243,34a45012aad3101071f6226fb96e0964:-1879115093,56f398de8f9310100bcbc88497c1d858:270967233,a053949a18931010e54560a33ff5bd44:2111873934,fc32109e7a931010c486c696751fe3f1:-155183910,4dc1d09a639310108b9f1dedf007adfc:-1164914803,d3dbc09afa931010ba122f9689ec05f5:70857724,82d58c569b9310102b90037c685f685a:1278738986,93ee968ad2df9010b87e036cff3bafa9:-1673506583,76ae5a8ad5df90106514327d7aaf0980:310839856,d68a920aebdf9010b7ae2441c2cd5996:-1673506583,e33a920a33df9010a9f60e1afc9099c1:-682136715,ea0a920af7df9010dd30df43dd6a4bb9:1424580896,a6e9568654df9010905dc92d1b0fc604:-648933458,d7a952c635df90101c5bb0abe1eba94a:-1490081252,8b9812c61bdf90108e21dda9b04d83f6:994152945,d9f55246d1df901023aef3413a49e972:-1673506583,9da90c21d4575010f42f236f5daf4456:204277118,81b5c8edcc175010e987eba6b9c3cfc9:1293395756,fd69dbdd95935010fe19084e654d14a7:505029003,caea6fc55f175010fc81424231e4cf83:1293395756,962ecbf40e171010d454cb9af5a34b37:471969650,1f47e9735fcf5010952f5c57dd365845:-1309931462,6217a573d0cf50105685c75e62661577:1951989120,0921693fa98f5010fc954accf318bcb9:-1213253874,21d0693f878f5010646d48490836b1b4:-1789645227,3bfe11fbc98f50108ace0d1c350bf44b:-569561979,98fe193fe48f5010673496636fab63f8:1060951293,16ea694aaa9e501032a8b7e308a9b350:1951989120,16ea694aaa9e501032a8b7e308a9b350:1951989120,538d180ed5121010c2bb663083bf9aeb:2047229733,e6668ce52d961010470bce9c817f2382:-743869854,c447e109165210105fbb23a07acc5cd8:1674497861,89162d0528521010b0a1ae746deb01ad:-1553759171,fa05e585e3521010f832db58f58cee17:-1352666575,4fe4a505b352101099e6221dc37a96b4:1674497861,0d5deef4821a1010652e2da491f29820:1321624599,b88ceaf4ee1a1010da697c6712b086f4:1227684947,1d2baeb4bd1a10108db519b65e351340:-1577326088,dbc86e343a1a101097c81cb7679b9303:-576263345,9cf66234af1a1010ed3bbecf6b3a5a38:-1517505470,d1f8d6746a1e1010dd979648d3df5ab8:-472043218,5888d274e31e101073764adbb3780c31:-1890691505,c147d234ab1e1010f6f2c9b719624020:485012144,b0454678d8da101020a38f926623547d:27831098,5aa4c638deda1010691d9693ff613406:300742951,6094027873da1010234e8a406983d809:75747597,b9834638e6da1010fe23b3957fd9258a:-1188500694,05d246f45dda10108687016db0c35b40:-302283521,8ab20eb433da1010c512789ab000037e:443450883,a14206b4f6da1010c7e6a1eb47b154f8:1507542027,fec00ab45cda1010fa574d7e51cad2e3:1028169106,04a0c2b4f9da1010b8c7a69c25206cb2:1052564476,0a4006b423da1010265b6a9181a5aeef:-1743355350,242082f05cda1010fc65a14d5b3dd231:1783377430,9b697d7018da1010c63f96d5b998cc2c:-841268140,9a39bd700eda1010497a710e7c44d67b:-1119306882,bae8bd7005da10107cd812cacc9ed940:1669503802,5dc83d70dada101084e65ddfd204e797:1667263653,9a98397044da1010761c762144c85bf7:-524380581,226835fc4e9a1010818b6766b7a08d4e:-873790305,ea0875fc889a10105db40d51df305b44:1998273107,65b435fc169a1010b4cfed57b8898cdc:678675185,4c047dbcc19a1010ef876dc4ec48c0cf:-1994847698,33e2b1bc509a10107934b76249289c8f:-1593096566,512240746f5a5010ce7547822de5e13f:-873677014,b7f9a1abfcc2101092ae7a8c193a6c51:-138773803,4ae3b69c3bb110105d0a7b3dfdf71804:-1475259745,60d9cb426765101066f2b695fed84d98:1166033529,2d6ead3f5b1510108177eddcf5466c05:665074804,3f3e25bfa2151010efaad0cc7c72c242:911774252,d9fda17f1e151010d85bf3dbc72aa7f2:1620201173,274d21fb03151010836a43296dfb5137:856733103,c00de93f5e15101087884730d37a8db3:1149588985,47bc693ff51510102b7c714e99f94f11:558975389,057c253fe4151010f834871adc275e2a:-555751529,b034293702151010e9362012ae157ff3:1377150349,ee65e5e35f19d010ca56ab5f1c9586c0:690433655,ee4d2dda5ad51010442a081c400249e2:1280856281,60bc61dae3d51010056b0647b0181fdb:531484213,e62ca91a8fd51010a1cc287f11e7d46a:1280856281,36b1dcd6229110101822dbe8e28961d7:1010119749,a0edc816a9911010aab5be1afc550da6:1727563570,3fc9081200911010b557d486fe4f51da:424037371,893d3706cd511010d0bf142653aecc45:-673351659,339a3fceb811101054ac842d75ef90b8:-1617902904,4575f78e181110107cd5825825a98d9b:531484213,7b40a80634191010d99714001887b9d8:-1710536527,aebf18c287191010a80f99abe9d80034:-1624610193,60e150c634d51010bd2345839078c0e5:-1629970951,e5c150c640d510107f891c22bb45e583:-62308143,36af08063dd51010eee57379f230e0c9:1086425577,944e88c295d51010efae086b8947f7a3:531484213,196c8082ccd51010d35397a55d2f536d:1086425577,63a944cec7951010cdc6fd108f2ddebd:185809101,4fb8c84ef7951010b7c099f53e332749:-1818206572,6997480e9d951010c97785173463621a:-1382456186,abf50cca6b951010dc2cf565e8a0842c:794305231,21654c8aed9510105335898502880150:150160512,52e40c4afe951010a315990823e6cf38:-1940950828,edc3008a0c951010b88b2a42a7c49cc3:2067922260,07e1080a96951010fecc5c67ac569420:-407376569,4bff7bb5fb951010e9daf82dc91d0684:-1685133799,4f0abffd3555101057e677b18aa5335b:270236268,89b9fb31fc951010279081f9c9855e4f:-298057008,b459f7bd13551010a2a44b46ce8310b0:-1567524894,2965f7355e55101005d4629b4cf6480f:-650753812,aff2afb91215101036cd8382513aaf19:531484213,294e53f547151010efca5fb8a18f05a6:-650753812,e1197e75c19110101f59116f0cedf8a1:2098873489,807d62b9525110108ec83f2c3a626706:-1142545809,92701b2d6a51101010e65fbd94b83a59:531484213,b37f0a9ca8511010d6cff8fb83e9c3a2:-1316270059,df7d731d9f051010d803cc2febe39530:-205233846,5b89ab8a9330101081dd27f8b43ba3c5:-1312592985,a600ef1c9028101035fc8b3fca906587:-1650357167,f2c1efeb939033008b4563b1d756ee8e:-816363756,f2c1efeb939033008b4563b1d756ee8e:-816363756,f2c1efeb939033008b4563b1d756ee8e:-816363756,d1d0e3eb9f90330051ff92d018910b29:306340261,a5cadf676d9033007926ec210c4b8e49:-1788121133,9d6a5ba7c0903300f4268845fed505d9:151227784,88299367eb903300a4ebac8338c43e1e:1467803285,a8a5df23f8903300ba1f4dc7705fdefe:-1923993997,ddf78dabde72af009fd85dcedd5c4fc4:1196852450,a9c069112c97e300d3192bdf15b4172f:1196852450,055c8595b557e3006b2aefcc52b9ff44:1899275544,e1ab8d956557e3004298c17d7b715c32:1251731837,5ac59dc44f93630026b33716de49cd59:1196852450,6275ddc4919363003262c038d7c01cb7:-1980212820,b525ddc4e59363003a9dec30504ee0af:655080080,84e41dc4db9363008a298ab04de86433:1876584557,50a4d9c4b29363002903e839c0ecf275:1318027831,873415c476936300822127c3c6133562:1899275544,4bd391c44e936300c42e0e40fb0a5cf6:1251731837,90d01d449a936300df58cb9975617e6f:1196852450,a2901d44c19363002b8755381c1a0f69:1962642511,4020194411936300a05cf33fc53763ac:-428036135,25ef8d044e936300792d7a280d4ff781:1273419514,67bf0544dd936300fe45664726d01b6a:-395071109,fefe49047e936300415d30aa635b27f0:-1437756037,13fdcdc05f936300e9239bfaa3bc1224:-1099279049,ddf78dabde72af009fd85dcedd5c4fc4:1196852450,19bfa8ef6d32af0047a0e78db6772777:472088441,d42e28ef6732af00d799b151b24e07df:1184613722,5b6da06f8932af001c7ad0a02fa0efb6:-2082560488,8237602fde32af00c8395276d2ff911f:-2081555122,48a620ab5032af00c2bbb5cfbd3c7522:-692354905,d6b568eb0b32af00b4faf6cadcba9de8:1397333579,05a1286b0732af00662a98a09636105c:-1506558962,f7b0282b7b32af00dd056935690e9e37:244497574,a28fd0675232af009a5767c6d9fbbff8:892911044,6f6e542b5432af006e917bb11caa0e25:1609578736,5d1818e35f32af001909e68bfe820e2d:-1978246257,1e84146b91fe6f002b2ad5a467d43692:209774060,2e0d941f627a6f0089ebcb81f2bd8616:39968997,c3b7545bbb7a6f00f1770e63a07ea446:302484228,69a7145bf57a6f000d363841436c88f8:-1448559561,d2d4d05bb73a6f00f6407fb37f10064f:-1647075354,86fd80978a7a6f0080b9d3541f3850df:1017610758,9f522f833a3a6f0023ae40f2382334f4:-1801198420,4aff1b4f64f66f00e05f2484d6382d94:1696972300,5606974fe8f66f00093c3e289c996db8:643476949,7482dbcb1ff66f001041b88d3964d26b:-801073659,15edf6830af66f00502da05fcbab522e:-506167537,5d8d728340f66f0012d305ad8164a693:-960848418,0a2ab6cfbdb66f00b4004fec7a02f40c:-133434562,7e797acfb6b66f009361edbe74e0d76f:-1008023439,35c83e4fc5b66f003e0a2ec80da00434:-1379841087,9e97f68fa6b66f00f21549496b3737fc:-614813757,49e6f68fc4b66f00e590d8a7ed6dfbee:-427552081,ea96768f2fb66f0049fd2bc956c1d6af:-1270784329,3c76368f06b66f008897a2440c47ce92:116058194,aa26728fdab66f00e85ce389cf4843d9:1919646062,9e35ba4ff6b66f004f6d62d7d448b7e7:-69155908,6be43a4f21b66f00fee283156cb9fe61:286519836,6a14b60f50b66f0079ced223b1ce5531:-145497396,19e817feaa326f0089bee3855837adc1:-573141504,fc689fbec0326f00f4e6462dda33e4c1:-2110193584,1d214376e2326f00b641afe397f2ad09:-1744055888,95010bf2f3326f00136a7e5448970a1b:-2084052155,6ccdf2b2ff326f0057e347b0bf8a50a1:-884379881,aa6d36f2a8326f007d3c182382e8e946:-825625613,ceaa327274326f006e074c3dc76ebaba:-1593005021,6e3ab67234326f00184efdcb8055412a:-605579030,e8c73a7ea6fe2f005153e7412918207e:850729630,a367fafe84fe2f003014eed7e6236de2:-1084965973,44e33e3edffe2f0084ac2ffe2efcfb24:59945366,b3ff6a3e53fe2f00963421643b7e6b83:-772757158,03b8ae3a8dfe2f008bca2224f1561957:-1163004068,ce97e23a11fe2f005acf5b10e52b1e2c:1897041248,43c1223662fe2f00dcbe9941aa7798b8:-496541122,34044a3ac3be2f00c09d8b5e94a08447:2042002873,be8146f603be2f00723e47926459582b:-1144870368,3b77fd72ffbe2f004a0f202811f49cf8:1836252809,dc36b5b256be2f001f0623c085cd565e:1813567887,0406b5b273be2f009a8055869cfaef1d:999150767,fea42e1300a2e700908e315780d4a466:-1846761943,8a04e613b6a2e700f0d804ce11aadf35:368191674,6be3269f8262e700de32136651d5aaf1:1662353435,554f5e1b8262e7006ceceb37f5ac1aa2:179474928,58ba46d32362e700eb1a862ed8a7b2a6:1466040021,022aca93e862e700af699e2c6ee1df17:1919566858,6512733affa6a700e2d774bf4a835096:-1743657742,22cb943ea322a700033a427f8640b02a:-63708390,c1f0ccfea0ee6700f497539a8fee35f0:1255079413,d41bc601ad26e300c9864f1b2f3a95fa:-1289689929,82d90e01dd26e30007e80dfb139c8d09:-1565392156,a6854e0d51e2e30055e42b032f35d7cb:-51880121,f12bb5c517e2e30000ff00c978a6fc6f:375668370,59f9f18558e2e300d253edb0122c5a05:1926722498,4ab4f5013fe2e300efc4ac6e16e4398c:-348660308,ad43953822eaa300aa6475fbc144fdd7:1104892590,84f29138deeaa300a25630e348ba0204:-1484826896,f36f4df046eaa300ad33a85e9f25a6ff:-270210289,bcbe41b454eaa300f7b296e4e6aab37b:-449800859,9d930d306beaa30070728ce8a923d565:-344886244,810930f862aaa30072cd228ff73d36e4:-1251842297,536570b82eaaa300215b6b921078484c:865755814,9f83f0780faaa30036a90f461ad42abb:776732234,8da0787421aaa30027baaa7bc4f4f29c:420817754,2b2f64b492aaa300f3416020929bf497:1468740632,bc7cac3412aaa300b2883874da8e4638:645835134,4406186cb9a2a30096b66c4d93cdb727:-1164208823,74441ce8f3a2a300a47132f3f17cf397:-529502254,0a4054e4b1a2a300c4b5cc106ec3d93f:-1628899959,4f914c248aa2a3005487db9fb3135868:2125132541,f4b8f3107ca2a30043e9947ad832ccba:1174869554,0d9ab6849f6a6300e0b1bbf0e4c07d5a:0,9e98b648de2a630097bb714d442fbaaa:-184083801,9ed71a446de663009d7d73707834a900:-1530396517,3494accccf1363003d68b1fc05986b72:-1530396517</update_guid_history>
<update_set display_value="" />
<view />
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</application>
<category>customer</category>
<comments />
<name>sysevent_script_action_b1f3f99647101210f3ad4d05516d434b</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sysevent_script_action"&gt;&lt;sysevent_script_action action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;condition_script/&gt;&lt;description/&gt;&lt;event_name&gt;x_pd_integration.update_priority_only&lt;/event_name&gt;&lt;name&gt;PagerDuty Update Priority Only&lt;/name&gt;&lt;order&gt;100&lt;/order&gt;&lt;script&gt;&lt;![CDATA[/*** Changes made to this script are not supported by PagerDuty ***/
gs.debug("PagerDuty 'x_pd_integration.update_priority_only' Incident event fired from {0}", event.parm2);
var pd = new x_pd_integration.PagerDuty();
pd.updatePriorityOnly(current, event.parm1, event.parm2);
]]&gt;&lt;/script&gt;&lt;synchronous&gt;false&lt;/synchronous&gt;&lt;sys_class_name&gt;sysevent_script_action&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2024-08-30 19:07:32&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;b1f3f99647101210f3ad4d05516d434b&lt;/sys_id&gt;&lt;sys_mod_count&gt;4&lt;/sys_mod_count&gt;&lt;sys_name&gt;PagerDuty Update Priority Only&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="PagerDuty Incident Resolution Platform"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sysevent_script_action_b1f3f99647101210f3ad4d05516d434b&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-03-31 02:10:37&lt;/sys_updated_on&gt;&lt;/sysevent_script_action&gt;&lt;sys_es_latest_script action="INSERT_OR_UPDATE"&gt;&lt;id&gt;b1f3f99647101210f3ad4d05516d434b&lt;/id&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2025-03-26 20:19:09&lt;/sys_created_on&gt;&lt;sys_id&gt;c30fc15dc360a21040d0becdd40131c1&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-03-26 20:19:09&lt;/sys_updated_on&gt;&lt;table&gt;sysevent_script_action&lt;/table&gt;&lt;use_es_latest&gt;false&lt;/use_es_latest&gt;&lt;/sys_es_latest_script&gt;&lt;/record_update&gt;</payload>
<payload_hash>910477004</payload_hash>
<remote_update_set display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Child">2dd0afe2c3ac221040d0becdd40131d1</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-03-31 04:08:31</sys_created_on>
<sys_id>add0afe2c3ac221040d0becdd40131d2</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>195e9f710f10000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-03-31 04:08:31</sys_updated_on>
<table>x_pd_integration.update_priority_only</table>
<target_name>PagerDuty Update Priority Only</target_name>
<type>Script Action</type>
<update_domain>global</update_domain>
<update_guid>f2d54baecae82210b0aeeaa6d93ff8d9</update_guid>
<update_guid_history>f2d54baecae82210b0aeeaa6d93ff8d9:910477004,5c7f495d7b60a210fae4e66ed0274b2c:-1831394389,5b0f055d2660a210605bc4381274683f:622226347,fc0f815d9a60a2102c788d0da78080cb:-905456973</update_guid_history>
<update_set display_value="" />
<view />
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</application>
<category>customer</category>
<comments />
<name>sys_script_client_e4e10ff04ff13300d0fbff6f9310c79b</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script_client"&gt;&lt;sys_script_client action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;applies_extended&gt;false&lt;/applies_extended&gt;&lt;condition/&gt;&lt;description/&gt;&lt;field&gt;assigned_to&lt;/field&gt;&lt;global&gt;true&lt;/global&gt;&lt;isolate_script&gt;false&lt;/isolate_script&gt;&lt;messages/&gt;&lt;name&gt;AutoRefresh PagerDuty Response List&lt;/name&gt;&lt;order/&gt;&lt;script&gt;&lt;![CDATA[function onLoad(control, oldValue, newValue, isLoading, isTemplate) {
  if (!g_user.hasRoleFromList('x_pd_integration.admin,x_pd_integration.incident_response,x_pd_integration.services_provisioning')) {
    return;
  }

  if (isLoading || newValue === '') {
    return;
  }

  var initialActivitiesCount = jQuery('ul.activities-form li').length;

  var onActivitiesChange = function() {
    var currentActivitiesCount = jQuery('ul.activities-form li').length;
    if (currentActivitiesCount != initialActivitiesCount) {
      refreshList();
      initialActivitiesCount = currentActivitiesCount;
    }
  };
  setInterval(onActivitiesChange, 2000);
}

function refreshList() {
  var listName = 'PagerDuty Response';
  try {
    var elementLookup = $$('div.tabs2_list');
    for (i = 0; i != elementLookup.length; i++) {
      if (elementLookup[i].innerHTML.indexOf(listName) != -1) {
        var listHTML = elementLookup[i].id.split('_');
        var listID = listHTML[0];
        GlideList2.get(listID).refresh('');
      }
    }
  }
  catch (err) {
    jslog('Error refreshing list "' + listName + '": ' + err.message);
  }
}
]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_client&lt;/sys_class_name&gt;&lt;sys_created_by&gt;PagerDuty_v8.1&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2019-05-31 12:41:54&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;e4e10ff04ff13300d0fbff6f9310c79b&lt;/sys_id&gt;&lt;sys_mod_count&gt;40&lt;/sys_mod_count&gt;&lt;sys_name&gt;AutoRefresh PagerDuty Response List&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="PagerDuty Incident Resolution Platform"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_client_e4e10ff04ff13300d0fbff6f9310c79b&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-03-11 14:25:26&lt;/sys_updated_on&gt;&lt;table&gt;incident&lt;/table&gt;&lt;type&gt;onLoad&lt;/type&gt;&lt;ui_type&gt;0&lt;/ui_type&gt;&lt;view/&gt;&lt;/sys_script_client&gt;&lt;/record_update&gt;</payload>
<payload_hash>-475645216</payload_hash>
<remote_update_set display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Child">2dd0afe2c3ac221040d0becdd40131d1</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-03-31 04:08:31</sys_created_on>
<sys_id>add0afe2c3ac221040d0becdd40131d5</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>19585989cd60000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-03-31 04:08:31</sys_updated_on>
<table>incident</table>
<target_name>AutoRefresh PagerDuty Response List</target_name>
<type>Client Script</type>
<update_domain>global</update_domain>
<update_guid>e73ea25456102210dbd4836cef7dcab0</update_guid>
<update_guid_history>e73ea25456102210dbd4836cef7dcab0:-475645216,8924e7787d353300a041e421b330e0cb:1283907856,8924e7787d353300a041e421b330e0cb:1283907856,8924e7787d353300a041e421b330e0cb:1283907856,3fb26374f83533000f8d79cbf05433e7:-161645388,1a291bf021353300e35ce5b20f53b704:-585968302,8c095ff03b353300bbebf8d3ab2a5579:577187930,ead85bf07b35330031dbcac8f435a9e5:-485505917,48b85bf000353300cfeda0f6e8be28ad:436411856,a48897f00d3533001bdb15d09422a691:-205426320,b468d7b0253533006870d10ea27a712d:1538049622,66555b705f353300789a516b820c0b11:1103462758,cb259770963533008f9050cd1e685ec6:-3062294,25f41bbc47f13300a7661ac1f8012bec:1481758247,47d45f308f353300a65eb95879941180:-1361976925,ccd49f30e6353300696e3e1dd60eee4d:167162988,62641f30933533002dbcafbbb2614efa:565511862,485053bc52f133006a2ec1e7d2de09c0:15818151,84209f7ce7f133004ce6c404b0f20540:-1795552346,feaf8b7cb2f13300c26fb870733c7272:-142260024,204f077c0cf1330052b3a38337111c43:226660245,b28c0ff8f9f1330065c7fa872bd88f6c:-142260024,321cc7f8def133004df772b3ebad70a1:-1471762284,94ebc7f867f1330087a825104e3d7ed2:83041145,712bcfb89bf1330015c5f7ea3973a906:1395150049,97194738c5f133004b1beeeebd8b62d6:-143176143,af8887387ef13300d9a5c452e2f646b7:-1812068835,3a28033864f13300c6dc14c322a07b70:445452353,3bd74738f8f13300ebf4070fad3859d1:1876851200,2da743380bf13300af20c90272b88e4e:1257968866,2a8783f410f13300129de5371f5c266a:-2095336573,e8574fb471f133002d9b443530643758:1281405332,b1174bf423f133009a036b01284a274a:289718759,1156c7b472f1330081060084da1e3d59:1844510810,8ce54bb416f13300f2512156247f58d0:1476134125,0765c7b4e8f133003e8b92e050c79150:843885702,8dd4cf74b0f1330011092e241c93e6c9:525929786,3cb4cb7404f1330074970d0c545741c7:-551177692,07640374e6f133001562ae21fc1a7737:-110720605,65e34ff04cf1330069d92766950b9a5c:1230272492,3c838fb07bf1330011ec9db445e4da04:794525194,a9e20b34e0f133003472b7ed9fca650a:1521934476,6c620ff094f133001d28983c06a15ca9:1096969389</update_guid_history>
<update_set display_value="" />
<view />
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</application>
<category>customer</category>
<comments />
<name>sys_script_368d77a6c3bdf11086432355df01318e</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;&lt;sys_script action="INSERT_OR_UPDATE"&gt;&lt;abort_action&gt;false&lt;/abort_action&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;action_delete&gt;false&lt;/action_delete&gt;&lt;action_insert&gt;false&lt;/action_insert&gt;&lt;action_query&gt;false&lt;/action_query&gt;&lt;action_update&gt;true&lt;/action_update&gt;&lt;active&gt;true&lt;/active&gt;&lt;add_message&gt;false&lt;/add_message&gt;&lt;advanced&gt;true&lt;/advanced&gt;&lt;change_fields&gt;false&lt;/change_fields&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;collection&gt;incident&lt;/collection&gt;&lt;condition&gt;gs.isLoggedIn()&lt;/condition&gt;&lt;description/&gt;&lt;execute_function&gt;true&lt;/execute_function&gt;&lt;filter_condition table="incident"&gt;x_pd_integration_incidentISNOTEMPTY^x_pd_integration_incidentNOT LIKE---^cmdb_ciVALCHANGES^cmdb_ciISNOTEMPTY^cmdb_ci.x_pd_integration_pagerduty_serviceISNOTEMPTY^ORassignment_group.x_pd_integration_pagerduty_serviceISNOTEMPTY^assignment_groupISNOTEMPTY^assignment_group.x_pd_integration_pagerduty_escalationISNOTEMPTY^EQ&lt;item endquery="false" field="x_pd_integration_incident" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/&gt;&lt;item endquery="false" field="x_pd_integration_incident" goto="false" newquery="false" operator="NOT LIKE" or="false" value="---"/&gt;&lt;item endquery="false" field="cmdb_ci" goto="false" newquery="false" operator="VALCHANGES" or="false" value=""/&gt;&lt;item endquery="false" field="cmdb_ci" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/&gt;&lt;item endquery="false" field="cmdb_ci.x_pd_integration_pagerduty_service" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/&gt;&lt;item endquery="false" field="assignment_group.x_pd_integration_pagerduty_service" goto="false" newquery="false" operator="ISNOTEMPTY" or="true" value=""/&gt;&lt;item endquery="false" field="assignment_group" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/&gt;&lt;item endquery="false" field="assignment_group.x_pd_integration_pagerduty_escalation" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/&gt;&lt;item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/&gt;&lt;/filter_condition&gt;&lt;is_rest&gt;false&lt;/is_rest&gt;&lt;message/&gt;&lt;name&gt;PD Update Incident on CI change&lt;/name&gt;&lt;order&gt;200&lt;/order&gt;&lt;priority&gt;100&lt;/priority&gt;&lt;rest_method/&gt;&lt;rest_method_text/&gt;&lt;rest_service/&gt;&lt;rest_service_text/&gt;&lt;rest_variables/&gt;&lt;role_conditions/&gt;&lt;script&gt;&lt;![CDATA[function onAfter(current, previous) {

	if(previous.cmdb_ci.name == '') {
		return;
	}

	// Actually this was updated to modify the Service in PD Incident
	var eventName = "x_pd_integration.update_on_ci_change";
	gs.debug("Firing event {0} for {1}", eventName, current.getDisplayValue());
	var currentUserSysid = gs.getUser().getID();
	gs.eventQueue(eventName, current, currentUserSysid, current.x_pd_integration_incident);

	// // Clear PD Incident  ID
	// current.x_pd_integration_incident = "---waiting---";
	// current.update();

	// // Create a new Incident
	// eventName = "x_pd_integration.trigger_incident";
	// gs.debug("Firing event {0} for {1} since it was reassigned to a different CI", eventName, current.getDisplayValue());
	// var currentUserSysId = gs.getUser().getID();
	// var changeValue = true;
	// var params = currentUserSysId + "," + current.operation() + "," + changeValue;
	// gs.eventQueue(eventName, current, current.work_notes.getJournalEntry(-1), params);

}
]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2023-10-13 20:58:58&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;368d77a6c3bdf11086432355df01318e&lt;/sys_id&gt;&lt;sys_mod_count&gt;17&lt;/sys_mod_count&gt;&lt;sys_name&gt;PD Update Incident on CI change&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="PagerDuty Incident Resolution Platform"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_368d77a6c3bdf11086432355df01318e&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-02-18 19:17:17&lt;/sys_updated_on&gt;&lt;template/&gt;&lt;when&gt;after&lt;/when&gt;&lt;/sys_script&gt;&lt;sys_translated_text action="delete_multiple" query="documentkey=368d77a6c3bdf11086432355df01318e"/&gt;&lt;sys_es_latest_script action="INSERT_OR_UPDATE"&gt;&lt;id&gt;368d77a6c3bdf11086432355df01318e&lt;/id&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2025-02-18 18:47:06&lt;/sys_created_on&gt;&lt;sys_id&gt;77b0afe9c3bb121040d0becdd4013135&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-02-18 18:47:06&lt;/sys_updated_on&gt;&lt;table&gt;sys_script&lt;/table&gt;&lt;use_es_latest&gt;false&lt;/use_es_latest&gt;&lt;/sys_es_latest_script&gt;&lt;/record_update&gt;</payload>
<payload_hash>2114771248</payload_hash>
<remote_update_set display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Child">2dd0afe2c3ac221040d0becdd40131d1</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-03-31 04:08:31</sys_created_on>
<sys_id>e1d0afe2c3ac221040d0becdd40131d4</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1951a7e47630000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-03-31 04:08:31</sys_updated_on>
<table>incident</table>
<target_name>PD Update Incident on CI change</target_name>
<type>Business Rule</type>
<update_domain>global</update_domain>
<update_guid>82a723a57cfb12100cbbfddfda641850</update_guid>
<update_guid_history>82a723a57cfb12100cbbfddfda641850:2114771248,c4a7a3a5fdfb1210fb43d6bc4738c03c:939587698,18672761b4fb12101d6a9bb01592e061:-1849303950,2157eb65d7fb12101481e79805bc72b9:-922259007,96832721dbfb12109e1d3840a8488b2c:1460951289,2e63ab21f5fb1210888c57f794b13adc:844854875,7fb0e72d5dbb1210f143b8f0bf9b0f17:1732604517,df40232d3bbb1210340d9aa0f76e99c7:-385354631</update_guid_history>
<update_set display_value="" />
<view />
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</application>
<category>customer</category>
<comments />
<name>sys_script_include_7a0e7e0b87281510007552873cbb355e</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_pd_integration.PdWebhookTransformV3&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description&gt;Transformation script for V3 webhooks&lt;/description&gt;&lt;mobile_callable&gt;false&lt;/mobile_callable&gt;&lt;name&gt;PdWebhookTransformV3&lt;/name&gt;&lt;sandbox_callable&gt;false&lt;/sandbox_callable&gt;&lt;script&gt;&lt;![CDATA[/*** Changes made to this script are not supported by PagerDuty ***/

/*
  For variables go to:
  https://docs.servicenow.com/bundle/utah-integrate-applications/page/script/server-scripting/reference/r_TransformationScriptVariables.html
*/

var PdWebhookTransformV3 = (function () {
  var ASSIGN_ON_ACK_ONLY = gs.getProperty('x_pd_integration.assign_on_ack_only');
  var DEFAULT_USER = gs.getProperty('x_pd_integration.default_user');
  var SET_ASSIGNEE = (source.assigned_to_pd_id != DEFAULT_USER);
  var NOTES_HELPER = x_pd_integration.WorkNotesHelper;
  var TASK_HELPER = new x_pd_integration.TaskEntityHelper(target, source.target_table);
  var PRIORITY_TABLE = 'x_pd_integration_pagerduty_priority';
  var RR_IMPORT_TABLE = 'x_pd_integration_pagerduty_response_requests_import';
  var PD_CLIENT = new x_pd_integration.PagerDuty();
  var EVENT_ORIGINATED_IN_SERVICE_NOW = PD_CLIENT.isClientServiceNow(String(source.message_channel_client));

  /*
    Register specific message handlers below.
    Note: Any message not listed here will be logged as error and ignored (see transform)
  */
  var MESSAGE_HANDLERS = {
    'incident.acknowledged': transformAcknowledged,
    'incident.annotated': transformAnnotated,
    'incident.conference_bridge.updated': transformConferenceBridgeUpdated,
    'incident.custom_field_values.updated': transformCustomFieldValuesUpdated,
    'incident.delegated': transformDelegated,
    'incident.escalated': transformEscalated,
    'incident.priority_updated': transformPriorityUpdated,
    'incident.reassigned': transformReassigned,
    'incident.resolved': transformResolved,
    'incident.responder.added': transformResponders,
    'incident.responder.replied': transformResponders,
    'incident.triggered': onMessageTriggered,
    'incident.unacknowledged': transformUnacknowledged,
    'incident.workflow.completed': transformIncidentWorkflow,
    'incident.workflow.started': transformIncidentWorkflow,
    'incident.incident_type.updated': transformIncidentTypeUpdated,
  };

  function tryTransform () {
    try {
      transform();
      // Update incident type, if available
      updateIncidentType();
      // Execute dynamic inbound field rules
      runInboundFieldRules();
      // Call customizable script
      runInboundCustomScript();
    } catch (e) {
      gs.error('Error in PdWebhookTransformV3: ' + e.message);
    }
  }

  function transform () {
    var rows = [];
    var messageType = String(source.message_type);

    // Lookup specific handler for the message type.
    var messageHandler = MESSAGE_HANDLERS[messageType];
    if (messageHandler) {
		// Disabling transaction when SN INC is resolved - except Notes
		if (action == 'update' &amp;&amp; TASK_HELPER.isTaskHasResolvedState(target.state) &amp;&amp; (messageType != 'incident.annotated')) {
			// If target.state is already resolved ignore
			ignore = true;
			gs.info("Transform: ignore transaction since the target is already resolved: " + source.id + ':' + target.number);

			// Resolve PD incident
			PD_CLIENT.resolveIncident(target, 'system');
			// return;
		}
      rows.push(messageHandler());
    } else {
      gs.error('Unknown event type: ' + messageType);
      ignore = true;
    }

    mergeRows(target, rows);
  }

  function updateIncidentType () {
    var messageType = String(source.message_type);

    // 'incident.triggered', 'incident.action.trigger', and 'incident.incident_type.updated' also contain the
    // incident type, but they are handled in a different way:
    // - 'incident.triggered' and 'incident.action.trigger': handled in a transform script (onAfter).
    // - 'incident.incident_type.updated': handled in the transform function 'transformIncidentTypeUpdated'.
    var webhooksContainingIncidentType = [
      'incident.acknowledged',
      'incident.delegated',
      'incident.escalated',
      'incident.priority_updated',
      'incident.reassigned',
      'incident.resolved',
      'incident.unacknowledged'
    ];

    var shouldUpdateIncType = ''.includes.call(webhooksContainingIncidentType, messageType);

    if (action === 'update' &amp;&amp; !EVENT_ORIGINATED_IN_SERVICE_NOW &amp;&amp; shouldUpdateIncType === true) {
      var incidentTypeName = getIncidentTypeNameFromPayload();
      tryToUpdateIncidentType(incidentTypeName);
    }
  }

  function onMessageTriggered () {
    var priority = applyPriority();
    var triggered = transformTriggered();
    return merge(priority, triggered);
  }

  function transformUnacknowledged () {
    ignore = true;
    return {};
  }

  function transformAcknowledged () {
    if (action === 'insert') {
      ignore = true;
      return {};
    } else if (action === 'update') {
      var assignmentsSummary = parseAssignmentsSummary();
      return tryToAcknowledge(assignmentsSummary);
    }
  }

  function transformIncidentWorkflow () {
    var messageType = source.message_type.split('.').pop();
    var dest = {};
    var rows = [];
    if (action === 'insert') {
      ignore = true;
    } else if (action === 'update') {
      var eventPayloadData = JSON.parse(source.payload);
      var incidentWorkflowName = eventPayloadData.data.incident_workflow.summary;
      var note = 'Incident Workflow "' + incidentWorkflowName + '" ' + messageType + '.';

      rows.push(showIncidentWorkflowNote(note));
    }
    return mergeRows(dest, rows);
  }

  function transformIncidentTypeUpdated () {
    ignore = true;
    if (action === 'update') {
      var incidentTypeName = getIncidentTypeNameFromPayload();
      // update incident type in ServiceNow
      if (!EVENT_ORIGINATED_IN_SERVICE_NOW) {
        gs.debug('Incident type updated in PagerDuty; updating incident type in ServiceNow');
        tryToUpdateIncidentType(incidentTypeName);
      }
      // sync custom fields independently of the origin of the change (PagerDuty or ServiceNow)
      if (incidentTypeName &amp;&amp; incidentTypeName !== 'incident_default') {
        // if the type changes to something other than the default type, there may be PD custom fields of the new
        // type that are out of sync with SN; here we sync all with the assumption that SN is the source of truth
        var pdIncidentId = String(source.id);
        var processor = new x_pd_integration.PagerDutyCustomFieldsOutboundSync();
        processor.updateAllPdCustomFields(target, pdIncidentId);
      }
    }
    return {};
  }

  /**
   * Retrieves the incident type from the payload of the event and update/create the incident type in ServiceNow.
   * returns the incident type name if it was found in the payload or be able to create it, otherwise null.
   * @returns {String} incidentTypeName
   */
  function tryToUpdateIncidentType (incidentTypeName) {
    if (!incidentTypeName) {
      gs.error('Cannot update incident type: incident type name is null');
      return;
    }
    var typeSync = new x_pd_integration.IncidentTypeSync();
    var incidentTypeSysId = typeSync.ensureIncidentTypeExists(incidentTypeName);
    if (incidentTypeSysId) {
      x_pd_integration.TaskEntityHelper.insertOrUpdateIncidentTypeReference(target, incidentTypeSysId, false);
    } else {
      gs.error('Could not update incident type; incident type {0} not found in the system', incidentTypeName);
    }
  }

  function transformAnnotated () {
    var dest = {};

    if (action === 'insert') {
      ignore = true;
    } else if (action === 'update') {
      // eslint-disable-next-line es5/no-es6-methods
      if (source.note &amp;&amp; !source.note.includes('(from ServiceNow:')) {
		gs.debug("Transform: Work Notes set.");
        dest.work_notes = NOTES_HELPER.build(source.note + ' (PagerDuty:' + source.username + ' on ' +
          (new GlideDateTime()).getDisplayValue() + ')');
      }
    }
    return dest;
  }

  function transformConferenceBridgeUpdated () {
    var dest = {};
    var rows = [];
    if (action === 'insert') {
      ignore = true;
    } else if (action === 'update') {
      var eventPayloadData = JSON.parse(source.payload);
      // Webhook represents conference numbers as an array, but Incident metadata only stores one.
      // We'll just take the first one.
      var conferenceNumber = '';
      if (eventPayloadData.data.conference_numbers &amp;&amp; eventPayloadData.data.conference_numbers.length &gt; 0) {
        conferenceNumber = eventPayloadData.data.conference_numbers[0].number || '';
      }
      var conferenceURL = eventPayloadData.data.conference_url || '';
      var newConferenceBridgeValue = (conferenceNumber + ' ' + conferenceURL).trim();

      if (EVENT_ORIGINATED_IN_SERVICE_NOW) {
        gs.debug('Event "incident.conference_bridge.updated" ignored because it was originated in ServiceNow');
        return dest;
      }
      var note = 'PagerDuty Conference Bridge: \n';
      if (conferenceNumber) {
        note = note + 'Dial-in number: ' + conferenceNumber + '\n';
      }
      if (conferenceURL) {
        note = note + 'URL: ' + conferenceURL + '\n';
      }
      dest.x_pd_integration_conf_bridge = newConferenceBridgeValue;
      rows.push(showConferenceBridgeUpdatedNote(note));
    }
    return mergeRows(dest, rows);
  }

  function transformCustomFieldValuesUpdated () {
    if (action === 'insert' || EVENT_ORIGINATED_IN_SERVICE_NOW) {
      ignore = true;
      if (EVENT_ORIGINATED_IN_SERVICE_NOW) {
        gs.debug('Event "incident.custom_field_values.updated" ignored because it was originated in ServiceNow');
      }
    } else if (action === 'update') {
      var processor = new x_pd_integration.PagerDutyCustomFieldsInboundSync();
      ignore = !processor.processCustomFieldValuesUpdated(target, JSON.parse(source.payload));
    }
    return {};
  }

  function transformEscalated () {
    var dest = {};

    if (action === 'insert') {
      ignore = true;
    } else if (action === 'update') {
      dest = stateAndAssign('escalate');
    }

    return dest;
  }

  function transformDelegated () {
    var dest = {};
    var rows = [];

    if (action === 'insert') {
      ignore = true;
      return {};
    }

    var epId = String(source.escalation_policy_id);
    var epName = String(source.escalation_policy);
    var priorityValue = String(target.priority);
    var newGroupId = getGroupIdByEpIdAndPriorityValue(epId, priorityValue);

    if (!newGroupId) {
      rows.push(showReassignmentNote('PagerDuty incident was not delegated to the ' + epName +
        ' escalation policy because there is no corresponding assignment group in ServiceNow'));
      return mergeRows(dest, rows);
    }

    dest.assignment_group = newGroupId;

    var newGroupName = getGroupName(newGroupId);

    var newAssigneeId;
    var assigneesIds = getAssigneesIds(JSON.parse(source.payload));
    var groupMembersIds = getGroupMemberIds(newGroupId);

    var foundUser = assigneesIds.some(function (assigneeId) {
      if (groupMembersIds[assigneeId]) {
        newAssigneeId = assigneeId;
        return true;
      }
      return false;
    });

    if (foundUser) {
      // CUSTOM HERE - Set Assigned to only if it is not default user
      if (SET_ASSIGNEE) {
        dest.assigned_to = newAssigneeId;
        rows.push(showReassignmentNote('PagerDuty incident was delegated to the assignment ' +
        'group ' + newGroupName));
      }
      // END OF CUSTOM HERE
    } else {
      // CUSTOM HERE - Do not clear Assigned To
      // dest.assigned_to = '';
      rows.push(showReassignmentNote('PagerDuty incident was delegated to the ' + newGroupName +
       ' assignment group'));
      // END OF CUSTOM HERE
    }

    if (ASSIGN_ON_ACK_ONLY === 'true') {
      dest.state = triggerStateValue(source.target_table);
      if (foundUser) {
        // CUSTOM HERE - Do not clear Assigned To
		// 'dest.assigned_to = '';
        rows.push(showReassignmentNote('PagerDuty incident was delegated to the ' + newGroupName +
         ' assignment group, and since the option [Do not assign until acknowledged] is on'));
		// END OF CUSTOM HERE
      }
    }

    return mergeRows(dest, rows);
  }

  function transformPriorityUpdated () {
    var dest = {};

    if (action === 'insert') {
      ignore = true;
    } else {
      dest = applyPriority();
    }

    return dest;
  }

  function applyPriority () {
	gs.info("PdWebhookTransformV3 - applyPriority started...");
    var dest = {};
	var iuObj;
    var gr = new GlideRecord(PRIORITY_TABLE);

	if (source.priority_id) {
		if (action == 'update') {
			gr.addQuery('pagerduty_priority_id', source.priority_id);
		} else {
			gr.addQuery('priority', '4');
		}
	}

    gr.query();

    if (gr.next()) {
      var impact = String(gr.impact);
      var urgency = String(gr.urgency);
      var priority = String(gr.priority);
      var priority_display = gr.priority.getDisplayValue();

      if (target.getValue('priority') !== gr.getValue('priority')) {
        if (!gs.nil(gr.impact) &amp;&amp; !gs.nil(gr.urgency) &amp;&amp; !gs.nil(gr.priority)) {
          if (action == 'insert') {
            dest.impact = String(gr.impact);
            dest.urgency = String(gr.urgency);
			iuObj = {
				impact: impact,
				urgency: urgency,
				priority: priority,
				priority_display: priority_display
			};
			gs.info("PdWebhookTransformV3 - applyPriority (Insert) - Impact: {0}, Urgency: {1}, Priority: {3}", dest.impact, dest.urgency, gr.priority);
          } else {
			iuObj = {
				impact: impact,
				urgency: urgency,
				priority: priority,
				priority_display: priority_display
			};
          }
        } else {
          gs.error('The priority table [' + PRIORITY_TABLE + '] is incomplete. Please populate the' +
            ' values for the columns: [impact] and [urgency].');
        }
		var eventName = "x_pd_integration.update_priority_only";
        var currentUserSysid = gs.getUser().getID();
		gs.info("PdWebhookTransformV3 - applyPriority - Priority is different on PD");
        gs.info("PdWebhookTransformV3 - applyPriority - Firing event {0} for {1} - {2}", eventName, target.getDisplayValue(), source.id);
        gs.eventQueue(eventName, gr, currentUserSysid, source.id);
      } else {
        gs.debug('The Priority was not updated since it was is already set to the expected value');
      }
    } else if (source.priority_id) {
      gs.error('The priority with id [' + source.priority_id + '] is not found in the priority table [' +
          PRIORITY_TABLE + ']. Check if all the ids in the table match the ids for your account' +
          ' here: https://developer.pagerduty.com/api-reference/0fa9ad52bf2d2-list-priorities.' +
          ' Specify your API key in the Authorization header and click "Send API Request".');
      gs.info("PdWebhookTransformV3 - applyPriority - PD Priority not found in table");
      gs.info("PdWebhookTransformV3 - applyPriority - Firing event {0} for {1} - {2}", eventName, target.getDisplayValue(), source.id);
      gs.eventQueue(eventName, gr, currentUserSysid, source.id);
    } else {
      gs.error('The priority table [' + PRIORITY_TABLE + '] is empty. You need to make sure the' +
          ' priority table is complete and up-to-date. You can do it by going to [PagerDuty -' +
          ' Actions - Refresh Priorities]. This will pull all the priority ids from PagerDuty. You' +
          ' then need to fill the columns [impact] and [urgency] yourself.');
    }

    return dest;
  }

  function transformReassigned () {
    var dest = {};

    if (action === 'insert') {
      ignore = true;
    } else if (action === 'update') {
      dest = stateAndAssign('assign');
    }

    return dest;
  }

  function transformResolved () {
    var dest = {};

    if (action === 'insert') {
      ignore = true;
    } else if (action === 'update') {
      if (isTargetIncidentResolved(source.target_table)) {
        ignore = true;
        gs.debug('Transform: ignore incident.resolved since the target is already resolved');
        return {};
      }

      // CUSTOM HERE - Ignoring transaction - Raise a new Incident
      ignore = true;

      // CALL INCIDENT TRIGGER TO CREATE A NEW INCIDENT IN PD
      // Create a new Incident
      var eventName = "x_pd_integration.trigger_incident";
      gs.debug("Firing event {0} for {1} since it was resolved in PagerDuty", eventName, target.getDisplayValue());
      var currentUserSysId = gs.getUser().getID();
      var changeValue = true;
      var params = currentUserSysId + ",update," + changeValue;
      gs.eventQueue(eventName, target, target.work_notes.getJournalEntry(-1), params);
      return {};
      // END OF CUSTOM HERE

    //   gs.info('Transform: PagerDuty incident was resolved, setting incident {0} to resolved state', target.getDisplayValue());

    //   var resolveReason = String(source.resolve_reason);
    //   var targetTable = String(source.target_table);

    //   if (resolveReason === 'merge_resolve_reason') {
    //     // Set parent because resolve was due to a merge
    //     var parentSysId = getIncidentIdByPdId(source.parent_pd_id, targetTable);
    //     if (targetTable === 'incident') {
    //       dest.parent_incident = parentSysId;
    //     } else if (targetTable === 'sn_si_incident') {
    //       dest.parent_security_incident = parentSysId;
    //     }
    //     // Set work notes referencing parent incident number
    //     var parentIncidentNumber = getIncidentNumberBySysId(parentSysId, targetTable);
    //     if (source.resolved_by_name) {
    //       dest.work_notes = NOTES_HELPER.build('PagerDuty incident was resolved by ' + source.resolved_by_name + ' due to PagerDuty merge with incident ' + parentIncidentNumber);
    //     } else {
    //       dest.work_notes = NOTES_HELPER.build('PagerDuty incident was resolved due to PagerDuty merge with incident ' + parentIncidentNumber);
    //     }
    //   } else if (source.resolved_by_name) {
    //     dest.work_notes = NOTES_HELPER.build('PagerDuty incident was resolved by ' + source.resolved_by_name);
    //   } else {
    //     dest.work_notes = NOTES_HELPER.build('PagerDuty incident was resolved');
    //   }

    //   dest.state = resolvedStateValue(source.target_table);
    }

    return dest;
  }

  function transformResponders () {
    var dest = {};

    if (action === 'update') {
      var rec = new GlideRecordSecure(RR_IMPORT_TABLE);
      rec.initialize();
      rec.assigned_to = getUserId(source.assigned_to_pd_id);
      rec.assignment_group = getGroupIdByEpId(source.escalation_policy_id);
      rec.incident = getIncidentIdByPdId(source.id);

      rec.message = String(source.subject);
      rec.pd_group_id = String(source.escalation_policy_id);
      rec.pd_user_id = String(source.assigned_to_pd_id);
      rec.pd_user_name = String(source.assigned_to_name);

      var states = {
        pending: 'Pending',
        joined: 'Accepted',
        declined: 'Declined'
      };
      rec.state = states[String(source.status)] || '(unknown)';
      rec.insert();
    }

    ignore = true;
    return dest;
  }

  function transformTriggered () {
    var dest = {};
    var rows = [];
    var newGroupId = '';

    var assignmentsSummary = parseAssignmentsSummary();

    dest.x_pd_integration_incident = String(source.id);
    dest.x_pd_integration_incident_key = String(source.incident_key);

    // action meaning
    // -&gt; insert means we don't have incident in SNow side
    // -&gt; update means we already have incident in SNow side
    if (action === 'insert') {
      // Just add prefix if the webhook is called from PD side firstly
      dest.short_description = 'PagerDuty: ' + source.subject;

      rows.push(showTriggeringNote('PagerDuty incident was triggered for nonexistent incident, new incident created'));

      var epId = String(source.escalation_policy_id);
      var priorityId = String(source.priority_id);
      newGroupId = getGroupIdByEpIdAndPriorityId(epId, priorityId);
      if (newGroupId) {
        dest.assignment_group = newGroupId;
      }

      var serviceId = String(source.service_id);
      var ciId = String(source.ci_sys_id);
      if (serviceId &amp;&amp; !ciId) {
        dest.cmdb_ci = getCiSysId(serviceId);
      }

      if (ciId) {
        dest.cmdb_ci = ciId;
      }

		// CUSTOM HERE for NOC and CRE Configuration Item
		var payload = JSON.parse(source.payload);
		if ((source.service_name == 'NOC') || (source.service_name == 'CRE')) {

			// Get Custom Fields for NOC / CRE - Get Device CI Name
			var deviceName = '';
			gs.debug("webhookTransform - NOC / CRE device name custom field customization = {0} {1}", source.id, deviceName);
			deviceName = getCustomFieldValue(source.id, 'device_ci_name');
			if (deviceName) {
				var deviceNameGR = new GlideRecord('cmdb_ci');
				if (deviceNameGR.get('name', deviceName)) {
					dest.cmdb_ci = deviceNameGR.getUniqueValue();
				} else {
					gs.debug("webhookTransform - NOC / CRE device name custom field customization = {0} {1} not found", source.id, deviceName);
				}
			}
			
			if (payload.data &amp;&amp; payload.data.first_trigger_log_entry &amp;&amp; payload.data.first_trigger_log_entry.channel &amp;&amp; payload.data.first_trigger_log_entry.channel.cef_details &amp;&amp; payload.data.first_trigger_log_entry.channel.cef_details.details &amp;&amp; payload.data.first_trigger_log_entry.channel.cef_details.details.Host) { 
				var client = payload.data.first_trigger_log_entry.channel.cef_details.source_origin;
				if ((client.contains('LogicMonitor')) || (client.contains('Kibana,Type:Hardware'))  || (client.contains('Dynatrace'))) {
					var hostname = payload.data.first_trigger_log_entry.channel.cef_details.details.Host;
					var hostnameSN = new GlideRecord('cmdb_ci');
					if (hostnameSN.get('name', hostname)) {
						dest.cmdb_ci = hostnameSN.getUniqueValue();
					} else {
						gs.debug("webhookTransform - CI customization = {0} {1} not found", source.id, hostname);
					}
				} else if ((client.contains('Kibana:Application')) || (client.contains('Kibana')) &amp;&amp; !(client.contains('Kibana,Type:Hardware'))) {
					var appName = payload.data.first_trigger_log_entry.channel.cef_details.source_origin;
					if (appName.split("CI:")[1])  {
						appName = appName.split("CI:")[1].split(",")[0];
						var appNameSN = new GlideRecord('cmdb_ci');
						if (appNameSN.get('name', appName)) {
							dest.cmdb_ci = appNameSN.getUniqueValue();
						} else {
							gs.debug("webhookTransform - CI customization = {0} {1} not found", source.id, appName);
						}
					}
				}
			}
		}
		// END OF CUSTOM

      var assignedPdId = String(source.assigned_to_pd_id);
      if (assignedPdId) {
        var status = String(source.status);
        if (status === 'acknowledged' || ASSIGN_ON_ACK_ONLY === 'false') {
          rows.push(tryToAssign(newGroupId));
        }
      }
    } else if (action === 'update') {
      rows.push(showTriggeringNote('PagerDuty incident was triggered and will notify ' + assignmentsSummary));

      if (ASSIGN_ON_ACK_ONLY === 'true') {
        rows.push(showAssignmentNote('PagerDuty incident was assigned to ' + assignmentsSummary));
      } else {
        rows.push(tryToAssign(newGroupId));
      }
    }
    return mergeRows(dest, rows);
  }

  function runInboundFieldRules () {
    var eventMap = {
      'incident.triggered': 'trigger',
      'incident.acknowledged': 'acknowledge',
      'incident.unacknowledged': 'unacknowledge',
      'incident.resolved': 'resolve',
      'incident.escalated': 'escalate',
      'incident.delegated': 'delegate',
      'incident.annotated': 'annotate',
      'incident.incident_type.updated': 'incident_type_update',
      'incident.custom': 'custom'
    };
    var event = eventMap[source.message_type];

    if (event) {
      var pifr = new x_pd_integration.PagerDutyInboundFieldRule();
      pifr.setTargetFieldValuesFromPayload(event, source, target);
    }
  }

  // CUSTOM HERE - New function to get Custom Fields Values
  function getCustomFieldValue(incidentId, customFieldName){
		var me = "getCustomFieldValue";
		gs.debug("{0} Called for PagerDuty Incident Id \"{1}\" Custom Field Name {2}", me, incidentId, customFieldName);
		var customFieldValue = '';
		var feature = 'incidents/' + incidentId + '/custom_fields/values';
		var response = new x_pd_integration.PagerDuty_REST().getREST(feature);
		var responseBody = response.getBody();
		var status = response.getStatusCode();
		if (status == 200) {
			gs.debug("{0} Called for PagerDuty Incident Id \"{1}\" returned 200", me, incidentId);
			var customFields = JSON.parse(response.getBody()).custom_fields;
		}

		for (var i = 0; i &lt; customFields.length; i++){
			if (customFields[i].name == customFieldName) {
				customFieldValue = customFields[i].value;
			}
		}
		gs.debug("{0} Called for PagerDuty Incident Id \"{1}\" Custom Field Value {2}", me, incidentId, customFieldValue);
		return customFieldValue;
	}
	// END OF CUSTOM HERE

  function runInboundCustomScript () {
    var customScript = new x_pd_integration.PagerDutyInboundCustomScript();
    customScript.customPostTransformActivity(source, target, action);
  }

  function getAssigneesIds (payload) {
    var assignees = payload.data &amp;&amp; payload.data.assignees;
    if (!assignees || !assignees.length) {
      return [];
    }
    assignees = assignees.map(function (assignee) {
      return getId(getUserByPdId(assignee.id));
    });
    return assignees;
  }

  function getCiSysId (serviceId) {
    var gr = new GlideRecordSecure('cmdb_ci');
    if (gr.get('x_pd_integration_pagerduty_service', serviceId)) {
      return gr.getValue('sys_id');
    }
    return null;
  }

  function getGroupIdByEpId (pdEpId) {
    if (!pdEpId) {
      return null;
    }
    var helper = new x_pd_integration.EscalationPolicyHelper();
    return helper.getAssignmentGroupId(pdEpId);
  }

  function getGroupIdByEpIdAndPriorityId (epId, priorityId) {
    if (!epId) {
      return;
    }
    var epHelper = new x_pd_integration.EscalationPolicyHelper();
    return epHelper.getAssignmentGroupIdWithPriority(epId, priorityId);
  }

  function getGroupIdByEpIdAndPriorityValue (epId, priorityValue) {
    if (!epId) {
      return;
    }
    var epHelper = new x_pd_integration.EscalationPolicyHelper();
    return epHelper.getAssignmentGroupIdWithPriorityValue(epId, priorityValue);
  }

  /**
   * @param {String} groupId a sys_id of an assignment group
   * @returns {Object} a hash of group member sys_ids
   */
  function getGroupMemberIds (groupId) {
    var ids = {};
    var gr = new GlideRecordSecure('sys_user_grmember');
    gr.addQuery('group', groupId);
    gr.query();
    while (gr.next()) {
      ids[String(gr.user)] = true;
    }
    return ids;
  }

  function getGroupName (sysId) {
    if (!sysId) {
      return '';
    }
    var gr = new GlideRecordSecure('sys_user_group');
    if (gr.get(sysId)) {
      return gr.getValue('name');
    }
    return '';
  }

  function getId (record) {
    if (!record) {
      return null;
    }
    return record.getValue('sys_id');
  }

  function getIncidentIdByPdId (pdId, table) {
    if (!pdId) {
      return null;
    }
    var tableName = table || 'incident';
    var columnName = (tableName === 'incident' ? 'x_pd_integration_incident' : 'x_pd_integration_incident_id');
    var gr = new GlideRecordSecure(tableName);
    if (gr.get(columnName, pdId)) {
      return gr.getValue('sys_id');
    }
    return null;
  }

  function getIncidentNumberBySysId (sysId, table) {
    if (!sysId) {
      return null;
    }
    var tableName = table || 'incident';
    var gr = new GlideRecordSecure(tableName);
    if (gr.get('sys_id', sysId)) {
      return gr.getValue('number');
    }
    return null;
  }

  function getUserByPdId (pdId) {
    var gr = new GlideRecordSecure('sys_user');
    if (gr.get('x_pd_integration_pagerduty_id', pdId)) {
      return gr;
    }
    return null;
  }

  function getUserId (userPdId) {
    var userId = getId(getUserByPdId(userPdId));
    if (!userId) {
      var email = PD_CLIENT.getUserEmailFromPagerDuty(userPdId);
      userId = getUserIdByEmail(email);
    }
    return userId;
  }

  function getUserIdByEmail (email) {
    if (!email) {
      return;
    }
    var gr = new GlideRecordSecure('sys_user');
    gr.addQuery('email', email);
    gr.query();
    if (gr.next()) {
      return gr.getValue('sys_id');
    }
  }

  function getUserName (id) {
    if (!id) {
      return '';
    }
    var gr = new GlideRecordSecure('sys_user');
    if (gr.get(id)) {
      return gr.getValue('name');
    }
    return '';
  }

  function isTargetIncidentResolved (table) {
    var helper = new x_pd_integration.TaskEntityHelper(target, table);
    return helper.isTaskHasResolvedState(target.state);
  }

  function merge (obj1, obj2) {
    Object.keys(obj2).forEach(function (k) {
      obj1[k] = obj2[k];
    });
    return obj1;
  }

  function mergeRows (dest, rows) {
    rows.forEach(function (row) {
      dest = merge(dest, row);
    });
    return dest;
  }

  function parseAssignmentsSummary () {
    var payload = JSON.parse(source.payload);
    var assignees = payload.data &amp;&amp; payload.data.assignees;
    var assignmentsSummary = [];
    if (assignees) {
      assignees.forEach(function (assignee) {
        assignmentsSummary.push(assignee.summary);
      });
    }
    assignmentsSummary.splice(-2, 2, assignmentsSummary.slice(-2).join(' and '));
    return assignmentsSummary.join(', ');
  }

  function resolvedStateValue (table) {
    var helper = new x_pd_integration.TaskEntityHelper(target, table);
    return helper.resolvedStateValue();
  }

  function showAssignmentNote (note) {
    var dest = {};
    if (NOTES_HELPER.isEnabled('show_incident_assignment_note')) {
      dest.work_notes = NOTES_HELPER.build(note);
    }
    return dest;
  }

  function showReassignmentNote (note) {
    var dest = {};
    if (NOTES_HELPER.isEnabled('show_incident_reassignment_note')) {
      dest.work_notes = NOTES_HELPER.build(note);
    }
    return dest;
  }

  function showTriggeringNote (note) {
    var dest = {};
    if (NOTES_HELPER.isEnabled('show_incident_triggering_note')) {
      dest.work_notes = NOTES_HELPER.build(note);
    }
    return dest;
  }

  function showConferenceBridgeUpdatedNote (note) {
    var dest = {};
    if (NOTES_HELPER.isEnabled('show_note_on_conference_bridge_addition')) {
      dest.work_notes = NOTES_HELPER.build(note);
    }
    return dest;
  }

  function showIncidentWorkflowNote (note) {
    var dest = {};
    if (NOTES_HELPER.isEnabled('show_notes_on_incident_workflow')) {
      dest.work_notes = NOTES_HELPER.build(note);
    }
    return dest;
  }

  /**
   * @param {String} type is one of: "assign", "delegate" or "escalate"
   * @returns {Object} a representation of a destination row
   */
  function stateAndAssign (type) {
    var dest = {};
    var rows = [];
    var postfix = {
      assign: 'ed',
      escalate: 'd'
    };

    var assignmentsSummary = parseAssignmentsSummary();
    var assignToUser = getUserByPdId(source.assigned_to_pd_id);
    var assignToUserId = getId(assignToUser);

    if (ASSIGN_ON_ACK_ONLY === 'true') {
      if (EVENT_ORIGINATED_IN_SERVICE_NOW &amp;&amp; assignToUserId === String(target.assigned_to) || String(source.status) === 'acknowledged') {
        dest.state = acknowledgedStateValue(source.target_table);
      } else {
		// CUSTOM HERE - Do not clear Assigned To
        rows.push(showReassignmentNote('PagerDuty incident was ' + type + postfix[type] + ' to ' +
         assignmentsSummary + ' with assignOnAckOnly=true'));
        // dest.assigned_to = '';
        dest.state = triggerStateValue(source.target_table);
		// END OF CUSTOM HERE
      }
      return mergeRows(dest, rows);
    }

    if (!assignToUser) {
      rows.push(showAssignmentNote('PagerDuty incident was ' + type + postfix[type] + ' to ' +
        assignmentsSummary + ', but ServiceNow could not locate the user ' + source.assigned_to_name +
        ' with the id ' + source.assigned_to_pd_id + ' to ' + type + ' the incident to'));
      return mergeRows(dest, rows);
    }
    // CUSTOM HERE - Set Assigned to only if it is not default user
    if (SET_ASSIGNEE) {
      dest.assigned_to = assignToUserId;
      rows.push(showAssignmentNote('PagerDuty incident was ' + type + postfix[type] + ' to ' +
      assignmentsSummary));
	}
	// END OF CUSTOM HERE
    return mergeRows(dest, rows);
  }

  function triggerStateValue (table) {
    var helper = new x_pd_integration.TaskEntityHelper(target, table);
    return helper.triggerStateValue();
  }

  // CUSTOM HERE - Function to retrieve acked state
  function acknowledgedStateValue (table) {
    var helper = new x_pd_integration.TaskEntityHelper(target, table);
    return helper.acknowledgedStateValue();
  }
  // END OF CUSTOM HERE

  function tryToAcknowledge (assignmentsSummary) {
    var dest = {};
	var rows = [];
	// CUSTOM HERE - Set Acked State
	dest.state = acknowledgedStateValue(source.target_table);
	// END OF CUSTOM HERE
    var assignToUser = getUserByPdId(source.assigned_to_pd_id);
    if (assignToUser) {
      // CUSTOM HERE - Set Assigned to only if it is not default user
      if (SET_ASSIGNEE) {
        rows.push(showAssignmentNote('PagerDuty incident was acknowledged by ' + assignmentsSummary));
        dest.assigned_to = assignToUser.getUniqueValue();
      }
      // END OF CUSTOM HERE
    } else {
      rows.push(showAssignmentNote('PagerDuty incident acknowledged by ' +
        assignmentsSummary + ', but ServiceNow could not locate user with PagerDuty ID ' +
        source.assigned_to_pd_id + ' to assign the incident to them'));
    }
    return mergeRows(dest, rows);
  }

  function tryToAssign (newGroupId) {
    var dest = {};
    var rows = [];

    var newGroupName = getGroupName(newGroupId);
    var newAssigneeId;
    var assigneesIds = getAssigneesIds(JSON.parse(source.payload));
    var groupMembersIds = getGroupMemberIds(newGroupId);

    var foundUser = assigneesIds.some(function (assigneeId) {
      if (groupMembersIds[assigneeId]) {
        newAssigneeId = assigneeId;
        return true;
      }
      return false;
    });

    var newAssigneeName = getUserName(newAssigneeId);

    if (foundUser) {
      // CUSTOM HERE - Set Assigned to only if it is not default user
      if (SET_ASSIGNEE) {
        dest.assigned_to = newAssigneeId;
        rows.push(showAssignmentNote('PagerDuty incident was assigned to the user ' + newAssigneeName));
      }
      // END OF CUSTOM
    } else {
      // CUSTOM HERE - Do not clear Assigned To
      // dest.assigned_to = '';
      rows.push(showAssignmentNote('PagerDuty incident was assigned to the ' + newGroupName +
       ' assignment group'));
      // END OF CUSTOM
    }

    if (!newGroupId) {
      var assignToUser = getUserByPdId(source.assigned_to_pd_id);
      if (assignToUser) {
		// CUSTOM HERE - Set Assigned to only if it is not default user
        if (SET_ASSIGNEE) {
          dest.assigned_to = assignToUser.getUniqueValue();
          rows.push(showAssignmentNote('PagerDuty incident was assigned to the user ' + assignToUser.getValue('name')));
		}
		// END OF CUSTOM
      } else {
        rows.push(showAssignmentNote('PagerDuty incident was assigned to the user ' +
          source.assigned_to_name + ', but ServiceNow could not locate the user with PagerDuty ID ' +
          source.assigned_to_pd_id + ' to assign the incident to them'));
      }
    }
    return mergeRows(dest, rows);
  }

  /**
 * Retrieves the incident type from the payload of the event.
 * @returns {String|null} incidentTypeName or null if not found
 */
  function getIncidentTypeNameFromPayload () {
    var payload = JSON.parse(source.payload);
    if (payload.data &amp;&amp; payload.data.incident_type &amp;&amp; payload.data.incident_type.name) {
      return payload.data.incident_type.name;
    }
    gs.warn('Incident type not found in the payload of event {0}', String(source.message_type));
    return null;
  }

  return {tryTransform: tryTransform};
})();
]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;PagerDuty_v8.1&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2022-07-12 10:00:43&lt;/sys_created_on&gt;&lt;sys_id&gt;7a0e7e0b87281510007552873cbb355e&lt;/sys_id&gt;&lt;sys_mod_count&gt;29&lt;/sys_mod_count&gt;&lt;sys_name&gt;PdWebhookTransformV3&lt;/sys_name&gt;&lt;sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="PagerDuty Incident Resolution Platform"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_7a0e7e0b87281510007552873cbb355e&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-03-31 03:11:52&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;sys_es_latest_script action="INSERT_OR_UPDATE"&gt;&lt;id&gt;7a0e7e0b87281510007552873cbb355e&lt;/id&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2025-03-30 16:04:49&lt;/sys_created_on&gt;&lt;sys_id&gt;203bf4e2c320221040d0becdd4013176&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-03-30 16:04:49&lt;/sys_updated_on&gt;&lt;table&gt;sys_script_include&lt;/table&gt;&lt;use_es_latest&gt;false&lt;/use_es_latest&gt;&lt;/sys_es_latest_script&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1860277842</payload_hash>
<remote_update_set display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Child">2dd0afe2c3ac221040d0becdd40131d1</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-03-31 04:08:31</sys_created_on>
<sys_id>e1d0afe2c3ac221040d0becdd40131d7</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>195ea2f220f0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-03-31 04:08:31</sys_updated_on>
<table />
<target_name>PdWebhookTransformV3</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>b3d3d7628b6c2210ebcaceb4d8559d45</update_guid>
<update_guid_history>b3d3d7628b6c2210ebcaceb4d8559d45:-1860277842,c8d357ee2b2c2210106a9a9e93a25b29:-365145328,ee331faeea2c2210c70dc94b404e0c06:-1582159423,00a1dbae332c22105e9570f7f37378c7:1092500977,2d7b8326f72c2210c068496498943599:1366503029,dc2b8766fb2c2210458e52c5e40625b8:-858872345,7d6acb26562c2210b2c4f49449842794:585771085,e7c90b26f92c2210597bca4000f5c14f:1092491167,7ce8c7a23a2c2210038f17eee62070d4:-582045344,27c68fae02e8221004948f31f61e0ccd:339221339,4435cf2601e8221027be657c82edae04:-1872914673,b84dfeae69a82210818f97a5e3a886a3:-422116289,e34c36e201a82210e74a4d4dfbf73d10:2138739909,10e13ae253a82210d8f5776f5f303a90:1501186114,e93fa66276a8221084c212840be84495:931999175,d46ba22e5b68221077a325ea93efa449:856262658,72abdae6f3e42210acf9198e9414dc15:1379713156,8f9a122aeee4221000bb2cc2efa6b953:1079928785,9437daeee1e422105aa2b42d38c56670:-383538665,9036daeeebe42210ccdc0be5ac72bf6c:71960680,1ee5daee3be42210052727371a9a9d41:-1019160841,4075d66ea4e42210fe93b6fb46896a30:-450146239,b8b4daea342422103fae398d501a440b:-150642920,c57492261ce42210ea2125381a5ab102:-1028424631,9c349ee6966422108bc3b200491a90d3:-714223514,1b12d62623e42210c56666d6ec413949:-314551866,63bf82e26e64221082e8c6991e692312:-560358173,9236192e22a022103ae2559deb9e32ea:1727254516,3d3b7ce622202210c557f08e6903f8b3:1193647431,c3befac7fe2815101b8908bb2882759e:1818620906</update_guid_history>
<update_set display_value="" />
<view />
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Global">global</application>
<category>customer</category>
<comments />
<name>sys_properties_63f1a53377451110cd1b756f1b5a9991</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_properties"&gt;&lt;sys_properties action="INSERT_OR_UPDATE"&gt;&lt;choices/&gt;&lt;description&gt;Captures the last execution timestamp of the scheduled job 'Surface New Unconnected Content of Categories'&lt;/description&gt;&lt;ignore_cache&gt;true&lt;/ignore_cache&gt;&lt;is_private&gt;false&lt;/is_private&gt;&lt;name&gt;taxonomy.category.new_content_job_last_run&lt;/name&gt;&lt;read_roles/&gt;&lt;suffix/&gt;&lt;sys_class_name&gt;sys_properties&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2022-08-08 07:43:25&lt;/sys_created_on&gt;&lt;sys_id&gt;63f1a53377451110cd1b756f1b5a9991&lt;/sys_id&gt;&lt;sys_mod_count&gt;16&lt;/sys_mod_count&gt;&lt;sys_name&gt;taxonomy.category.new_content_job_last_run&lt;/sys_name&gt;&lt;sys_package display_value="Content Taxonomy" source="com.snc.taxonomy"&gt;61e24e5c190712104f3423cebaaa853b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Global"&gt;global&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_properties_63f1a53377451110cd1b756f1b5a9991&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-03-30 07:00:10&lt;/sys_updated_on&gt;&lt;type&gt;date_format&lt;/type&gt;&lt;value&gt;2025-03-30&lt;/value&gt;&lt;write_roles&gt;maint&lt;/write_roles&gt;&lt;/sys_properties&gt;&lt;sys_translated_text action="delete_multiple" query="documentkey=63f1a53377451110cd1b756f1b5a9991"/&gt;&lt;/record_update&gt;</payload>
<payload_hash>487423534</payload_hash>
<remote_update_set display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Child">2dd0afe2c3ac221040d0becdd40131d1</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-03-31 04:08:31</sys_created_on>
<sys_id>e5d0afe2c3ac221040d0becdd40131d3</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>195e5d9d2110000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-03-31 04:08:31</sys_updated_on>
<table />
<target_name>taxonomy.category.new_content_job_last_run</target_name>
<type>System Property</type>
<update_domain>global</update_domain>
<update_guid>b28eb69eaee0a21037d96ffaf8335998</update_guid>
<update_guid_history>b28eb69eaee0a21037d96ffaf8335998:487423534,6b7e25247c2022108f6387e6241eb29b:1394817001,97f8c516b010221002352b43e4efa79b:1858599045,ba8b22140a102210fcb6f60fba482591:-803069493,282a486107002210b4f3ea3d67f08742:-1226510295,4927c05357331210b4c3090608ffbb4e:937672777,e6544a55a4331210c357a3e4a0dba6db:1845066244,ee544a556f331210534594651a43dcd7:-437767834</update_guid_history>
<update_set display_value="" />
<view />
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</application>
<category>customer</category>
<comments />
<name>sys_script_include_09fcd905078594109f3bff1d7c1ed0bb</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;x_pd_integration.EscalationPolicyHelper&lt;/api_name&gt;&lt;caller_access/&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;mobile_callable&gt;false&lt;/mobile_callable&gt;&lt;name&gt;EscalationPolicyHelper&lt;/name&gt;&lt;sandbox_callable&gt;false&lt;/sandbox_callable&gt;&lt;script&gt;&lt;![CDATA[/*** Changes made to this script are not supported by PagerDuty ***/
var EscalationPolicyHelper = Class.create();
EscalationPolicyHelper.prototype = {
  initialize: function () {
	this.JSON = new global.JSON();
    this.agTable = 'sys_user_group';
    this.epTable = 'x_pd_integration_escalation_policies';
    this.mappingTableImport = 'x_pd_integration_map_priority_to_ep_import';
    this.mappingTable = 'x_pd_integration_map_priority_to_ep';
    this.priorityTable = 'x_pd_integration_join_priority';
    this.snPriorityTable = 'dl_u_priority';
	this.defaultServiceID = gs.getProperty("x_pd_integration.default_service");
    this.incidentHelper = null;
    this.incidentId = null;
  },

  getPDEscalationPolicyIdWithPriority: function (assignmentGroupId, snPriorityId) {
    if (!assignmentGroupId) {
      return null;
    }

    var priorityValue = this.getPriorityValue(snPriorityId);
    var snPriorityIds = this.getSnPriorityIds();

    // priority row
    if (snPriorityId &amp;&amp; snPriorityIds[priorityValue]) {
      var gr = new GlideRecordSecure(this.mappingTable);
      gr.addQuery('assignment_group', assignmentGroupId);
      gr.addActiveQuery();
      gr.addQuery('priority', 'IN', snPriorityIds[priorityValue].join(','));
      gr.query();
      if (gr.next()) {
        return this.convertEpToPd('' + gr.escalation_policy);
      }
    }
    // fallback to default row
    var id = this.getPDEscalationPolicyIdDefault(assignmentGroupId);
    if (id) {
      return id;
    }
    // fallback to Assignment Group table
    id = this.getPDEscalationPolicyIdFromAG(assignmentGroupId);
    if (id) {
      return id;
    }
    return null;
  },

  getPDEscalationPolicyId: function (assignmentGroupId) {
    if (gs.nil(assignmentGroupId)) {
      return null;
    }
    // default row
    var id = this.getPDEscalationPolicyIdDefault(assignmentGroupId);
    if (id) {
      return id;
    }
    // fallback to any row
    var gr = new GlideRecordSecure(this.mappingTable);
    gr.addQuery('assignment_group', assignmentGroupId);
    gr.addActiveQuery();
    gr.query();
    if (gr.next()) {
      return this.convertEpToPd('' + gr.escalation_policy);
    }
    // fallback to Assignment Group table
    id = this.getPDEscalationPolicyIdFromAG(assignmentGroupId);
    if (id) {
      return id;
    }
    return null;
  },

  getPDEscalationPolicyIdDefault: function (assignmentGroupId) {
    if (gs.nil(assignmentGroupId)) {
      return null;
    }
    // default row
    var gr = new GlideRecordSecure(this.mappingTable);
    gr.addQuery('assignment_group', assignmentGroupId);
    gr.addActiveQuery();
    gr.addNullQuery('priority');
    gr.query();
    if (gr.next()) {
      return this.convertEpToPd('' + gr.escalation_policy);
    }
    return null;
  },

  getPDEscalationPolicyIdFromAG: function (assignmentGroupId) {
    if (gs.nil(assignmentGroupId)) {
      return null;
    }
    // fallback to Assignment Group table
    var gr = new GlideRecordSecure(this.agTable);
    gr.addQuery('sys_id', assignmentGroupId);
    gr.addActiveQuery();
    gr.query();
    if (gr.next()) {
      return '' + gr.x_pd_integration_pagerduty_escalation;
    }
    return null;
  },

  getAssignmentGroupIdWithPriority: function (pdEscalationPolicyId, pdPriorityId) {
    if (!pdEscalationPolicyId) {
      return null;
    }

    var snPriorityId = this.convertPriToSn(pdPriorityId);
    var priorityValue = this.getPriorityValue(snPriorityId);

    return this.getAssignmentGroupIdWithPriorityValue(pdEscalationPolicyId, priorityValue);
  },

  getAssignmentGroupIdWithPriorityValue: function (pdEscalationPolicyId, snPriorityValue) {
    if (!pdEscalationPolicyId) {
      return null;
    }
    var escalationPolicyId = this.convertEpToSn(pdEscalationPolicyId, {all: true});
    // priority row
    if (snPriorityValue &amp;&amp; escalationPolicyId) {
      var snPriorityIds = this.getSnPriorityIds();
      gr = new GlideRecordSecure(this.mappingTable);
      gr.addQuery('escalation_policy', escalationPolicyId);
      gr.addActiveQuery();
      gr.addQuery('priority', 'IN', snPriorityIds[snPriorityValue].join(','));
      gr.query();
      if (gr.next()) {
        return '' + gr.assignment_group;
      }
    }
    // fallback to default row
    if (escalationPolicyId) {
      gr = new GlideRecordSecure(this.mappingTable);
      gr.addQuery('escalation_policy', escalationPolicyId);
      gr.addActiveQuery();
      gr.addNullQuery('priority');
      gr.query();
      if (gr.next()) {
        return '' + gr.assignment_group;
      }
    }
    // fallback to Assignment Group table
    var id = this.getAssignmentGroupIdFromAG(pdEscalationPolicyId);
    if (id) {
      return id;
    }
    return null;
  },

  getAssignmentGroupId: function (pdEscalationPolicyId) {
    // any row
    var epId = this.convertEpToSn(pdEscalationPolicyId);
    var gr = new GlideRecordSecure(this.mappingTable);
    gr.addQuery('escalation_policy', epId);
    gr.addActiveQuery();
    gr.query();
    if (gr.next()) {
      return '' + gr.assignment_group;
    }
    // fallback to Assignment Group table
    var id = this.getAssignmentGroupIdFromAG(pdEscalationPolicyId);
    if (id) {
      return id;
    }
    return null;
  },

  getAssignmentGroupIdFromAG: function (pdEscalationPolicyId) {
    if (!pdEscalationPolicyId) {
      return null;
    }
    // fallback to Assignment Group table
    var gr = new GlideRecordSecure(this.agTable);
    gr.addQuery('x_pd_integration_pagerduty_escalation', pdEscalationPolicyId);
    gr.addActiveQuery();
    gr.query();
    if (gr.next()) {
      return '' + gr.sys_id;
    }
    return null;
  },

  convertPriToSn: function (pdPriorityId) {
    if (!pdPriorityId) {
      return null;
    }
    var gr = new GlideRecord(this.priorityTable);
    gr.addQuery('pd_pagerduty_priority_id', pdPriorityId);
    gr.addQuery('sn_active', true);
    gr.query();
    if (gr.next()) {
      return '' + gr.sn_sys_id;
    }
    return null;
  },

  convertEpToPd: function (escalationPolicyId) {
    var gr = new GlideRecordSecure(this.epTable);
    gr.addQuery('sys_id', escalationPolicyId);
    gr.addActiveQuery();
    gr.query();
    if (gr.next()) {
      return '' + gr.escalation_policy_id;
    }
    return null;
  },

  // use opts { all: true } to get both active and inactive rows
  convertEpToSn: function (pdEscalationPolicyId, opts) {
    var gr = new GlideRecordSecure(this.epTable);
    gr.addQuery('escalation_policy_id', pdEscalationPolicyId);
    if (!opts || !opts.all) {
      gr.addActiveQuery();
    }
    gr.query();
    if (gr.next()) {
      return '' + gr.sys_id;
    }
    return null;
  },

  getEpNameById: function (pdEscalationPolicyId) {
    var gr = new GlideRecordSecure(this.epTable);
    gr.addQuery('escalation_policy_id', pdEscalationPolicyId);
    gr.addActiveQuery();
    gr.query();
    if (gr.next()) {
      return '' + gr.escalation_policy_name;
    }
    return null;
  },

  getIncidentHelper: function () {
    if (!this.incidentHelper || this.incidentId !== this.incidentHelper.getIncidentId()) {
      this.incidentHelper = new x_pd_integration.IncidentHelper(this.incidentId);
    }
    return this.incidentHelper;
  },

  getIncidentSnPriorityId: function () {
    this.incidentHelper = this.getIncidentHelper();
    return this.incidentHelper.getSnPriorityId();
  },

  getPriorityValue: function (snPriorityId) {
    var gr = new GlideRecord(this.snPriorityTable);
    if (gr.get(snPriorityId)) {
      return '' + gr.priority;
    }
    return null;
  },

  // {
  //   "1":["51deebd84a362312001caa28f987c5f5"],
  //   "2":["51e4eb5d4a362312004641fa47c0223d","51e58d424a362312005a1343b0ff7bc8"],
  //   "3":["51e520d74a362312011b1bcd41c04c67","51e5f5a44a3623120133430f794c6cc3","51e6c1d04a362312011fedf4724e789b"],
  //   "4":["51e66dd14a3623120054c188329d445c","51e710dc4a36231201dbcd3bf744f7a3"],
  //   "5":["51e741a54a3623120151e22cceaca873"]
  // }
  getSnPriorityIds: function () {
    var snPriorityIds = {};
    var gr = new GlideRecord(this.snPriorityTable);
    gr.addActiveQuery();
    gr.query();
    while (gr.next()) {
      var priorityValue = '' + gr.priority;
      var sysId = '' + gr.sys_id;
      if (snPriorityIds[priorityValue] === undefined) {
        snPriorityIds[priorityValue] = [sysId];
      } else {
        snPriorityIds[priorityValue].push(sysId);
      }
    }
    return snPriorityIds;
  },

  removeObsoleteDefaultRows: function (mappingSysId, agSysId) {
    if (!mappingSysId || !agSysId) {
      return;
    }
    var gr = new GlideRecordSecure(this.mappingTable);
    gr.addQuery('assignment_group', agSysId);
    gr.addQuery('sys_id', '!=', mappingSysId);
    gr.addNullQuery('priority');
    gr.deleteMultiple();
  },

  setIncidentId: function (incidentId) {
    this.incidentId = incidentId;
  },

  upsertMapping: function (agId, pdEpId) {
    if (!agId || !pdEpId) {
      return null;
    }
    var epId = this.convertEpToSn(pdEpId);
    if (!epId) {
      return null;
    }
    var gr = new GlideRecordSecure(this.mappingTableImport);
    gr.initialize();
    gr.active = true;
    gr.assignment_group = agId;
    gr.escalation_policy = epId;
    gr.priority = null;
    gr.insert();
  },

  // CUSTOM HERE - New function to get default EP from Default Service
	getPDEscalationPolicyIdFromDefaultService: function() {
		// GET INFO FROM PD
		var me = "getPDEscalationPolicyIdFromDefaultService";
		var serviceID = this.defaultServiceID;
		if (gs.nil(serviceID))
			return null;

		gs.debug("{0} for service {1}", me, serviceID);

		var feature = 'services/' + serviceID;
		var rest = new x_pd_integration.PagerDuty_REST();

		var response = rest.getREST(feature, {});
		var responseBody = response.haveError() ? this._extractPDIncidentError(response) : response.getBody();
		var status = response.getStatusCode();
		gs.debug("{0} response: {1}:{2}", me, status, responseBody);

		if (status == 200) {
			var body = this.JSON.decode(response.getBody());
			return body.service.escalation_policy.id;
		}
	},

  type: 'EscalationPolicyHelper'
};
]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;PagerDuty_v8.1&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2020-05-26 09:40:05&lt;/sys_created_on&gt;&lt;sys_id&gt;09fcd905078594109f3bff1d7c1ed0bb&lt;/sys_id&gt;&lt;sys_mod_count&gt;114&lt;/sys_mod_count&gt;&lt;sys_name&gt;EscalationPolicyHelper&lt;/sys_name&gt;&lt;sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="PagerDuty Incident Resolution Platform"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_09fcd905078594109f3bff1d7c1ed0bb&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-03-11 16:19:28&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;sys_es_latest_script action="INSERT_OR_UPDATE"&gt;&lt;id&gt;09fcd905078594109f3bff1d7c1ed0bb&lt;/id&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2025-03-11 16:19:28&lt;/sys_created_on&gt;&lt;sys_id&gt;fd580798c390221040d0becdd401314e&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-03-11 16:19:28&lt;/sys_updated_on&gt;&lt;table&gt;sys_script_include&lt;/table&gt;&lt;use_es_latest&gt;false&lt;/use_es_latest&gt;&lt;/sys_es_latest_script&gt;&lt;/record_update&gt;</payload>
<payload_hash>590216956</payload_hash>
<remote_update_set display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Child">2dd0afe2c3ac221040d0becdd40131d1</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-03-31 04:08:31</sys_created_on>
<sys_id>e5d0afe2c3ac221040d0becdd40131d6</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>195860104e50000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-03-31 04:08:31</sys_updated_on>
<table />
<target_name>EscalationPolicyHelper</target_name>
<type>Script Include</type>
<update_domain>global</update_domain>
<update_guid>0e584798bd9022107026e1d04552e5aa</update_guid>
<update_guid_history>0e584798bd9022107026e1d04552e5aa:590216956,31166eb123cd6010ef5c1ef0e6e8f9b7:1386067567,754f5575690d60102dbc77bff03671fe:-1941719149,f44dcc5de1052010644c429446ab50bb:1247245059,b81d04d908052010edaf34400fee3c3e:-1818101213,3655cc194b052010d6cc933721d5b75a:-463535365,c3abbeb9d7d02010cf65d11d7f3766ca:-1078086459,e6d4766cf64b10107ce06f6823c16857:2014731595,99cf1020f17610109303f05169f9ad7d:-293319545,6334736606f51010f8a3240de0b5ba95:-1800172098,6334736606f51010f8a3240de0b5ba95:-1800172098,3fc3b72661f510105ccdd6387585214c:-1879246928,6c63b72614f5101047fef747b91f1b0c:-1800172098,27137fa221f510109ed30c965252a6c6:-1650464511,513f57623db51010b9f0a93638465b28:413577003,fcee17625cb5101016ee97700713cd98:1053414337,b2d91fea47751010db54f5efec9d5222:413577003,876993ea807510105aaffda9d1d84b55:1901397947,97f85b6ab3751010a7a9b087ed06821c:-601149085,3db117a28b7510100aa7be00501b6923:-396119330,19749e6e6b71101061aa49a3009fdf64:1811918250,b49116eae5711010db82c4b2337c1a42:134072499,80ef31ea43311010dae6b72e80f040c4:1811918250,af0c791671b51010c95292c126878c71:1029931313,e46915569d3510100c068eab3b4ab53b:-1679797404,3bb8d1566735101073f740fb6834b68c:753550482,c0681916b4351010816b655333282455:529511855,bf979516ec3510107a2117a31088d7d7:1226864620,74d31152da351010d398b8d4df79ef0b:1815109898,990fc91e85f110103e0b06a02f0b4657:-300916803,ededc1dadaf110109bb89d2f7aeb0779:-42808364,9d8dc99ae4f110105338d52618e914b2:-287499645,d91d859acef110104e022727b857ce02:-294640124,a8cb0d1ab7f110105221ff162557c907:-973329606,4fda859696f110100e15c19dfa75da75:-724890638,723ac196d2f11010bc197500fd742faf:851484962,0c958d92d8f110109c1d51877f95a9f9:-1745410181,72354d52abf11010e037685fbc71a6fb:-1737972422,6c620dde20b110108a2a630d9b5179e0:1970199728,a3804d5e25b110102449b5360f4a5ca1:1394207016,44d017e4d5711010915d9092e89b6b22:309765675,669fc3e430711010957bf2eaba06a0ec:-173256206,7aeecba46f711010595d8ac05187b1a7:-1439361166,47ae0ba429711010182c33f5ee3265d6:1579047573,99f88b605b71101005a7a7400864d4ff:-173256206,4c370360f2711010a7d0654335768eee:-1390301353,eaf683ec34311010059fb07ac9fc7bb5:-660720192,68affe2c3131101054ecae73a2589b21:-163971690,b8474e5453711010d04dc0944eb14471:-1607386809,43a972b3f959101050ff6c6c40acbe49:2131023044,33c73177e055101017e865339863e198:495369126,1247b9b7ff551010c01c0b620a10628a:1467723488,e5463177e75510103e827203231ac5f6:1567581536,03e53177b9551010f0fdbc0a1ed21791:166046880,c3557537f65510103db127fb6c709d37:-1659261604,dc92fd339b5510100d7ff7180cfd710a:-957407742,6e646d37751510100148f6f530a67e7b:-2066004631,e0076ce3835110104a1c8fc56f38f16f:-1146884437,ae85e0a30b511010c147f45f76e47109:-1368014423,3135a0a3a7511010fd438ef2ec6a65ae:1398203734,679428236151101003cb102c974e22e0:2072234859,124676ea885950109e2a48ca9b5e1c45:1062603229,159c85ae83d1501053fd1685176c63c6:1953831499,7415cd56d8551010895b293220c96d3f:772470785,72a0d4d6329110104778eeed500a60d4:-524032186,74601496f29110102864ca799be7b96f:-216578273,b29ec816829110105664c16f286f79ce:525860791,aaf9845236911010107ba31b8fd73e4a:-1441978473,b42d0482d9d51010e6e665cc8978eed1:1878706421,4516c00e20951010542941d7d224da9d:2039372059,7674400a4795101033ac95d513b9495b:-782834419,3803c44a9e95101025934502098eefa9:-1436430636,5e42480ae8951010b3457dbdec8cfea5:-1341829822,f2553b350555101031e3e67ffda71dd1:-1473659012,4603afb948151010a79252add2aa7fce:-252248752,87df9ff504151010c1e4a93c8c513b45:-1473659012,f32e1335a7151010c3391cd0700ddba8:-1800728902,62ed5335a4151010dd66f22674de0685:1616325578,4333ccf05ed9d010bba79e248cbca6a2:-252248752,7c384a54b3559010d800d59d2546066b:880295133,5c568614685590106076f810f10d4d10:-739104341,78d30e906f559010b320ca6ec0c586f9:1187975266,66d2ca104b55901012a6f607a033715f:249532095,3c700edc3a159010ff3f054ec8b5373e:1290567471,df3ce91c7ad19010e3855f6c6b4b4d74:249532095,6a5be91cbdd19010b42de2810da1246e:1281963873,79b72518edd19010191253047b9943b5:-1837944321,cf47a1181dd19010b4c463638135aad3:-1335027875,1ec4e9549bd190106b8635e85ee9d048:-1151317949,ce04a91404d190106a527e584cdfaee7:-700074189,cff225d007d190105478046c8c79d2da:-1139654306,cccf198c5c155010646dd98ae84df6fd:-274478356,5f721448a31150106e6b97d0a3ea7fbd:128631107,fc321c086d11501004dca2e2924ac8c9:1733972099,94915cc4661150105c88a241e90f2bb0:128631107,c1dc0480531150103c474926cec8ede3:-799132927,2a927ad77c8d101076351190501362e4:-2090199373,551f5edf280d1010c9eaeeb2705abe84:1464042987,f0d713d18bc9d410d379f7afac5d083b:107385088,cce93a59a049d4100c052bc6952f37fa:1271115132,3089f2591849d410cd4c7edbb0bda363:-1155863237,98093619e249d41088fb53082e7f19cb:-847289043,86b8b6190249d4105baefb532c0efbdb:-1462055596,574836d53e49d4109b8f740819bb5283:-596995533,765aa2d98009d4109bb7301b88f915f4:-191165334,1f992a99e809d410d0df935e77e03447:-273337547,0089aa991709d4107ef25f024404980f:1753840218,5420328d7c8994101b388f1f8a85790f:-336574988,93f92a4911899410455e8576bfd66f46:-1559819336,b89ca58194c594108654f40ab3562066:-699930527,1f6aa9cdcc859410bf6955b0caa254aa:-1765560607,8d38a1cdb9859410f71ac875b65974ec:2104573205,8bb12149ac859410c95114204638d74f:-631784067,245121496985941086364b3f7310aa1c:642302442,116f55c5a3859410a347d16f227b453c:-1977925770,74be15850e85941006d85dafbcca234e:2026033023</update_guid_history>
<update_set display_value="" />
<view />
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</application>
<category>customer</category>
<comments />
<name>sysevent_script_action_02ca0f004fd6320016183ce18110c73b</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sysevent_script_action"&gt;&lt;sysevent_script_action action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;condition_script/&gt;&lt;description/&gt;&lt;event_name&gt;x_pd_integration.add_inc_external_ref&lt;/event_name&gt;&lt;name&gt;PagerDuty Add Inc External Reference&lt;/name&gt;&lt;order&gt;100&lt;/order&gt;&lt;script&gt;&lt;![CDATA[/** * Changes made to this script are not supported by PagerDuty ***/
gs.debug('PagerDuty event \'x_pd_integration.add_inc_external_ref\' fired from {0}', current.getDisplayValue());
var pd = new x_pd_integration.PagerDuty();
var pdIncidentID = x_pd_integration.TaskEntityHelper.getPdId(current);
var currentUserEmail = pd.getValidEmail(String(event.parm1));
gs.debug('Script Action for event x_pd_integration.add_inc_external_ref: pdIncidentID={0}, currentUserEmail={2}', pdIncidentID, currentUserEmail);
if (!gs.nil(pdIncidentID) &amp;&amp; !gs.nil(currentUserEmail)) {
  pd.addIncidentMetadataReference(current, pdIncidentID, currentUserEmail);
}
]]&gt;&lt;/script&gt;&lt;synchronous&gt;false&lt;/synchronous&gt;&lt;sys_class_name&gt;sysevent_script_action&lt;/sys_class_name&gt;&lt;sys_created_by&gt;PagerDuty_v8.1&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2017-04-18 17:16:18&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;02ca0f004fd6320016183ce18110c73b&lt;/sys_id&gt;&lt;sys_mod_count&gt;19&lt;/sys_mod_count&gt;&lt;sys_name&gt;PagerDuty Add Inc External Reference&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="PagerDuty Incident Resolution Platform"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sysevent_script_action_02ca0f004fd6320016183ce18110c73b&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;PagerDuty_v8.1&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2018-07-10 15:36:07&lt;/sys_updated_on&gt;&lt;/sysevent_script_action&gt;&lt;sys_es_latest_script action="INSERT_OR_UPDATE"&gt;&lt;id&gt;02ca0f004fd6320016183ce18110c73b&lt;/id&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2025-03-11 14:48:40&lt;/sys_created_on&gt;&lt;sys_id&gt;3f837a10c350221040d0becdd401311f&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-03-11 14:48:40&lt;/sys_updated_on&gt;&lt;table&gt;sysevent_script_action&lt;/table&gt;&lt;use_es_latest&gt;false&lt;/use_es_latest&gt;&lt;/sys_es_latest_script&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1766031955</payload_hash>
<remote_update_set display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Child">2dd0afe2c3ac221040d0becdd40131d1</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-03-31 04:08:31</sys_created_on>
<sys_id>e9d0afe2c3ac221040d0becdd40131d2</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>19585ade3180000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-03-31 04:08:31</sys_updated_on>
<table>x_pd_integration.add_inc_external_ref</table>
<target_name>PagerDuty Add Inc External Reference</target_name>
<type>Script Action</type>
<update_domain>global</update_domain>
<update_guid>7b83fa5ca410221028580df1c03617a9</update_guid>
<update_guid_history>7b83fa5ca410221028580df1c03617a9:-1766031955,d684a8cc561363002336123cd42e1b6d:-1520667548,d684a8cc561363002336123cd42e1b6d:-1520667548,d684a8cc561363002336123cd42e1b6d:-1520667548,d684a8cc561363002336123cd42e1b6d:-1520667548</update_guid_history>
<update_set display_value="" />
<view />
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</application>
<category>customer</category>
<comments />
<name>sys_script_client_b312e5592ff150101bf7ffecf699b6be</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script_client"&gt;&lt;sys_script_client action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;applies_extended&gt;false&lt;/applies_extended&gt;&lt;condition/&gt;&lt;description&gt;This script disables PagerDuty UI actions (buttons) until ServiceNow and PagerDuty incidents linkage.&lt;/description&gt;&lt;field&gt;x_pd_integration_incident&lt;/field&gt;&lt;global&gt;true&lt;/global&gt;&lt;isolate_script&gt;true&lt;/isolate_script&gt;&lt;messages/&gt;&lt;name&gt;Disable PagerDuty Buttons&lt;/name&gt;&lt;order/&gt;&lt;script&gt;&lt;![CDATA[function onChange(control, oldValue, newValue, isLoading, isTemplate) {
  if (!g_user.hasRoleFromList('x_pd_integration.admin,x_pd_integration.incident_response,x_pd_integration.services_provisioning')) {
    return;
  }

  var actions = ['add_conf_bridge', 'add_responders', 'enable_status_update', 'enable_incident_workflows', 'change_incident_type'];

  if (!newValue || newValue.includes('---')) {
    actions.forEach(function(action) {
      jQuery('.form_action_button[data-action-name="' + action + '"]').attr('disabled', true);
    });
  } else {
    actions.forEach(function(action) {
      jQuery('.form_action_button[data-action-name="' + action + '"]').removeAttr('disabled');
    });
  }
}
]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_client&lt;/sys_class_name&gt;&lt;sys_created_by&gt;PagerDuty_v8.1&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2020-07-03 11:21:39&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;b312e5592ff150101bf7ffecf699b6be&lt;/sys_id&gt;&lt;sys_mod_count&gt;2&lt;/sys_mod_count&gt;&lt;sys_name&gt;Disable PagerDuty Buttons&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="PagerDuty Incident Resolution Platform"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_client_b312e5592ff150101bf7ffecf699b6be&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-03-11 14:25:22&lt;/sys_updated_on&gt;&lt;table&gt;incident&lt;/table&gt;&lt;type&gt;onChange&lt;/type&gt;&lt;ui_type&gt;0&lt;/ui_type&gt;&lt;view/&gt;&lt;/sys_script_client&gt;&lt;/record_update&gt;</payload>
<payload_hash>-84112866</payload_hash>
<remote_update_set display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Child">2dd0afe2c3ac221040d0becdd40131d1</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-03-31 04:08:31</sys_created_on>
<sys_id>e9d0afe2c3ac221040d0becdd40131d5</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>19585988f970000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-03-31 04:08:31</sys_updated_on>
<table>incident</table>
<target_name>Disable PagerDuty Buttons</target_name>
<type>Client Script</type>
<update_domain>global</update_domain>
<update_guid>6e3ea6582b102210c6c175d3841da1df</update_guid>
<update_guid_history>6e3ea6582b102210c6c175d3841da1df:-84112866,18e1835ae1fc1210d427bb784440b7f7:-1898899657,2752655992f15010fad8504cdead2c28:1233950537,2752655992f15010fad8504cdead2c28:1233950537</update_guid_history>
<update_set display_value="" />
<view />
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</application>
<category>customer</category>
<comments />
<name>sys_script_9a4c03804fd6320016183ce18110c7f1</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update sys_domain="global" table="sys_script"&gt;&lt;sys_script action="INSERT_OR_UPDATE"&gt;&lt;abort_action&gt;false&lt;/abort_action&gt;&lt;access&gt;package_private&lt;/access&gt;&lt;action_delete&gt;false&lt;/action_delete&gt;&lt;action_insert&gt;true&lt;/action_insert&gt;&lt;action_query&gt;false&lt;/action_query&gt;&lt;action_update&gt;false&lt;/action_update&gt;&lt;active&gt;true&lt;/active&gt;&lt;add_message&gt;false&lt;/add_message&gt;&lt;advanced&gt;true&lt;/advanced&gt;&lt;change_fields&gt;false&lt;/change_fields&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;collection&gt;incident&lt;/collection&gt;&lt;condition/&gt;&lt;description/&gt;&lt;execute_function&gt;false&lt;/execute_function&gt;&lt;filter_condition table="incident"&gt;x_pd_integration_incidentISNOTEMPTY^x_pd_integration_incidentNOT LIKE---^EQ&lt;item endquery="false" field="x_pd_integration_incident" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/&gt;&lt;item endquery="false" field="x_pd_integration_incident" goto="false" newquery="false" operator="NOT LIKE" or="false" value="---"/&gt;&lt;item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/&gt;&lt;/filter_condition&gt;&lt;is_rest&gt;false&lt;/is_rest&gt;&lt;message/&gt;&lt;name&gt;PD Add Incident External Reference&lt;/name&gt;&lt;order&gt;50&lt;/order&gt;&lt;priority&gt;100&lt;/priority&gt;&lt;rest_method/&gt;&lt;rest_method_text/&gt;&lt;rest_service/&gt;&lt;rest_service_text/&gt;&lt;rest_variables/&gt;&lt;role_conditions/&gt;&lt;script&gt;&lt;![CDATA[(function executeRule (current, previous /* null when async*/) {
  var eventName = 'x_pd_integration.add_inc_external_ref';
  gs.debug('Firing event {0} for {1}', eventName, current.getDisplayValue());
  var currentUserSysid = gs.getUser().getID();
  gs.eventQueue(eventName, current, currentUserSysid);
})(current, previous);
]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script&lt;/sys_class_name&gt;&lt;sys_created_by&gt;PagerDuty_v8.1&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2017-04-18 17:24:22&lt;/sys_created_on&gt;&lt;sys_domain&gt;global&lt;/sys_domain&gt;&lt;sys_domain_path&gt;/&lt;/sys_domain_path&gt;&lt;sys_id&gt;9a4c03804fd6320016183ce18110c7f1&lt;/sys_id&gt;&lt;sys_mod_count&gt;81&lt;/sys_mod_count&gt;&lt;sys_name&gt;PD Add Incident External Reference&lt;/sys_name&gt;&lt;sys_overrides/&gt;&lt;sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="PagerDuty Incident Resolution Platform"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_9a4c03804fd6320016183ce18110c7f1&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;PagerDuty_v8.1&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2023-07-13 10:36:29&lt;/sys_updated_on&gt;&lt;template/&gt;&lt;when&gt;after&lt;/when&gt;&lt;/sys_script&gt;&lt;sys_translated_text action="delete_multiple" query="documentkey=9a4c03804fd6320016183ce18110c7f1"/&gt;&lt;sys_es_latest_script action="INSERT_OR_UPDATE"&gt;&lt;id&gt;9a4c03804fd6320016183ce18110c7f1&lt;/id&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2025-02-18 18:39:46&lt;/sys_created_on&gt;&lt;sys_id&gt;141f5369c3bb121040d0becdd40131c2&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-02-18 18:39:46&lt;/sys_updated_on&gt;&lt;table&gt;sys_script&lt;/table&gt;&lt;use_es_latest&gt;false&lt;/use_es_latest&gt;&lt;/sys_es_latest_script&gt;&lt;/record_update&gt;</payload>
<payload_hash>-777904947</payload_hash>
<remote_update_set display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Child">2dd0afe2c3ac221040d0becdd40131d1</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-03-31 04:08:31</sys_created_on>
<sys_id>edd0afe2c3ac221040d0becdd40131d4</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1951a5becad0000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-03-31 04:08:31</sys_updated_on>
<table>incident</table>
<target_name>PD Add Incident External Reference</target_name>
<type>Business Rule</type>
<update_domain>global</update_domain>
<update_guid>601fd7a982bb1210f4ef7195afbf482d</update_guid>
<update_guid_history>601fd7a982bb1210f4ef7195afbf482d:-777904947,1bccb37c4708b110c25c2a6a400879e3:149424455,a7260ccd8e0133002c8dce84101f5ef8:-1934920881,569577def5c7e110dc255dda4bfae314:11272085,a7260ccd8e0133002c8dce84101f5ef8:-1934920881,a7260ccd8e0133002c8dce84101f5ef8:-1934920881,a7260ccd8e0133002c8dce84101f5ef8:-1934920881,fbc50c8d3f013300ecde6fcdaa7418ca:1304711262,016488c91e013300d3e64164d97d277f:-1934920881,8f4c3b7830013300c91234181386a2f7:553298943,4bebb378310133001f768267a39d384f:-1922993522,ef7eb88023a327002b19f6972124dc1d:1304711262,ef7eb88023a327002b19f6972124dc1d:1304711262,16d26dd2531f23007b494c9b5cb4a816:-1934920881,af2e9d12e21f23001018dff0a8141e53:1304711262,4b9d9512601f2300b3642bf8cb2d658f:-1934920881,e84c559e49db230086193e959c69e7ac:1304711262,68dadd5e09db23005af35fccb7f11c49:-1934920881,8568991e4cdb230033609fe38b705955:1304711262,ed18dddad4db230074ad2e76d24845ba:-1934920881,6e9b8556c4db2300853f9319d9546428:1304711262,be0a49d2dbdb230068e15e5c37fd0a9f:-1934920881,cf9f389e369b23007574349925648d01:1304711262,fa9dfc1eb69b230060159f6f2737f32c:-1934920881,d324e012099b2300bbc8f73eebf44c90:1304711262,e2c360121e9b2300e64a3f3ed05cdb12:-1934920881,e732ec9e745b2300f8619fe067921add:1304711262,72fed41e755b23002329daba5c675505:-1934920881,648454d6055b2300a98c462223f7da78:1304711262,bb625096745b2300d3dd065bb5503941:-1934920881,85511856a65b2300a5ba207328242c56:1304711262,9bc286c219572300d9d33d68fe999f5f:-1934920881,ac910a82955723001397248aed0d0730:1304711262,67dffdce6517230021dd14f87e788cd2:-1934920881,7f5b7d8e0c1723003a229202840076d6:1304711262,ba22f10ac61723000b2e096185de3c48:-1934920881,463ca0c60e932300e95536bb58a36b11:1304711262,cb41e44e6d5323004bf247666c2bd819:-1934920881,2bbcdc0e6d532300ea41f57385205968:1304711262,798b1c4a1b5323008c89634e83c7a63a:-1934920881,ee565cc683532300df4645e099b54d6f:1304711262,a094accca6136300c3dcf6515f16f629:-1934920881</update_guid_history>
<update_set display_value="" />
<view />
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="PagerDuty Incident Resolution Platform">39a9d9664f834e00dd657bb28110c77b</application>
<category>customer</category>
<comments />
<name>sys_user_role_contains_95778cc92f303010a6dfe36ef699b69d</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_user_role_contains"&gt;&lt;sys_user_role_contains action="INSERT_OR_UPDATE"&gt;&lt;contains display_value="personalize_dictionary" name="personalize_dictionary"&gt;30169459a9fe3dba01a70fa0acebfe45&lt;/contains&gt;&lt;role display_value="x_pd_integration.services_provisioning" name="x_pd_integration.services_provisioning"&gt;90480f29dbb02010c2bfb080399619dd&lt;/role&gt;&lt;sys_class_name&gt;sys_user_role_contains&lt;/sys_class_name&gt;&lt;sys_created_by&gt;admin&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2021-06-15 09:25:31&lt;/sys_created_on&gt;&lt;sys_id&gt;95778cc92f303010a6dfe36ef699b69d&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_name&gt;personalize_dictionary.x_pd_integration.services_provisioning&lt;/sys_name&gt;&lt;sys_package display_value="PagerDuty Incident Resolution Platform" source="x_pd_integration"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="PagerDuty Incident Resolution Platform"&gt;39a9d9664f834e00dd657bb28110c77b&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_user_role_contains_95778cc92f303010a6dfe36ef699b69d&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;admin&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2021-06-15 09:25:31&lt;/sys_updated_on&gt;&lt;/sys_user_role_contains&gt;&lt;/record_update&gt;</payload>
<payload_hash>-1803890226</payload_hash>
<remote_update_set display_value="pd-fo-cnb-pd_upgrade_810-705395 - Batch Child">2dd0afe2c3ac221040d0becdd40131d1</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>admin</sys_created_by>
<sys_created_on>2025-03-31 04:08:31</sys_created_on>
<sys_id>edd0afe2c3ac221040d0becdd40131d7</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_recorded_at>1951a88d8120000001</sys_recorded_at>
<sys_updated_by>admin</sys_updated_by>
<sys_updated_on>2025-03-31 04:08:31</sys_updated_on>
<table />
<target_name>personalize_dictionary.x_pd_integration.services_provisioning</target_name>
<type>Contained Role</type>
<update_domain>global</update_domain>
<update_guid>834aaf69a1fb121071348685d76ab78f</update_guid>
<update_guid_history>834aaf69a1fb121071348685d76ab78f:-1803890226,813aefe549fb12108e157941cf112196:-1769216781,61778cc9af3030104deae7b6a4ee9ca3:-1803890226</update_guid_history>
<update_set display_value="" />
<view />
</sys_update_xml>
</unload>